/*
 Generated Code! Do not manually edit this code. Modify the generator instead.
*/
#pragma once
#include "../DrEl.h"
#include "../AnyToStringConverter.h"

namespace Data {
    enum class dungeon_RecordSubType : __int32
    {
		dungeon_record_sub_none = 0,
		dungeon_record_sub_normal = 1,
		dungeon_record_sub_sealed = 2,
		dungeon_record_sub_wave = 3,
		dungeon_record_sub_count = 4,
    };
#pragma pack(push, 1)
	struct dungeon_Record : DrEl
	{
	private:
		static std::wstring Get_dungeon_type_EnumValue(__int8 value);
		static std::wstring Get_required_preceding_quest_check_EnumValue(__int8 value);
	public:
		std::any GetField(const wchar_t* fieldName) const {
			if (wcscmp(fieldName, L"alias") == 0) return alias;
			if (wcscmp(fieldName, L"dungeon_type") == 0) return dungeon_type;
			if (wcscmp(fieldName, L"group") == 0) return group;
			if (wcscmp(fieldName, L"zone_neutral") == 0) return zone_neutral;
			if (wcscmp(fieldName, L"zone_neutral_1") == 0) return zone_neutral[0];
			if (wcscmp(fieldName, L"zone_neutral_2") == 0) return zone_neutral[1];
			if (wcscmp(fieldName, L"zone") == 0) return zone;
			if (wcscmp(fieldName, L"zone_1") == 0) return zone[0];
			if (wcscmp(fieldName, L"zone_2") == 0) return zone[1];
			if (wcscmp(fieldName, L"zone_3") == 0) return zone[2];
			if (wcscmp(fieldName, L"zone_4") == 0) return zone[3];
			if (wcscmp(fieldName, L"zone_5") == 0) return zone[4];
			if (wcscmp(fieldName, L"zone_6") == 0) return zone[5];
			if (wcscmp(fieldName, L"zone_7") == 0) return zone[6];
			if (wcscmp(fieldName, L"zone_8") == 0) return zone[7];
			if (wcscmp(fieldName, L"zone_9") == 0) return zone[8];
			if (wcscmp(fieldName, L"zone_mission_step") == 0) return zone_mission_step;
			if (wcscmp(fieldName, L"zone_mission_step_1") == 0) return zone_mission_step[0];
			if (wcscmp(fieldName, L"zone_mission_step_2") == 0) return zone_mission_step[1];
			if (wcscmp(fieldName, L"zone_mission_step_3") == 0) return zone_mission_step[2];
			if (wcscmp(fieldName, L"zone_mission_step_4") == 0) return zone_mission_step[3];
			if (wcscmp(fieldName, L"zone_mission_step_5") == 0) return zone_mission_step[4];
			if (wcscmp(fieldName, L"zone_mission_step_6") == 0) return zone_mission_step[5];
			if (wcscmp(fieldName, L"zone_mission_step_7") == 0) return zone_mission_step[6];
			if (wcscmp(fieldName, L"zone_mission_step_8") == 0) return zone_mission_step[7];
			if (wcscmp(fieldName, L"zone_mission_step_9") == 0) return zone_mission_step[8];
			if (wcscmp(fieldName, L"feedback") == 0) return feedback;
			if (wcscmp(fieldName, L"arena_entrance_zone") == 0) return arena_entrance_zone;
			if (wcscmp(fieldName, L"required_level") == 0) return required_level;
			if (wcscmp(fieldName, L"required_mastery_level") == 0) return required_mastery_level;
			if (wcscmp(fieldName, L"required_preceding_quest") == 0) return required_preceding_quest;
			if (wcscmp(fieldName, L"required_preceding_quest_1") == 0) return required_preceding_quest[0];
			if (wcscmp(fieldName, L"required_preceding_quest_2") == 0) return required_preceding_quest[1];
			if (wcscmp(fieldName, L"required_preceding_quest_3") == 0) return required_preceding_quest[2];
			if (wcscmp(fieldName, L"required_preceding_quest_check") == 0) return required_preceding_quest_check;
			if (wcscmp(fieldName, L"enable_heart_count") == 0) return enable_heart_count;
			if (wcscmp(fieldName, L"max_instant_heart_count_difficulty_type") == 0) return max_instant_heart_count_difficulty_type;
			if (wcscmp(fieldName, L"max_instant_heart_count_difficulty_type_1") == 0) return max_instant_heart_count_difficulty_type[0];
			if (wcscmp(fieldName, L"max_instant_heart_count_difficulty_type_2") == 0) return max_instant_heart_count_difficulty_type[1];
			if (wcscmp(fieldName, L"max_instant_heart_count_difficulty_type_3") == 0) return max_instant_heart_count_difficulty_type[2];
			if (wcscmp(fieldName, L"gs_item_blade_master") == 0) return gs_item_blade_master;
			if (wcscmp(fieldName, L"gs_item_blade_master_hard") == 0) return gs_item_blade_master_hard;
			if (wcscmp(fieldName, L"gs_item_blade_master_easy") == 0) return gs_item_blade_master_easy;
			if (wcscmp(fieldName, L"gs_item_kung_fu_fighter") == 0) return gs_item_kung_fu_fighter;
			if (wcscmp(fieldName, L"gs_item_kung_fu_fighter_hard") == 0) return gs_item_kung_fu_fighter_hard;
			if (wcscmp(fieldName, L"gs_item_kung_fu_fighter_easy") == 0) return gs_item_kung_fu_fighter_easy;
			if (wcscmp(fieldName, L"gs_item_force_master") == 0) return gs_item_force_master;
			if (wcscmp(fieldName, L"gs_item_force_master_hard") == 0) return gs_item_force_master_hard;
			if (wcscmp(fieldName, L"gs_item_force_master_easy") == 0) return gs_item_force_master_easy;
			if (wcscmp(fieldName, L"gs_item_destroyer") == 0) return gs_item_destroyer;
			if (wcscmp(fieldName, L"gs_item_destroyer_hard") == 0) return gs_item_destroyer_hard;
			if (wcscmp(fieldName, L"gs_item_destroyer_easy") == 0) return gs_item_destroyer_easy;
			if (wcscmp(fieldName, L"gs_item_summoner") == 0) return gs_item_summoner;
			if (wcscmp(fieldName, L"gs_item_summoner_hard") == 0) return gs_item_summoner_hard;
			if (wcscmp(fieldName, L"gs_item_summoner_easy") == 0) return gs_item_summoner_easy;
			if (wcscmp(fieldName, L"gs_item_assassin") == 0) return gs_item_assassin;
			if (wcscmp(fieldName, L"gs_item_assassin_hard") == 0) return gs_item_assassin_hard;
			if (wcscmp(fieldName, L"gs_item_assassin_easy") == 0) return gs_item_assassin_easy;
			if (wcscmp(fieldName, L"gs_item_sword_master") == 0) return gs_item_sword_master;
			if (wcscmp(fieldName, L"gs_item_sword_master_hard") == 0) return gs_item_sword_master_hard;
			if (wcscmp(fieldName, L"gs_item_sword_master_easy") == 0) return gs_item_sword_master_easy;
			if (wcscmp(fieldName, L"gs_item_warlock") == 0) return gs_item_warlock;
			if (wcscmp(fieldName, L"gs_item_warlock_hard") == 0) return gs_item_warlock_hard;
			if (wcscmp(fieldName, L"gs_item_warlock_easy") == 0) return gs_item_warlock_easy;
			if (wcscmp(fieldName, L"gs_item_soul_fighter") == 0) return gs_item_soul_fighter;
			if (wcscmp(fieldName, L"gs_item_soul_fighter_hard") == 0) return gs_item_soul_fighter_hard;
			if (wcscmp(fieldName, L"gs_item_soul_fighter_easy") == 0) return gs_item_soul_fighter_easy;
			if (wcscmp(fieldName, L"gs_item_shooter") == 0) return gs_item_shooter;
			if (wcscmp(fieldName, L"gs_item_shooter_hard") == 0) return gs_item_shooter_hard;
			if (wcscmp(fieldName, L"gs_item_shooter_easy") == 0) return gs_item_shooter_easy;
			if (wcscmp(fieldName, L"gs_item_warrior") == 0) return gs_item_warrior;
			if (wcscmp(fieldName, L"gs_item_warrior_hard") == 0) return gs_item_warrior_hard;
			if (wcscmp(fieldName, L"gs_item_warrior_easy") == 0) return gs_item_warrior_easy;
			if (wcscmp(fieldName, L"gs_item_archer") == 0) return gs_item_archer;
			if (wcscmp(fieldName, L"gs_item_archer_hard") == 0) return gs_item_archer_hard;
			if (wcscmp(fieldName, L"gs_item_archer_easy") == 0) return gs_item_archer_easy;
			if (wcscmp(fieldName, L"gs_item_spear_master") == 0) return gs_item_spear_master;
			if (wcscmp(fieldName, L"gs_item_spear_master_hard") == 0) return gs_item_spear_master_hard;
			if (wcscmp(fieldName, L"gs_item_spear_master_easy") == 0) return gs_item_spear_master_easy;
			if (wcscmp(fieldName, L"gs_item_thunderer") == 0) return gs_item_thunderer;
			if (wcscmp(fieldName, L"gs_item_thunderer_hard") == 0) return gs_item_thunderer_hard;
			if (wcscmp(fieldName, L"gs_item_thunderer_easy") == 0) return gs_item_thunderer_easy;
			if (wcscmp(fieldName, L"gs_item_dual_blader") == 0) return gs_item_dual_blader;
			if (wcscmp(fieldName, L"gs_item_dual_blader_hard") == 0) return gs_item_dual_blader_hard;
			if (wcscmp(fieldName, L"gs_item_dual_blader_easy") == 0) return gs_item_dual_blader_easy;
			if (wcscmp(fieldName, L"gs_item_bard") == 0) return gs_item_bard;
			if (wcscmp(fieldName, L"gs_item_bard_hard") == 0) return gs_item_bard_hard;
			if (wcscmp(fieldName, L"gs_item_bard_easy") == 0) return gs_item_bard_easy;
			if (wcscmp(fieldName, L"apply_contents_ban_id") == 0) return apply_contents_ban_id;
			if (wcscmp(fieldName, L"pc_max") == 0) return pc_max;
			if (wcscmp(fieldName, L"ignore_party_difficulty_type") == 0) return ignore_party_difficulty_type;
			if (wcscmp(fieldName, L"npc_for_step") == 0) return npc_for_step;
			if (wcscmp(fieldName, L"npc_for_step_1") == 0) return npc_for_step[0];
			if (wcscmp(fieldName, L"npc_for_step_2") == 0) return npc_for_step[1];
			if (wcscmp(fieldName, L"npc_for_step_3") == 0) return npc_for_step[2];
			if (wcscmp(fieldName, L"npc_for_step_4") == 0) return npc_for_step[3];
			if (wcscmp(fieldName, L"npc_for_step_5") == 0) return npc_for_step[4];
			if (wcscmp(fieldName, L"npc_for_step_6") == 0) return npc_for_step[5];
			if (wcscmp(fieldName, L"npc_for_step_7") == 0) return npc_for_step[6];
			if (wcscmp(fieldName, L"npc_for_step_8") == 0) return npc_for_step[7];
			if (wcscmp(fieldName, L"npc_for_step_9") == 0) return npc_for_step[8];
			if (wcscmp(fieldName, L"pc_spawn_for_step") == 0) return pc_spawn_for_step;
			if (wcscmp(fieldName, L"pc_spawn_for_step_1") == 0) return pc_spawn_for_step[0];
			if (wcscmp(fieldName, L"pc_spawn_for_step_2") == 0) return pc_spawn_for_step[1];
			if (wcscmp(fieldName, L"pc_spawn_for_step_3") == 0) return pc_spawn_for_step[2];
			if (wcscmp(fieldName, L"pc_spawn_for_step_4") == 0) return pc_spawn_for_step[3];
			if (wcscmp(fieldName, L"pc_spawn_for_step_5") == 0) return pc_spawn_for_step[4];
			if (wcscmp(fieldName, L"pc_spawn_for_step_6") == 0) return pc_spawn_for_step[5];
			if (wcscmp(fieldName, L"pc_spawn_for_step_7") == 0) return pc_spawn_for_step[6];
			if (wcscmp(fieldName, L"pc_spawn_for_step_8") == 0) return pc_spawn_for_step[7];
			if (wcscmp(fieldName, L"pc_spawn_for_step_9") == 0) return pc_spawn_for_step[8];
			if (wcscmp(fieldName, L"money_for_step") == 0) return money_for_step;
			if (wcscmp(fieldName, L"money_for_step_1") == 0) return money_for_step[0];
			if (wcscmp(fieldName, L"money_for_step_2") == 0) return money_for_step[1];
			if (wcscmp(fieldName, L"money_for_step_3") == 0) return money_for_step[2];
			if (wcscmp(fieldName, L"money_for_step_4") == 0) return money_for_step[3];
			if (wcscmp(fieldName, L"money_for_step_5") == 0) return money_for_step[4];
			if (wcscmp(fieldName, L"money_for_step_6") == 0) return money_for_step[5];
			if (wcscmp(fieldName, L"money_for_step_7") == 0) return money_for_step[6];
			if (wcscmp(fieldName, L"money_for_step_8") == 0) return money_for_step[7];
			if (wcscmp(fieldName, L"money_for_step_9") == 0) return money_for_step[8];
			if (wcscmp(fieldName, L"item_for_step") == 0) return item_for_step;
			if (wcscmp(fieldName, L"item_for_step_1") == 0) return item_for_step[0];
			if (wcscmp(fieldName, L"item_for_step_2") == 0) return item_for_step[1];
			if (wcscmp(fieldName, L"item_for_step_3") == 0) return item_for_step[2];
			if (wcscmp(fieldName, L"item_for_step_4") == 0) return item_for_step[3];
			if (wcscmp(fieldName, L"item_for_step_5") == 0) return item_for_step[4];
			if (wcscmp(fieldName, L"item_for_step_6") == 0) return item_for_step[5];
			if (wcscmp(fieldName, L"item_for_step_7") == 0) return item_for_step[6];
			if (wcscmp(fieldName, L"item_for_step_8") == 0) return item_for_step[7];
			if (wcscmp(fieldName, L"item_for_step_9") == 0) return item_for_step[8];
			if (wcscmp(fieldName, L"item_count_for_step") == 0) return item_count_for_step;
			if (wcscmp(fieldName, L"item_count_for_step_1") == 0) return item_count_for_step[0];
			if (wcscmp(fieldName, L"item_count_for_step_2") == 0) return item_count_for_step[1];
			if (wcscmp(fieldName, L"item_count_for_step_3") == 0) return item_count_for_step[2];
			if (wcscmp(fieldName, L"item_count_for_step_4") == 0) return item_count_for_step[3];
			if (wcscmp(fieldName, L"item_count_for_step_5") == 0) return item_count_for_step[4];
			if (wcscmp(fieldName, L"item_count_for_step_6") == 0) return item_count_for_step[5];
			if (wcscmp(fieldName, L"item_count_for_step_7") == 0) return item_count_for_step[6];
			if (wcscmp(fieldName, L"item_count_for_step_8") == 0) return item_count_for_step[7];
			if (wcscmp(fieldName, L"item_count_for_step_9") == 0) return item_count_for_step[8];
			if (wcscmp(fieldName, L"quest_for_step") == 0) return quest_for_step;
			if (wcscmp(fieldName, L"quest_for_step_1") == 0) return quest_for_step[0];
			if (wcscmp(fieldName, L"quest_for_step_2") == 0) return quest_for_step[1];
			if (wcscmp(fieldName, L"quest_for_step_3") == 0) return quest_for_step[2];
			if (wcscmp(fieldName, L"quest_for_step_4") == 0) return quest_for_step[3];
			if (wcscmp(fieldName, L"quest_for_step_5") == 0) return quest_for_step[4];
			if (wcscmp(fieldName, L"quest_for_step_6") == 0) return quest_for_step[5];
			if (wcscmp(fieldName, L"quest_for_step_7") == 0) return quest_for_step[6];
			if (wcscmp(fieldName, L"quest_for_step_8") == 0) return quest_for_step[7];
			if (wcscmp(fieldName, L"quest_for_step_9") == 0) return quest_for_step[8];
			if (wcscmp(fieldName, L"quest") == 0) return quest;
			if (wcscmp(fieldName, L"dungeon_quest_difficulty_type") == 0) return dungeon_quest_difficulty_type;
			if (wcscmp(fieldName, L"dungeon_quest_difficulty_type_1") == 0) return dungeon_quest_difficulty_type[0];
			if (wcscmp(fieldName, L"dungeon_quest_difficulty_type_2") == 0) return dungeon_quest_difficulty_type[1];
			if (wcscmp(fieldName, L"dungeon_quest_difficulty_type_3") == 0) return dungeon_quest_difficulty_type[2];
			if (wcscmp(fieldName, L"effect_pc_difficulty_type") == 0) return effect_pc_difficulty_type;
			if (wcscmp(fieldName, L"effect_pc_difficulty_type_1") == 0) return effect_pc_difficulty_type[0];
			if (wcscmp(fieldName, L"effect_pc_difficulty_type_2") == 0) return effect_pc_difficulty_type[1];
			if (wcscmp(fieldName, L"effect_pc_difficulty_type_3") == 0) return effect_pc_difficulty_type[2];
			if (wcscmp(fieldName, L"effect_npc_difficulty_type") == 0) return effect_npc_difficulty_type;
			if (wcscmp(fieldName, L"effect_npc_difficulty_type_1") == 0) return effect_npc_difficulty_type[0];
			if (wcscmp(fieldName, L"effect_npc_difficulty_type_2") == 0) return effect_npc_difficulty_type[1];
			if (wcscmp(fieldName, L"effect_npc_difficulty_type_3") == 0) return effect_npc_difficulty_type[2];
			if (wcscmp(fieldName, L"enable_skill_score") == 0) return enable_skill_score;
			if (wcscmp(fieldName, L"skill_score_recommend_gear_score") == 0) return skill_score_recommend_gear_score;
			if (wcscmp(fieldName, L"skill_score_recommend_clear_time_step") == 0) return skill_score_recommend_clear_time_step;
			if (wcscmp(fieldName, L"skill_score_recommend_clear_time_step_1") == 0) return skill_score_recommend_clear_time_step[0];
			if (wcscmp(fieldName, L"skill_score_recommend_clear_time_step_2") == 0) return skill_score_recommend_clear_time_step[1];
			if (wcscmp(fieldName, L"skill_score_recommend_clear_time_step_3") == 0) return skill_score_recommend_clear_time_step[2];
			if (wcscmp(fieldName, L"skill_score_recommend_clear_time_step_4") == 0) return skill_score_recommend_clear_time_step[3];
			if (wcscmp(fieldName, L"skill_score_recommend_clear_time_step_5") == 0) return skill_score_recommend_clear_time_step[4];
			if (wcscmp(fieldName, L"skill_score_recommend_clear_time_bonus") == 0) return skill_score_recommend_clear_time_bonus;
			if (wcscmp(fieldName, L"skill_score_recommend_clear_time_bonus_1") == 0) return skill_score_recommend_clear_time_bonus[0];
			if (wcscmp(fieldName, L"skill_score_recommend_clear_time_bonus_2") == 0) return skill_score_recommend_clear_time_bonus[1];
			if (wcscmp(fieldName, L"skill_score_recommend_clear_time_bonus_3") == 0) return skill_score_recommend_clear_time_bonus[2];
			if (wcscmp(fieldName, L"skill_score_recommend_clear_time_bonus_4") == 0) return skill_score_recommend_clear_time_bonus[3];
			if (wcscmp(fieldName, L"skill_score_recommend_clear_time_bonus_5") == 0) return skill_score_recommend_clear_time_bonus[4];
			if (wcscmp(fieldName, L"skill_score_recommand_party_member_count_bonus_difficulty_type") == 0) return skill_score_recommand_party_member_count_bonus_difficulty_type;
			if (wcscmp(fieldName, L"skill_score_recommand_party_member_count_bonus_difficulty_type_1") == 0) return skill_score_recommand_party_member_count_bonus_difficulty_type[0];
			if (wcscmp(fieldName, L"skill_score_recommand_party_member_count_bonus_difficulty_type_2") == 0) return skill_score_recommand_party_member_count_bonus_difficulty_type[1];
			if (wcscmp(fieldName, L"skill_score_recommand_party_member_count_bonus_difficulty_type_3") == 0) return skill_score_recommand_party_member_count_bonus_difficulty_type[2];
			if (wcscmp(fieldName, L"skill_score_recommend_hp_step") == 0) return skill_score_recommend_hp_step;
			if (wcscmp(fieldName, L"skill_score_recommend_hp_step_1") == 0) return skill_score_recommend_hp_step[0];
			if (wcscmp(fieldName, L"skill_score_recommend_hp_step_2") == 0) return skill_score_recommend_hp_step[1];
			if (wcscmp(fieldName, L"skill_score_recommend_hp_step_3") == 0) return skill_score_recommend_hp_step[2];
			if (wcscmp(fieldName, L"skill_score_recommend_hp_step_4") == 0) return skill_score_recommend_hp_step[3];
			if (wcscmp(fieldName, L"skill_score_recommend_hp_step_5") == 0) return skill_score_recommend_hp_step[4];
			if (wcscmp(fieldName, L"skill_score_recommend_hp_bonus") == 0) return skill_score_recommend_hp_bonus;
			if (wcscmp(fieldName, L"skill_score_recommend_hp_bonus_1") == 0) return skill_score_recommend_hp_bonus[0];
			if (wcscmp(fieldName, L"skill_score_recommend_hp_bonus_2") == 0) return skill_score_recommend_hp_bonus[1];
			if (wcscmp(fieldName, L"skill_score_recommend_hp_bonus_3") == 0) return skill_score_recommend_hp_bonus[2];
			if (wcscmp(fieldName, L"skill_score_recommend_hp_bonus_4") == 0) return skill_score_recommend_hp_bonus[3];
			if (wcscmp(fieldName, L"skill_score_recommend_hp_bonus_5") == 0) return skill_score_recommend_hp_bonus[4];
			if (wcscmp(fieldName, L"skill_score_recommend_use_heart_count") == 0) return skill_score_recommend_use_heart_count;
			if (wcscmp(fieldName, L"skill_score_recommend_use_heart_count_bonus") == 0) return skill_score_recommend_use_heart_count_bonus;
			if (wcscmp(fieldName, L"skill_score_recommend_use_item_point") == 0) return skill_score_recommend_use_item_point;
			if (wcscmp(fieldName, L"skill_score_recommend_use_item_bonus") == 0) return skill_score_recommend_use_item_bonus;
			if (wcscmp(fieldName, L"skill_score_boss_npc") == 0) return skill_score_boss_npc;
			if (wcscmp(fieldName, L"skill_score_boss_npc_bonus") == 0) return skill_score_boss_npc_bonus;
			if (wcscmp(fieldName, L"attraction_quest") == 0) return attraction_quest;
			if (wcscmp(fieldName, L"attraction_quest_1") == 0) return attraction_quest[0];
			if (wcscmp(fieldName, L"attraction_quest_2") == 0) return attraction_quest[1];
			if (wcscmp(fieldName, L"attraction_quest_3") == 0) return attraction_quest[2];
			if (wcscmp(fieldName, L"attraction_quest_4") == 0) return attraction_quest[3];
			if (wcscmp(fieldName, L"attraction_quest_5") == 0) return attraction_quest[4];
			if (wcscmp(fieldName, L"attraction_quest_6") == 0) return attraction_quest[5];
			if (wcscmp(fieldName, L"attraction_quest_7") == 0) return attraction_quest[6];
			if (wcscmp(fieldName, L"attraction_quest_8") == 0) return attraction_quest[7];
			if (wcscmp(fieldName, L"attraction_quest_9") == 0) return attraction_quest[8];
			if (wcscmp(fieldName, L"attraction_quest_10") == 0) return attraction_quest[9];
			if (wcscmp(fieldName, L"ui_filter_attraction_quest_only") == 0) return ui_filter_attraction_quest_only;
			if (wcscmp(fieldName, L"respawn_confirm_text") == 0) return respawn_confirm_text;
			if (wcscmp(fieldName, L"escape_cave_confirm_text") == 0) return escape_cave_confirm_text;
			if (wcscmp(fieldName, L"ui_text_grade") == 0) return ui_text_grade;
			if (wcscmp(fieldName, L"dungeon_name2") == 0) return dungeon_name2;
			if (wcscmp(fieldName, L"dungeon_desc") == 0) return dungeon_desc;
			if (wcscmp(fieldName, L"faction_battle_field") == 0) return faction_battle_field;
			if (wcscmp(fieldName, L"arena_minimap") == 0) return arena_minimap;
			if (wcscmp(fieldName, L"recommend_attack_power_easy") == 0) return recommend_attack_power_easy;
			if (wcscmp(fieldName, L"recommend_attack_power_normal") == 0) return recommend_attack_power_normal;
			if (wcscmp(fieldName, L"recommend_attack_power_hard") == 0) return recommend_attack_power_hard;
			if (wcscmp(fieldName, L"standard_gear_weapon_easy") == 0) return standard_gear_weapon_easy;
			if (wcscmp(fieldName, L"standard_gear_weapon_normal") == 0) return standard_gear_weapon_normal;
			if (wcscmp(fieldName, L"standard_gear_weapon_hard") == 0) return standard_gear_weapon_hard;
			if (wcscmp(fieldName, L"use_difficulty_normal") == 0) return use_difficulty_normal;
			if (wcscmp(fieldName, L"use_difficulty_hard") == 0) return use_difficulty_hard;
			if (wcscmp(fieldName, L"reward_summary") == 0) return reward_summary;
			if (wcscmp(fieldName, L"recommand_level_min") == 0) return recommand_level_min;
			if (wcscmp(fieldName, L"recommand_level_max") == 0) return recommand_level_max;
			if (wcscmp(fieldName, L"recommand_mastery_level_min") == 0) return recommand_mastery_level_min;
			if (wcscmp(fieldName, L"recommand_mastery_level_max") == 0) return recommand_mastery_level_max;
			if (wcscmp(fieldName, L"display_quests") == 0) return display_quests;
			if (wcscmp(fieldName, L"display_quests_1") == 0) return display_quests[0];
			if (wcscmp(fieldName, L"display_quests_2") == 0) return display_quests[1];
			if (wcscmp(fieldName, L"display_quests_3") == 0) return display_quests[2];
			if (wcscmp(fieldName, L"display_quests_4") == 0) return display_quests[3];
			if (wcscmp(fieldName, L"display_quests_5") == 0) return display_quests[4];
			if (wcscmp(fieldName, L"display_quests_6") == 0) return display_quests[5];
			if (wcscmp(fieldName, L"display_quests_7") == 0) return display_quests[6];
			if (wcscmp(fieldName, L"display_quests_8") == 0) return display_quests[7];
			if (wcscmp(fieldName, L"display_quests_9") == 0) return display_quests[8];
			if (wcscmp(fieldName, L"display_quests_10") == 0) return display_quests[9];
			if (wcscmp(fieldName, L"display_quests_11") == 0) return display_quests[10];
			if (wcscmp(fieldName, L"display_quests_12") == 0) return display_quests[11];
			if (wcscmp(fieldName, L"tactic_normal") == 0) return tactic_normal;
			if (wcscmp(fieldName, L"tactic_hard") == 0) return tactic_hard;
			if (wcscmp(fieldName, L"tactic_easy") == 0) return tactic_easy;
			if (wcscmp(fieldName, L"recommend_alias_normal") == 0) return recommend_alias_normal;
			if (wcscmp(fieldName, L"recommend_alias_hard") == 0) return recommend_alias_hard;
			if (wcscmp(fieldName, L"recommend_alias_easy") == 0) return recommend_alias_easy;
			if (wcscmp(fieldName, L"boss_ui_extend_distance") == 0) return boss_ui_extend_distance;
			if (wcscmp(fieldName, L"boss_npc_alias") == 0) return boss_npc_alias;
			if (wcscmp(fieldName, L"boss_npc_alias_1") == 0) return boss_npc_alias[0];
			if (wcscmp(fieldName, L"boss_npc_alias_2") == 0) return boss_npc_alias[1];
			if (wcscmp(fieldName, L"boss_npc_alias_3") == 0) return boss_npc_alias[2];
			if (wcscmp(fieldName, L"boss_npc_alias_4") == 0) return boss_npc_alias[3];
			if (wcscmp(fieldName, L"boss_npc_alias_5") == 0) return boss_npc_alias[4];
			if (wcscmp(fieldName, L"boss_npc_alias_6") == 0) return boss_npc_alias[5];
			if (wcscmp(fieldName, L"boss_npc_alias_7") == 0) return boss_npc_alias[6];
			if (wcscmp(fieldName, L"boss_npc_alias_8") == 0) return boss_npc_alias[7];
			if (wcscmp(fieldName, L"boss_npc_section") == 0) return boss_npc_section;
			if (wcscmp(fieldName, L"boss_npc_section_1") == 0) return boss_npc_section[0];
			if (wcscmp(fieldName, L"boss_npc_section_2") == 0) return boss_npc_section[1];
			if (wcscmp(fieldName, L"boss_npc_section_3") == 0) return boss_npc_section[2];
			if (wcscmp(fieldName, L"boss_npc_section_4") == 0) return boss_npc_section[3];
			if (wcscmp(fieldName, L"boss_npc_section_5") == 0) return boss_npc_section[4];
			if (wcscmp(fieldName, L"boss_npc_section_6") == 0) return boss_npc_section[5];
			if (wcscmp(fieldName, L"boss_npc_section_7") == 0) return boss_npc_section[6];
			if (wcscmp(fieldName, L"boss_npc_section_8") == 0) return boss_npc_section[7];

			return std::any();
		}
		std::wstring GetFieldAsString(const wchar_t* fieldName) {
			if (wcscmp(fieldName, L"alias") == 0) return Data::AnyFieldToStringConverter::ToString(&alias);
			if (wcscmp(fieldName, L"dungeon_type") == 0) return Data::AnyFieldToStringConverter::ToString(&dungeon_type);
			if (wcscmp(fieldName, L"group") == 0) return Data::AnyFieldToStringConverter::ToString(&group);
			if (wcscmp(fieldName, L"zone_neutral_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone_neutral[0]));
			if (wcscmp(fieldName, L"zone_neutral_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone_neutral[1]));
			if (wcscmp(fieldName, L"zone_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone[0]));
			if (wcscmp(fieldName, L"zone_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone[1]));
			if (wcscmp(fieldName, L"zone_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone[2]));
			if (wcscmp(fieldName, L"zone_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone[3]));
			if (wcscmp(fieldName, L"zone_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone[4]));
			if (wcscmp(fieldName, L"zone_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone[5]));
			if (wcscmp(fieldName, L"zone_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone[6]));
			if (wcscmp(fieldName, L"zone_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone[7]));
			if (wcscmp(fieldName, L"zone_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone[8]));
			if (wcscmp(fieldName, L"zone_mission_step_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone_mission_step[0]));
			if (wcscmp(fieldName, L"zone_mission_step_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone_mission_step[1]));
			if (wcscmp(fieldName, L"zone_mission_step_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone_mission_step[2]));
			if (wcscmp(fieldName, L"zone_mission_step_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone_mission_step[3]));
			if (wcscmp(fieldName, L"zone_mission_step_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone_mission_step[4]));
			if (wcscmp(fieldName, L"zone_mission_step_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone_mission_step[5]));
			if (wcscmp(fieldName, L"zone_mission_step_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone_mission_step[6]));
			if (wcscmp(fieldName, L"zone_mission_step_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone_mission_step[7]));
			if (wcscmp(fieldName, L"zone_mission_step_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone_mission_step[8]));
			if (wcscmp(fieldName, L"feedback") == 0) return Data::AnyFieldToStringConverter::ToString(&feedback);
			if (wcscmp(fieldName, L"arena_entrance_zone") == 0) return Data::AnyFieldToStringConverter::ToString(&arena_entrance_zone);
			if (wcscmp(fieldName, L"required_level") == 0) return Data::AnyFieldToStringConverter::ToString(&required_level);
			if (wcscmp(fieldName, L"required_mastery_level") == 0) return Data::AnyFieldToStringConverter::ToString(&required_mastery_level);
			if (wcscmp(fieldName, L"required_preceding_quest_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(required_preceding_quest[0]));
			if (wcscmp(fieldName, L"required_preceding_quest_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(required_preceding_quest[1]));
			if (wcscmp(fieldName, L"required_preceding_quest_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(required_preceding_quest[2]));
			if (wcscmp(fieldName, L"required_preceding_quest_check") == 0) return Data::AnyFieldToStringConverter::ToString(&required_preceding_quest_check);
			if (wcscmp(fieldName, L"enable_heart_count") == 0) return Data::AnyFieldToStringConverter::ToString(&enable_heart_count);
			if (wcscmp(fieldName, L"max_instant_heart_count_difficulty_type_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(max_instant_heart_count_difficulty_type[0]));
			if (wcscmp(fieldName, L"max_instant_heart_count_difficulty_type_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(max_instant_heart_count_difficulty_type[1]));
			if (wcscmp(fieldName, L"max_instant_heart_count_difficulty_type_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(max_instant_heart_count_difficulty_type[2]));
			if (wcscmp(fieldName, L"gs_item_blade_master") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_blade_master);
			if (wcscmp(fieldName, L"gs_item_blade_master_hard") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_blade_master_hard);
			if (wcscmp(fieldName, L"gs_item_blade_master_easy") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_blade_master_easy);
			if (wcscmp(fieldName, L"gs_item_kung_fu_fighter") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_kung_fu_fighter);
			if (wcscmp(fieldName, L"gs_item_kung_fu_fighter_hard") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_kung_fu_fighter_hard);
			if (wcscmp(fieldName, L"gs_item_kung_fu_fighter_easy") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_kung_fu_fighter_easy);
			if (wcscmp(fieldName, L"gs_item_force_master") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_force_master);
			if (wcscmp(fieldName, L"gs_item_force_master_hard") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_force_master_hard);
			if (wcscmp(fieldName, L"gs_item_force_master_easy") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_force_master_easy);
			if (wcscmp(fieldName, L"gs_item_destroyer") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_destroyer);
			if (wcscmp(fieldName, L"gs_item_destroyer_hard") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_destroyer_hard);
			if (wcscmp(fieldName, L"gs_item_destroyer_easy") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_destroyer_easy);
			if (wcscmp(fieldName, L"gs_item_summoner") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_summoner);
			if (wcscmp(fieldName, L"gs_item_summoner_hard") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_summoner_hard);
			if (wcscmp(fieldName, L"gs_item_summoner_easy") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_summoner_easy);
			if (wcscmp(fieldName, L"gs_item_assassin") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_assassin);
			if (wcscmp(fieldName, L"gs_item_assassin_hard") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_assassin_hard);
			if (wcscmp(fieldName, L"gs_item_assassin_easy") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_assassin_easy);
			if (wcscmp(fieldName, L"gs_item_sword_master") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_sword_master);
			if (wcscmp(fieldName, L"gs_item_sword_master_hard") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_sword_master_hard);
			if (wcscmp(fieldName, L"gs_item_sword_master_easy") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_sword_master_easy);
			if (wcscmp(fieldName, L"gs_item_warlock") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_warlock);
			if (wcscmp(fieldName, L"gs_item_warlock_hard") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_warlock_hard);
			if (wcscmp(fieldName, L"gs_item_warlock_easy") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_warlock_easy);
			if (wcscmp(fieldName, L"gs_item_soul_fighter") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_soul_fighter);
			if (wcscmp(fieldName, L"gs_item_soul_fighter_hard") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_soul_fighter_hard);
			if (wcscmp(fieldName, L"gs_item_soul_fighter_easy") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_soul_fighter_easy);
			if (wcscmp(fieldName, L"gs_item_shooter") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_shooter);
			if (wcscmp(fieldName, L"gs_item_shooter_hard") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_shooter_hard);
			if (wcscmp(fieldName, L"gs_item_shooter_easy") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_shooter_easy);
			if (wcscmp(fieldName, L"gs_item_warrior") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_warrior);
			if (wcscmp(fieldName, L"gs_item_warrior_hard") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_warrior_hard);
			if (wcscmp(fieldName, L"gs_item_warrior_easy") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_warrior_easy);
			if (wcscmp(fieldName, L"gs_item_archer") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_archer);
			if (wcscmp(fieldName, L"gs_item_archer_hard") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_archer_hard);
			if (wcscmp(fieldName, L"gs_item_archer_easy") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_archer_easy);
			if (wcscmp(fieldName, L"gs_item_spear_master") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_spear_master);
			if (wcscmp(fieldName, L"gs_item_spear_master_hard") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_spear_master_hard);
			if (wcscmp(fieldName, L"gs_item_spear_master_easy") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_spear_master_easy);
			if (wcscmp(fieldName, L"gs_item_thunderer") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_thunderer);
			if (wcscmp(fieldName, L"gs_item_thunderer_hard") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_thunderer_hard);
			if (wcscmp(fieldName, L"gs_item_thunderer_easy") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_thunderer_easy);
			if (wcscmp(fieldName, L"gs_item_dual_blader") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_dual_blader);
			if (wcscmp(fieldName, L"gs_item_dual_blader_hard") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_dual_blader_hard);
			if (wcscmp(fieldName, L"gs_item_dual_blader_easy") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_dual_blader_easy);
			if (wcscmp(fieldName, L"gs_item_bard") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_bard);
			if (wcscmp(fieldName, L"gs_item_bard_hard") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_bard_hard);
			if (wcscmp(fieldName, L"gs_item_bard_easy") == 0) return Data::AnyFieldToStringConverter::ToString(&gs_item_bard_easy);
			if (wcscmp(fieldName, L"apply_contents_ban_id") == 0) return Data::AnyFieldToStringConverter::ToString(&apply_contents_ban_id);
			if (wcscmp(fieldName, L"pc_max") == 0) return Data::AnyFieldToStringConverter::ToString(&pc_max);
			if (wcscmp(fieldName, L"ignore_party_difficulty_type") == 0) return Data::AnyFieldToStringConverter::ToString(&ignore_party_difficulty_type);
			if (wcscmp(fieldName, L"npc_for_step_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(npc_for_step[0]));
			if (wcscmp(fieldName, L"npc_for_step_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(npc_for_step[1]));
			if (wcscmp(fieldName, L"npc_for_step_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(npc_for_step[2]));
			if (wcscmp(fieldName, L"npc_for_step_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(npc_for_step[3]));
			if (wcscmp(fieldName, L"npc_for_step_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(npc_for_step[4]));
			if (wcscmp(fieldName, L"npc_for_step_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(npc_for_step[5]));
			if (wcscmp(fieldName, L"npc_for_step_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(npc_for_step[6]));
			if (wcscmp(fieldName, L"npc_for_step_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(npc_for_step[7]));
			if (wcscmp(fieldName, L"npc_for_step_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(npc_for_step[8]));
			if (wcscmp(fieldName, L"pc_spawn_for_step_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(pc_spawn_for_step[0]));
			if (wcscmp(fieldName, L"pc_spawn_for_step_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(pc_spawn_for_step[1]));
			if (wcscmp(fieldName, L"pc_spawn_for_step_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(pc_spawn_for_step[2]));
			if (wcscmp(fieldName, L"pc_spawn_for_step_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(pc_spawn_for_step[3]));
			if (wcscmp(fieldName, L"pc_spawn_for_step_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(pc_spawn_for_step[4]));
			if (wcscmp(fieldName, L"pc_spawn_for_step_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(pc_spawn_for_step[5]));
			if (wcscmp(fieldName, L"pc_spawn_for_step_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(pc_spawn_for_step[6]));
			if (wcscmp(fieldName, L"pc_spawn_for_step_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(pc_spawn_for_step[7]));
			if (wcscmp(fieldName, L"pc_spawn_for_step_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(pc_spawn_for_step[8]));
			if (wcscmp(fieldName, L"money_for_step_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(money_for_step[0]));
			if (wcscmp(fieldName, L"money_for_step_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(money_for_step[1]));
			if (wcscmp(fieldName, L"money_for_step_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(money_for_step[2]));
			if (wcscmp(fieldName, L"money_for_step_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(money_for_step[3]));
			if (wcscmp(fieldName, L"money_for_step_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(money_for_step[4]));
			if (wcscmp(fieldName, L"money_for_step_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(money_for_step[5]));
			if (wcscmp(fieldName, L"money_for_step_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(money_for_step[6]));
			if (wcscmp(fieldName, L"money_for_step_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(money_for_step[7]));
			if (wcscmp(fieldName, L"money_for_step_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(money_for_step[8]));
			if (wcscmp(fieldName, L"item_for_step_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_for_step[0]));
			if (wcscmp(fieldName, L"item_for_step_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_for_step[1]));
			if (wcscmp(fieldName, L"item_for_step_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_for_step[2]));
			if (wcscmp(fieldName, L"item_for_step_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_for_step[3]));
			if (wcscmp(fieldName, L"item_for_step_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_for_step[4]));
			if (wcscmp(fieldName, L"item_for_step_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_for_step[5]));
			if (wcscmp(fieldName, L"item_for_step_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_for_step[6]));
			if (wcscmp(fieldName, L"item_for_step_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_for_step[7]));
			if (wcscmp(fieldName, L"item_for_step_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_for_step[8]));
			if (wcscmp(fieldName, L"item_count_for_step_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_count_for_step[0]));
			if (wcscmp(fieldName, L"item_count_for_step_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_count_for_step[1]));
			if (wcscmp(fieldName, L"item_count_for_step_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_count_for_step[2]));
			if (wcscmp(fieldName, L"item_count_for_step_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_count_for_step[3]));
			if (wcscmp(fieldName, L"item_count_for_step_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_count_for_step[4]));
			if (wcscmp(fieldName, L"item_count_for_step_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_count_for_step[5]));
			if (wcscmp(fieldName, L"item_count_for_step_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_count_for_step[6]));
			if (wcscmp(fieldName, L"item_count_for_step_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_count_for_step[7]));
			if (wcscmp(fieldName, L"item_count_for_step_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_count_for_step[8]));
			if (wcscmp(fieldName, L"quest_for_step_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(quest_for_step[0]));
			if (wcscmp(fieldName, L"quest_for_step_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(quest_for_step[1]));
			if (wcscmp(fieldName, L"quest_for_step_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(quest_for_step[2]));
			if (wcscmp(fieldName, L"quest_for_step_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(quest_for_step[3]));
			if (wcscmp(fieldName, L"quest_for_step_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(quest_for_step[4]));
			if (wcscmp(fieldName, L"quest_for_step_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(quest_for_step[5]));
			if (wcscmp(fieldName, L"quest_for_step_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(quest_for_step[6]));
			if (wcscmp(fieldName, L"quest_for_step_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(quest_for_step[7]));
			if (wcscmp(fieldName, L"quest_for_step_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(quest_for_step[8]));
			if (wcscmp(fieldName, L"quest") == 0) return Data::AnyFieldToStringConverter::ToString(&quest);
			if (wcscmp(fieldName, L"dungeon_quest_difficulty_type_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(dungeon_quest_difficulty_type[0]));
			if (wcscmp(fieldName, L"dungeon_quest_difficulty_type_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(dungeon_quest_difficulty_type[1]));
			if (wcscmp(fieldName, L"dungeon_quest_difficulty_type_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(dungeon_quest_difficulty_type[2]));
			if (wcscmp(fieldName, L"effect_pc_difficulty_type_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(effect_pc_difficulty_type[0]));
			if (wcscmp(fieldName, L"effect_pc_difficulty_type_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(effect_pc_difficulty_type[1]));
			if (wcscmp(fieldName, L"effect_pc_difficulty_type_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(effect_pc_difficulty_type[2]));
			if (wcscmp(fieldName, L"effect_npc_difficulty_type_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(effect_npc_difficulty_type[0]));
			if (wcscmp(fieldName, L"effect_npc_difficulty_type_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(effect_npc_difficulty_type[1]));
			if (wcscmp(fieldName, L"effect_npc_difficulty_type_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(effect_npc_difficulty_type[2]));
			if (wcscmp(fieldName, L"enable_skill_score") == 0) return Data::AnyFieldToStringConverter::ToString(&enable_skill_score);
			if (wcscmp(fieldName, L"skill_score_recommend_gear_score") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_score_recommend_gear_score);
			if (wcscmp(fieldName, L"skill_score_recommend_clear_time_step_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill_score_recommend_clear_time_step[0]));
			if (wcscmp(fieldName, L"skill_score_recommend_clear_time_step_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill_score_recommend_clear_time_step[1]));
			if (wcscmp(fieldName, L"skill_score_recommend_clear_time_step_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill_score_recommend_clear_time_step[2]));
			if (wcscmp(fieldName, L"skill_score_recommend_clear_time_step_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill_score_recommend_clear_time_step[3]));
			if (wcscmp(fieldName, L"skill_score_recommend_clear_time_step_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill_score_recommend_clear_time_step[4]));
			if (wcscmp(fieldName, L"skill_score_recommend_clear_time_bonus_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill_score_recommend_clear_time_bonus[0]));
			if (wcscmp(fieldName, L"skill_score_recommend_clear_time_bonus_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill_score_recommend_clear_time_bonus[1]));
			if (wcscmp(fieldName, L"skill_score_recommend_clear_time_bonus_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill_score_recommend_clear_time_bonus[2]));
			if (wcscmp(fieldName, L"skill_score_recommend_clear_time_bonus_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill_score_recommend_clear_time_bonus[3]));
			if (wcscmp(fieldName, L"skill_score_recommend_clear_time_bonus_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill_score_recommend_clear_time_bonus[4]));
			if (wcscmp(fieldName, L"skill_score_recommand_party_member_count_bonus_difficulty_type_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill_score_recommand_party_member_count_bonus_difficulty_type[0]));
			if (wcscmp(fieldName, L"skill_score_recommand_party_member_count_bonus_difficulty_type_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill_score_recommand_party_member_count_bonus_difficulty_type[1]));
			if (wcscmp(fieldName, L"skill_score_recommand_party_member_count_bonus_difficulty_type_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill_score_recommand_party_member_count_bonus_difficulty_type[2]));
			if (wcscmp(fieldName, L"skill_score_recommend_hp_step_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill_score_recommend_hp_step[0]));
			if (wcscmp(fieldName, L"skill_score_recommend_hp_step_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill_score_recommend_hp_step[1]));
			if (wcscmp(fieldName, L"skill_score_recommend_hp_step_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill_score_recommend_hp_step[2]));
			if (wcscmp(fieldName, L"skill_score_recommend_hp_step_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill_score_recommend_hp_step[3]));
			if (wcscmp(fieldName, L"skill_score_recommend_hp_step_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill_score_recommend_hp_step[4]));
			if (wcscmp(fieldName, L"skill_score_recommend_hp_bonus_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill_score_recommend_hp_bonus[0]));
			if (wcscmp(fieldName, L"skill_score_recommend_hp_bonus_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill_score_recommend_hp_bonus[1]));
			if (wcscmp(fieldName, L"skill_score_recommend_hp_bonus_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill_score_recommend_hp_bonus[2]));
			if (wcscmp(fieldName, L"skill_score_recommend_hp_bonus_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill_score_recommend_hp_bonus[3]));
			if (wcscmp(fieldName, L"skill_score_recommend_hp_bonus_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill_score_recommend_hp_bonus[4]));
			if (wcscmp(fieldName, L"skill_score_recommend_use_heart_count") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_score_recommend_use_heart_count);
			if (wcscmp(fieldName, L"skill_score_recommend_use_heart_count_bonus") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_score_recommend_use_heart_count_bonus);
			if (wcscmp(fieldName, L"skill_score_recommend_use_item_point") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_score_recommend_use_item_point);
			if (wcscmp(fieldName, L"skill_score_recommend_use_item_bonus") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_score_recommend_use_item_bonus);
			if (wcscmp(fieldName, L"skill_score_boss_npc") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_score_boss_npc);
			if (wcscmp(fieldName, L"skill_score_boss_npc_bonus") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_score_boss_npc_bonus);
			if (wcscmp(fieldName, L"attraction_quest_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction_quest[0]));
			if (wcscmp(fieldName, L"attraction_quest_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction_quest[1]));
			if (wcscmp(fieldName, L"attraction_quest_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction_quest[2]));
			if (wcscmp(fieldName, L"attraction_quest_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction_quest[3]));
			if (wcscmp(fieldName, L"attraction_quest_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction_quest[4]));
			if (wcscmp(fieldName, L"attraction_quest_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction_quest[5]));
			if (wcscmp(fieldName, L"attraction_quest_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction_quest[6]));
			if (wcscmp(fieldName, L"attraction_quest_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction_quest[7]));
			if (wcscmp(fieldName, L"attraction_quest_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction_quest[8]));
			if (wcscmp(fieldName, L"attraction_quest_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction_quest[9]));
			if (wcscmp(fieldName, L"ui_filter_attraction_quest_only") == 0) return Data::AnyFieldToStringConverter::ToString(&ui_filter_attraction_quest_only);
			if (wcscmp(fieldName, L"respawn_confirm_text") == 0) return Data::AnyFieldToStringConverter::ToString(&respawn_confirm_text);
			if (wcscmp(fieldName, L"escape_cave_confirm_text") == 0) return Data::AnyFieldToStringConverter::ToString(&escape_cave_confirm_text);
			if (wcscmp(fieldName, L"ui_text_grade") == 0) return Data::AnyFieldToStringConverter::ToString(&ui_text_grade);
			if (wcscmp(fieldName, L"dungeon_name2") == 0) return Data::AnyFieldToStringConverter::ToString(&dungeon_name2);
			if (wcscmp(fieldName, L"dungeon_desc") == 0) return Data::AnyFieldToStringConverter::ToString(&dungeon_desc);
			if (wcscmp(fieldName, L"faction_battle_field") == 0) return Data::AnyFieldToStringConverter::ToString(&faction_battle_field);
			if (wcscmp(fieldName, L"arena_minimap") == 0) return Data::AnyFieldToStringConverter::ToString(&arena_minimap);
			if (wcscmp(fieldName, L"recommend_attack_power_easy") == 0) return Data::AnyFieldToStringConverter::ToString(&recommend_attack_power_easy);
			if (wcscmp(fieldName, L"recommend_attack_power_normal") == 0) return Data::AnyFieldToStringConverter::ToString(&recommend_attack_power_normal);
			if (wcscmp(fieldName, L"recommend_attack_power_hard") == 0) return Data::AnyFieldToStringConverter::ToString(&recommend_attack_power_hard);
			if (wcscmp(fieldName, L"standard_gear_weapon_easy") == 0) return Data::AnyFieldToStringConverter::ToString(&standard_gear_weapon_easy);
			if (wcscmp(fieldName, L"standard_gear_weapon_normal") == 0) return Data::AnyFieldToStringConverter::ToString(&standard_gear_weapon_normal);
			if (wcscmp(fieldName, L"standard_gear_weapon_hard") == 0) return Data::AnyFieldToStringConverter::ToString(&standard_gear_weapon_hard);
			if (wcscmp(fieldName, L"use_difficulty_normal") == 0) return Data::AnyFieldToStringConverter::ToString(&use_difficulty_normal);
			if (wcscmp(fieldName, L"use_difficulty_hard") == 0) return Data::AnyFieldToStringConverter::ToString(&use_difficulty_hard);
			if (wcscmp(fieldName, L"reward_summary") == 0) return Data::AnyFieldToStringConverter::ToString(&reward_summary);
			if (wcscmp(fieldName, L"recommand_level_min") == 0) return Data::AnyFieldToStringConverter::ToString(&recommand_level_min);
			if (wcscmp(fieldName, L"recommand_level_max") == 0) return Data::AnyFieldToStringConverter::ToString(&recommand_level_max);
			if (wcscmp(fieldName, L"recommand_mastery_level_min") == 0) return Data::AnyFieldToStringConverter::ToString(&recommand_mastery_level_min);
			if (wcscmp(fieldName, L"recommand_mastery_level_max") == 0) return Data::AnyFieldToStringConverter::ToString(&recommand_mastery_level_max);
			if (wcscmp(fieldName, L"display_quests_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[0]));
			if (wcscmp(fieldName, L"display_quests_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[1]));
			if (wcscmp(fieldName, L"display_quests_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[2]));
			if (wcscmp(fieldName, L"display_quests_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[3]));
			if (wcscmp(fieldName, L"display_quests_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[4]));
			if (wcscmp(fieldName, L"display_quests_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[5]));
			if (wcscmp(fieldName, L"display_quests_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[6]));
			if (wcscmp(fieldName, L"display_quests_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[7]));
			if (wcscmp(fieldName, L"display_quests_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[8]));
			if (wcscmp(fieldName, L"display_quests_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[9]));
			if (wcscmp(fieldName, L"display_quests_11") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[10]));
			if (wcscmp(fieldName, L"display_quests_12") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[11]));
			if (wcscmp(fieldName, L"tactic_normal") == 0) return Data::AnyFieldToStringConverter::ToString(&tactic_normal);
			if (wcscmp(fieldName, L"tactic_hard") == 0) return Data::AnyFieldToStringConverter::ToString(&tactic_hard);
			if (wcscmp(fieldName, L"tactic_easy") == 0) return Data::AnyFieldToStringConverter::ToString(&tactic_easy);
			if (wcscmp(fieldName, L"recommend_alias_normal") == 0) return Data::AnyFieldToStringConverter::ToString(&recommend_alias_normal);
			if (wcscmp(fieldName, L"recommend_alias_hard") == 0) return Data::AnyFieldToStringConverter::ToString(&recommend_alias_hard);
			if (wcscmp(fieldName, L"recommend_alias_easy") == 0) return Data::AnyFieldToStringConverter::ToString(&recommend_alias_easy);
			if (wcscmp(fieldName, L"boss_ui_extend_distance") == 0) return Data::AnyFieldToStringConverter::ToString(&boss_ui_extend_distance);
			if (wcscmp(fieldName, L"boss_npc_alias_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_alias[0]));
			if (wcscmp(fieldName, L"boss_npc_alias_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_alias[1]));
			if (wcscmp(fieldName, L"boss_npc_alias_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_alias[2]));
			if (wcscmp(fieldName, L"boss_npc_alias_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_alias[3]));
			if (wcscmp(fieldName, L"boss_npc_alias_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_alias[4]));
			if (wcscmp(fieldName, L"boss_npc_alias_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_alias[5]));
			if (wcscmp(fieldName, L"boss_npc_alias_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_alias[6]));
			if (wcscmp(fieldName, L"boss_npc_alias_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_alias[7]));
			if (wcscmp(fieldName, L"boss_npc_section_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_section[0]));
			if (wcscmp(fieldName, L"boss_npc_section_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_section[1]));
			if (wcscmp(fieldName, L"boss_npc_section_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_section[2]));
			if (wcscmp(fieldName, L"boss_npc_section_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_section[3]));
			if (wcscmp(fieldName, L"boss_npc_section_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_section[4]));
			if (wcscmp(fieldName, L"boss_npc_section_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_section[5]));
			if (wcscmp(fieldName, L"boss_npc_section_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_section[6]));
			if (wcscmp(fieldName, L"boss_npc_section_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_section[7]));

			return L"";
		}
		void AutoCorrectLookupOffsets(const char* lookupDataPtr) {
			if (reinterpret_cast<std::uintptr_t>(alias) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) alias = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(alias));
			else return;
			if (reinterpret_cast<std::uintptr_t>(arena_minimap) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) arena_minimap = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(arena_minimap));
		}
		union Key
		{
            struct {
                __int16 id;

            };
			unsigned __int64 key;
		};
		__declspec(align(8)) Key key;
		wchar_t* alias;
__int8 dungeon_type;
std::wstring dungeon_type_EnumValue() const {return Get_dungeon_type_EnumValue(dungeon_type);};
char Pad0[3];
Data::TableRef group;
int group_tableId(){return 16;};
Data::TableRef zone_neutral[2];
int zone_neutral_tableId(){return 443;};
Data::TableRef zone[9];
int zone_tableId(){return 443;};
__int8 zone_mission_step[9];
char Pad1[3];
Data::TableRef feedback;
int feedback_tableId(){return 133;};
Data::TableRef arena_entrance_zone;
int arena_entrance_zone_tableId(){return 443;};
__int8 required_level;
__int8 required_mastery_level;
char Pad2[2];
Data::TableRef required_preceding_quest[3];
int required_preceding_quest_tableId(){return 283;};
__int8 required_preceding_quest_check;
std::wstring required_preceding_quest_check_EnumValue() const {return Get_required_preceding_quest_check_EnumValue(required_preceding_quest_check);};
bool enable_heart_count;
__int8 max_instant_heart_count_difficulty_type[3];
char Pad3[3];
Data::TableRef gs_item_blade_master;
int gs_item_blade_master_tableId(){return 189;};
Data::TableRef gs_item_blade_master_hard;
int gs_item_blade_master_hard_tableId(){return 189;};
Data::TableRef gs_item_blade_master_easy;
int gs_item_blade_master_easy_tableId(){return 189;};
Data::TableRef gs_item_kung_fu_fighter;
int gs_item_kung_fu_fighter_tableId(){return 189;};
Data::TableRef gs_item_kung_fu_fighter_hard;
int gs_item_kung_fu_fighter_hard_tableId(){return 189;};
Data::TableRef gs_item_kung_fu_fighter_easy;
int gs_item_kung_fu_fighter_easy_tableId(){return 189;};
Data::TableRef gs_item_force_master;
int gs_item_force_master_tableId(){return 189;};
Data::TableRef gs_item_force_master_hard;
int gs_item_force_master_hard_tableId(){return 189;};
Data::TableRef gs_item_force_master_easy;
int gs_item_force_master_easy_tableId(){return 189;};
Data::TableRef gs_item_destroyer;
int gs_item_destroyer_tableId(){return 189;};
Data::TableRef gs_item_destroyer_hard;
int gs_item_destroyer_hard_tableId(){return 189;};
Data::TableRef gs_item_destroyer_easy;
int gs_item_destroyer_easy_tableId(){return 189;};
Data::TableRef gs_item_summoner;
int gs_item_summoner_tableId(){return 189;};
Data::TableRef gs_item_summoner_hard;
int gs_item_summoner_hard_tableId(){return 189;};
Data::TableRef gs_item_summoner_easy;
int gs_item_summoner_easy_tableId(){return 189;};
Data::TableRef gs_item_assassin;
int gs_item_assassin_tableId(){return 189;};
Data::TableRef gs_item_assassin_hard;
int gs_item_assassin_hard_tableId(){return 189;};
Data::TableRef gs_item_assassin_easy;
int gs_item_assassin_easy_tableId(){return 189;};
Data::TableRef gs_item_sword_master;
int gs_item_sword_master_tableId(){return 189;};
Data::TableRef gs_item_sword_master_hard;
int gs_item_sword_master_hard_tableId(){return 189;};
Data::TableRef gs_item_sword_master_easy;
int gs_item_sword_master_easy_tableId(){return 189;};
Data::TableRef gs_item_warlock;
int gs_item_warlock_tableId(){return 189;};
Data::TableRef gs_item_warlock_hard;
int gs_item_warlock_hard_tableId(){return 189;};
Data::TableRef gs_item_warlock_easy;
int gs_item_warlock_easy_tableId(){return 189;};
Data::TableRef gs_item_soul_fighter;
int gs_item_soul_fighter_tableId(){return 189;};
Data::TableRef gs_item_soul_fighter_hard;
int gs_item_soul_fighter_hard_tableId(){return 189;};
Data::TableRef gs_item_soul_fighter_easy;
int gs_item_soul_fighter_easy_tableId(){return 189;};
Data::TableRef gs_item_shooter;
int gs_item_shooter_tableId(){return 189;};
Data::TableRef gs_item_shooter_hard;
int gs_item_shooter_hard_tableId(){return 189;};
Data::TableRef gs_item_shooter_easy;
int gs_item_shooter_easy_tableId(){return 189;};
Data::TableRef gs_item_warrior;
int gs_item_warrior_tableId(){return 189;};
Data::TableRef gs_item_warrior_hard;
int gs_item_warrior_hard_tableId(){return 189;};
Data::TableRef gs_item_warrior_easy;
int gs_item_warrior_easy_tableId(){return 189;};
Data::TableRef gs_item_archer;
int gs_item_archer_tableId(){return 189;};
Data::TableRef gs_item_archer_hard;
int gs_item_archer_hard_tableId(){return 189;};
Data::TableRef gs_item_archer_easy;
int gs_item_archer_easy_tableId(){return 189;};
Data::TableRef gs_item_spear_master;
int gs_item_spear_master_tableId(){return 189;};
Data::TableRef gs_item_spear_master_hard;
int gs_item_spear_master_hard_tableId(){return 189;};
Data::TableRef gs_item_spear_master_easy;
int gs_item_spear_master_easy_tableId(){return 189;};
Data::TableRef gs_item_thunderer;
int gs_item_thunderer_tableId(){return 189;};
Data::TableRef gs_item_thunderer_hard;
int gs_item_thunderer_hard_tableId(){return 189;};
Data::TableRef gs_item_thunderer_easy;
int gs_item_thunderer_easy_tableId(){return 189;};
Data::TableRef gs_item_dual_blader;
int gs_item_dual_blader_tableId(){return 189;};
Data::TableRef gs_item_dual_blader_hard;
int gs_item_dual_blader_hard_tableId(){return 189;};
Data::TableRef gs_item_dual_blader_easy;
int gs_item_dual_blader_easy_tableId(){return 189;};
Data::TableRef gs_item_bard;
int gs_item_bard_tableId(){return 189;};
Data::TableRef gs_item_bard_hard;
int gs_item_bard_hard_tableId(){return 189;};
Data::TableRef gs_item_bard_easy;
int gs_item_bard_easy_tableId(){return 189;};
__int8 apply_contents_ban_id;
char Pad4[1];
__int16 pc_max;
bool ignore_party_difficulty_type;
char Pad5[3];
Data::TableRef npc_for_step[9];
int npc_for_step_tableId(){return 255;};
__int16 pc_spawn_for_step[9];
char Pad6[2];
__int32 money_for_step[9];
Data::TableRef item_for_step[9];
int item_for_step_tableId(){return 189;};
__int16 item_count_for_step[9];
char Pad7[2];
Data::TableRef quest_for_step[9];
int quest_for_step_tableId(){return 283;};
Data::TableRef quest;
int quest_tableId(){return 283;};
Data::TableRef dungeon_quest_difficulty_type[3];
int dungeon_quest_difficulty_type_tableId(){return 283;};
Data::TableRef effect_pc_difficulty_type[3];
int effect_pc_difficulty_type_tableId(){return 111;};
Data::TableRef effect_npc_difficulty_type[3];
int effect_npc_difficulty_type_tableId(){return 111;};
bool enable_skill_score;
char Pad8[3];
__int32 skill_score_recommend_gear_score;
__int32 skill_score_recommend_clear_time_step[5];
__int16 skill_score_recommend_clear_time_bonus[5];
__int16 skill_score_recommand_party_member_count_bonus_difficulty_type[3];
__int32 skill_score_recommend_hp_step[5];
__int16 skill_score_recommend_hp_bonus[5];
__int16 skill_score_recommend_use_heart_count;
__int16 skill_score_recommend_use_heart_count_bonus;
char Pad9[2];
__int32 skill_score_recommend_use_item_point;
__int16 skill_score_recommend_use_item_bonus;
char Pad10[2];
Data::TableRef skill_score_boss_npc;
int skill_score_boss_npc_tableId(){return 255;};
__int16 skill_score_boss_npc_bonus;
char Pad11[2];
Data::TableRef attraction_quest[10];
int attraction_quest_tableId(){return 283;};
bool ui_filter_attraction_quest_only;
char Pad12[3];
Data::TableRef respawn_confirm_text;
int respawn_confirm_text_tableId(){return 405;};
Data::TableRef escape_cave_confirm_text;
int escape_cave_confirm_text_tableId(){return 405;};
__int8 ui_text_grade;
char Pad13[3];
Data::TableRef dungeon_name2;
int dungeon_name2_tableId(){return 405;};
Data::TableRef dungeon_desc;
int dungeon_desc_tableId(){return 405;};
bool faction_battle_field;
char Pad14[3];
wchar_t* arena_minimap;
__int16 recommend_attack_power_easy;
__int16 recommend_attack_power_normal;
__int16 recommend_attack_power_hard;
char Pad15[2];
Data::TableRef standard_gear_weapon_easy;
int standard_gear_weapon_easy_tableId(){return 189;};
Data::TableRef standard_gear_weapon_normal;
int standard_gear_weapon_normal_tableId(){return 189;};
Data::TableRef standard_gear_weapon_hard;
int standard_gear_weapon_hard_tableId(){return 189;};
bool use_difficulty_normal;
bool use_difficulty_hard;
char Pad16[2];
Data::TableRef reward_summary;
int reward_summary_tableId(){return 18;};
__int8 recommand_level_min;
__int8 recommand_level_max;
__int8 recommand_mastery_level_min;
__int8 recommand_mastery_level_max;
Data::TableRef display_quests[12];
int display_quests_tableId(){return 283;};
Data::TableRef tactic_normal;
int tactic_normal_tableId(){return 405;};
Data::TableRef tactic_hard;
int tactic_hard_tableId(){return 405;};
Data::TableRef tactic_easy;
int tactic_easy_tableId(){return 405;};
Data::TableRef recommend_alias_normal;
int recommend_alias_normal_tableId(){return 71;};
Data::TableRef recommend_alias_hard;
int recommend_alias_hard_tableId(){return 71;};
Data::TableRef recommend_alias_easy;
int recommend_alias_easy_tableId(){return 71;};
bool boss_ui_extend_distance;
char Pad17[3];
Data::TableRef boss_npc_alias[8];
int boss_npc_alias_tableId(){return 255;};
Data::TableRef boss_npc_section[8];
int boss_npc_section_tableId(){return 405;};

		static TableVersion Version() { return TableVersion(9, 11); }
		static __int16 TableId() { return 110; }
		static __int32 SubType() { return 0; }
	};
#pragma pack(pop)
#pragma pack(push, 1)
	struct __declspec(align(4)) dungeon_RecordPtr // : DrRecordPtr
	{
		dungeon_Record* _record;
		int _cacheChunkIndex;
		//__unaligned __declspec(align(1)) const Data::dungeon_Record* _debug;
		bool _makeCopy;
	};
#pragma pack(pop)
}