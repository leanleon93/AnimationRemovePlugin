/*
 Generated Code! Do not manually edit this code. Modify the generator instead.
*/
#pragma once
#include "../DrEl.h"
#include "../AnyToStringConverter.h"

namespace Data {

#pragma pack(push, 1)
	struct pc_Record : DrEl
	{
	private:
		static std::wstring Get_race_EnumValue(__int8 value);
		static std::wstring Get_sex_EnumValue(__int8 value);
		static std::wstring Get_job_EnumValue(__int8 value);
		static std::wstring Get_contents_type_EnumValue(__int8 value);
	public:
		std::any GetField(const wchar_t* fieldName) const {
			if (wcscmp(fieldName, L"id") == 0) return id;
			if (wcscmp(fieldName, L"sex") == 0) return sex;
			if (wcscmp(fieldName, L"radius") == 0) return radius;
			if (wcscmp(fieldName, L"skill") == 0) return skill;
			if (wcscmp(fieldName, L"skill_1") == 0) return skill[0];
			if (wcscmp(fieldName, L"skill_2") == 0) return skill[1];
			if (wcscmp(fieldName, L"skill_3") == 0) return skill[2];
			if (wcscmp(fieldName, L"skill_4") == 0) return skill[3];
			if (wcscmp(fieldName, L"skill_5") == 0) return skill[4];
			if (wcscmp(fieldName, L"skill_6") == 0) return skill[5];
			if (wcscmp(fieldName, L"skill_7") == 0) return skill[6];
			if (wcscmp(fieldName, L"skill_8") == 0) return skill[7];
			if (wcscmp(fieldName, L"skill_9") == 0) return skill[8];
			if (wcscmp(fieldName, L"skill_10") == 0) return skill[9];
			if (wcscmp(fieldName, L"skill_11") == 0) return skill[10];
			if (wcscmp(fieldName, L"skill_12") == 0) return skill[11];
			if (wcscmp(fieldName, L"skill_13") == 0) return skill[12];
			if (wcscmp(fieldName, L"skill_14") == 0) return skill[13];
			if (wcscmp(fieldName, L"skill_15") == 0) return skill[14];
			if (wcscmp(fieldName, L"skill_16") == 0) return skill[15];
			if (wcscmp(fieldName, L"skill_17") == 0) return skill[16];
			if (wcscmp(fieldName, L"skill_18") == 0) return skill[17];
			if (wcscmp(fieldName, L"skill_19") == 0) return skill[18];
			if (wcscmp(fieldName, L"skill_20") == 0) return skill[19];
			if (wcscmp(fieldName, L"skill_21") == 0) return skill[20];
			if (wcscmp(fieldName, L"skill_22") == 0) return skill[21];
			if (wcscmp(fieldName, L"skill_23") == 0) return skill[22];
			if (wcscmp(fieldName, L"skill_24") == 0) return skill[23];
			if (wcscmp(fieldName, L"skill_25") == 0) return skill[24];
			if (wcscmp(fieldName, L"skill_26") == 0) return skill[25];
			if (wcscmp(fieldName, L"skill_27") == 0) return skill[26];
			if (wcscmp(fieldName, L"skill_28") == 0) return skill[27];
			if (wcscmp(fieldName, L"skill_29") == 0) return skill[28];
			if (wcscmp(fieldName, L"skill_30") == 0) return skill[29];
			if (wcscmp(fieldName, L"skill_31") == 0) return skill[30];
			if (wcscmp(fieldName, L"skill_32") == 0) return skill[31];
			if (wcscmp(fieldName, L"skill_33") == 0) return skill[32];
			if (wcscmp(fieldName, L"skill_34") == 0) return skill[33];
			if (wcscmp(fieldName, L"skill_35") == 0) return skill[34];
			if (wcscmp(fieldName, L"skill_36") == 0) return skill[35];
			if (wcscmp(fieldName, L"skill_37") == 0) return skill[36];
			if (wcscmp(fieldName, L"skill_38") == 0) return skill[37];
			if (wcscmp(fieldName, L"skill_39") == 0) return skill[38];
			if (wcscmp(fieldName, L"skill_40") == 0) return skill[39];
			if (wcscmp(fieldName, L"skill3") == 0) return skill3;
			if (wcscmp(fieldName, L"skill3_1") == 0) return skill3[0];
			if (wcscmp(fieldName, L"skill3_2") == 0) return skill3[1];
			if (wcscmp(fieldName, L"skill3_3") == 0) return skill3[2];
			if (wcscmp(fieldName, L"skill3_4") == 0) return skill3[3];
			if (wcscmp(fieldName, L"skill3_5") == 0) return skill3[4];
			if (wcscmp(fieldName, L"skill3_6") == 0) return skill3[5];
			if (wcscmp(fieldName, L"skill3_7") == 0) return skill3[6];
			if (wcscmp(fieldName, L"skill3_8") == 0) return skill3[7];
			if (wcscmp(fieldName, L"skill3_9") == 0) return skill3[8];
			if (wcscmp(fieldName, L"skill3_10") == 0) return skill3[9];
			if (wcscmp(fieldName, L"skill3_11") == 0) return skill3[10];
			if (wcscmp(fieldName, L"skill3_12") == 0) return skill3[11];
			if (wcscmp(fieldName, L"skill3_13") == 0) return skill3[12];
			if (wcscmp(fieldName, L"skill3_14") == 0) return skill3[13];
			if (wcscmp(fieldName, L"skill3_15") == 0) return skill3[14];
			if (wcscmp(fieldName, L"skill3_16") == 0) return skill3[15];
			if (wcscmp(fieldName, L"skill3_17") == 0) return skill3[16];
			if (wcscmp(fieldName, L"skill3_18") == 0) return skill3[17];
			if (wcscmp(fieldName, L"skill3_19") == 0) return skill3[18];
			if (wcscmp(fieldName, L"skill3_20") == 0) return skill3[19];
			if (wcscmp(fieldName, L"skill3_21") == 0) return skill3[20];
			if (wcscmp(fieldName, L"skill3_22") == 0) return skill3[21];
			if (wcscmp(fieldName, L"skill3_23") == 0) return skill3[22];
			if (wcscmp(fieldName, L"skill3_24") == 0) return skill3[23];
			if (wcscmp(fieldName, L"skill3_25") == 0) return skill3[24];
			if (wcscmp(fieldName, L"skill3_26") == 0) return skill3[25];
			if (wcscmp(fieldName, L"skill3_27") == 0) return skill3[26];
			if (wcscmp(fieldName, L"skill3_28") == 0) return skill3[27];
			if (wcscmp(fieldName, L"skill3_29") == 0) return skill3[28];
			if (wcscmp(fieldName, L"skill3_30") == 0) return skill3[29];
			if (wcscmp(fieldName, L"skill3_31") == 0) return skill3[30];
			if (wcscmp(fieldName, L"skill3_32") == 0) return skill3[31];
			if (wcscmp(fieldName, L"skill3_33") == 0) return skill3[32];
			if (wcscmp(fieldName, L"skill3_34") == 0) return skill3[33];
			if (wcscmp(fieldName, L"skill3_35") == 0) return skill3[34];
			if (wcscmp(fieldName, L"skill3_36") == 0) return skill3[35];
			if (wcscmp(fieldName, L"skill3_37") == 0) return skill3[36];
			if (wcscmp(fieldName, L"skill3_38") == 0) return skill3[37];
			if (wcscmp(fieldName, L"skill3_39") == 0) return skill3[38];
			if (wcscmp(fieldName, L"skill3_40") == 0) return skill3[39];
			if (wcscmp(fieldName, L"pc_skill3") == 0) return pc_skill3;
			if (wcscmp(fieldName, L"pc_skill3_1") == 0) return pc_skill3[0];
			if (wcscmp(fieldName, L"pc_skill3_2") == 0) return pc_skill3[1];
			if (wcscmp(fieldName, L"pc_job_style_skill3") == 0) return pc_job_style_skill3;
			if (wcscmp(fieldName, L"pc_job_style_skill3_1") == 0) return pc_job_style_skill3[0];
			if (wcscmp(fieldName, L"pc_job_style_skill3_2") == 0) return pc_job_style_skill3[1];
			if (wcscmp(fieldName, L"pc_job_style_skill3_3") == 0) return pc_job_style_skill3[2];
			if (wcscmp(fieldName, L"pc_job_style_skill3_4") == 0) return pc_job_style_skill3[3];
			if (wcscmp(fieldName, L"pc_job_style_skill3_5") == 0) return pc_job_style_skill3[4];
			if (wcscmp(fieldName, L"pc_job_style_skill3_6") == 0) return pc_job_style_skill3[5];
			if (wcscmp(fieldName, L"pc_job_style_skill3_7") == 0) return pc_job_style_skill3[6];
			if (wcscmp(fieldName, L"pc_job_style_skill3_8") == 0) return pc_job_style_skill3[7];
			if (wcscmp(fieldName, L"pc_job_style_skill3_9") == 0) return pc_job_style_skill3[8];
			if (wcscmp(fieldName, L"pc_job_style_skill3_10") == 0) return pc_job_style_skill3[9];
			if (wcscmp(fieldName, L"skill_build_up_level_max") == 0) return skill_build_up_level_max;
			if (wcscmp(fieldName, L"skill_build_up_point") == 0) return skill_build_up_point;
			if (wcscmp(fieldName, L"max_hp") == 0) return max_hp;
			if (wcscmp(fieldName, L"speed") == 0) return speed;
			if (wcscmp(fieldName, L"modify_cast_speed_percent") == 0) return modify_cast_speed_percent;
			if (wcscmp(fieldName, L"hp_regen") == 0) return hp_regen;
			if (wcscmp(fieldName, L"hp_regen_combat") == 0) return hp_regen_combat;
			if (wcscmp(fieldName, L"attack_hit_base_percent") == 0) return attack_hit_base_percent;
			if (wcscmp(fieldName, L"attack_hit_value") == 0) return attack_hit_value;
			if (wcscmp(fieldName, L"attack_pierce_value") == 0) return attack_pierce_value;
			if (wcscmp(fieldName, L"attack_concentrate_value") == 0) return attack_concentrate_value;
			if (wcscmp(fieldName, L"attack_critical_base_percent") == 0) return attack_critical_base_percent;
			if (wcscmp(fieldName, L"attack_critical_damage_percent") == 0) return attack_critical_damage_percent;
			if (wcscmp(fieldName, L"attack_critical_value") == 0) return attack_critical_value;
			if (wcscmp(fieldName, L"attack_critical_damage_value") == 0) return attack_critical_damage_value;
			if (wcscmp(fieldName, L"defend_critical_base_percent") == 0) return defend_critical_base_percent;
			if (wcscmp(fieldName, L"defend_critical_value") == 0) return defend_critical_value;
			if (wcscmp(fieldName, L"defend_bounce_percent") == 0) return defend_bounce_percent;
			if (wcscmp(fieldName, L"defend_dodge_base_percent") == 0) return defend_dodge_base_percent;
			if (wcscmp(fieldName, L"defend_dodge_value") == 0) return defend_dodge_value;
			if (wcscmp(fieldName, L"defend_parry_base_percent") == 0) return defend_parry_base_percent;
			if (wcscmp(fieldName, L"defend_parry_value") == 0) return defend_parry_value;
			if (wcscmp(fieldName, L"defend_parry_reduce_percent") == 0) return defend_parry_reduce_percent;
			if (wcscmp(fieldName, L"defend_parry_reduce_diff") == 0) return defend_parry_reduce_diff;
			if (wcscmp(fieldName, L"defend_perfect_parry_base_percent") == 0) return defend_perfect_parry_base_percent;
			if (wcscmp(fieldName, L"defend_perfect_parry_reduce_percent") == 0) return defend_perfect_parry_reduce_percent;
			if (wcscmp(fieldName, L"defend_counter_reduce_percent") == 0) return defend_counter_reduce_percent;
			if (wcscmp(fieldName, L"defend_immune_base_percent") == 0) return defend_immune_base_percent;
			if (wcscmp(fieldName, L"attack_power_creature_min") == 0) return attack_power_creature_min;
			if (wcscmp(fieldName, L"attack_power_creature_max") == 0) return attack_power_creature_max;
			if (wcscmp(fieldName, L"attack_power_equip_min") == 0) return attack_power_equip_min;
			if (wcscmp(fieldName, L"attack_power_equip_max") == 0) return attack_power_equip_max;
			if (wcscmp(fieldName, L"defend_power_creature_value") == 0) return defend_power_creature_value;
			if (wcscmp(fieldName, L"defend_power_equip_value") == 0) return defend_power_equip_value;
			if (wcscmp(fieldName, L"defend_resist_power_creature_value") == 0) return defend_resist_power_creature_value;
			if (wcscmp(fieldName, L"defend_resist_power_equip_value") == 0) return defend_resist_power_equip_value;
			if (wcscmp(fieldName, L"defend_physical_damage_reduce_percent") == 0) return defend_physical_damage_reduce_percent;
			if (wcscmp(fieldName, L"defend_force_damage_reduce_percent") == 0) return defend_force_damage_reduce_percent;
			if (wcscmp(fieldName, L"attack_damage_modify_percent") == 0) return attack_damage_modify_percent;
			if (wcscmp(fieldName, L"attack_damage_modify_diff") == 0) return attack_damage_modify_diff;
			if (wcscmp(fieldName, L"defend_damage_modify_percent") == 0) return defend_damage_modify_percent;
			if (wcscmp(fieldName, L"defend_damage_modify_diff") == 0) return defend_damage_modify_diff;
			if (wcscmp(fieldName, L"defend_miss_base_percent") == 0) return defend_miss_base_percent;
			if (wcscmp(fieldName, L"attack_stiff_duration_base_percent") == 0) return attack_stiff_duration_base_percent;
			if (wcscmp(fieldName, L"attack_stiff_duration_value") == 0) return attack_stiff_duration_value;
			if (wcscmp(fieldName, L"defend_stiff_duration_base_percent") == 0) return defend_stiff_duration_base_percent;
			if (wcscmp(fieldName, L"defend_stiff_duration_value") == 0) return defend_stiff_duration_value;
			if (wcscmp(fieldName, L"cast_duration_base_percent") == 0) return cast_duration_base_percent;
			if (wcscmp(fieldName, L"cast_duration_value") == 0) return cast_duration_value;
			if (wcscmp(fieldName, L"job_ability_1") == 0) return job_ability_1;
			if (wcscmp(fieldName, L"job_ability_2") == 0) return job_ability_2;
			if (wcscmp(fieldName, L"heal_power_base_percent") == 0) return heal_power_base_percent;
			if (wcscmp(fieldName, L"aoe_defend_base_percent") == 0) return aoe_defend_base_percent;
			if (wcscmp(fieldName, L"aoe_defend_power_value") == 0) return aoe_defend_power_value;
			if (wcscmp(fieldName, L"hate_base_percent") == 0) return hate_base_percent;
			if (wcscmp(fieldName, L"hate_power_creature_value") == 0) return hate_power_creature_value;
			if (wcscmp(fieldName, L"abnormal_attack_power_value") == 0) return abnormal_attack_power_value;
			if (wcscmp(fieldName, L"abnormal_attack_base_percent") == 0) return abnormal_attack_base_percent;
			if (wcscmp(fieldName, L"abnormal_defend_power_value") == 0) return abnormal_defend_power_value;
			if (wcscmp(fieldName, L"abnormal_defend_base_percent") == 0) return abnormal_defend_base_percent;
			if (wcscmp(fieldName, L"abnormal_attack_power_modify") == 0) return abnormal_attack_power_modify;
			if (wcscmp(fieldName, L"abnormal_defend_power_modify") == 0) return abnormal_defend_power_modify;
			if (wcscmp(fieldName, L"hate_power_modify") == 0) return hate_power_modify;
			if (wcscmp(fieldName, L"heal_power_modify") == 0) return heal_power_modify;
			if (wcscmp(fieldName, L"aoe_defend_power_modify") == 0) return aoe_defend_power_modify;
			if (wcscmp(fieldName, L"attack_hit_value_modify") == 0) return attack_hit_value_modify;
			if (wcscmp(fieldName, L"attack_critical_value_modify") == 0) return attack_critical_value_modify;
			if (wcscmp(fieldName, L"defend_critical_value_modify") == 0) return defend_critical_value_modify;
			if (wcscmp(fieldName, L"defend_dodge_value_modify") == 0) return defend_dodge_value_modify;
			if (wcscmp(fieldName, L"defend_parry_value_modify") == 0) return defend_parry_value_modify;
			if (wcscmp(fieldName, L"defend_physical_value_modify") == 0) return defend_physical_value_modify;
			if (wcscmp(fieldName, L"defend_force_value_modify") == 0) return defend_force_value_modify;
			if (wcscmp(fieldName, L"attack_stiff_duration_value_modify") == 0) return attack_stiff_duration_value_modify;
			if (wcscmp(fieldName, L"defend_stiff_duration_value_modify") == 0) return defend_stiff_duration_value_modify;
			if (wcscmp(fieldName, L"cast_duration_value_modify") == 0) return cast_duration_value_modify;
			if (wcscmp(fieldName, L"attack_critical_damage_modify") == 0) return attack_critical_damage_modify;
			if (wcscmp(fieldName, L"defend_critical_damage_modify") == 0) return defend_critical_damage_modify;
			if (wcscmp(fieldName, L"attack_pierce_modify") == 0) return attack_pierce_modify;
			if (wcscmp(fieldName, L"attack_parry_pierce_modify") == 0) return attack_parry_pierce_modify;
			if (wcscmp(fieldName, L"defend_parry_reduce_modify") == 0) return defend_parry_reduce_modify;
			if (wcscmp(fieldName, L"attack_perfect_parry_damage_modify") == 0) return attack_perfect_parry_damage_modify;
			if (wcscmp(fieldName, L"defend_perfect_parry_reduce_modify") == 0) return defend_perfect_parry_reduce_modify;
			if (wcscmp(fieldName, L"attack_counter_damage_modify") == 0) return attack_counter_damage_modify;
			if (wcscmp(fieldName, L"defend_counter_reduce_modify") == 0) return defend_counter_reduce_modify;
			if (wcscmp(fieldName, L"attack_attribute_value") == 0) return attack_attribute_value;
			if (wcscmp(fieldName, L"attack_attribute_base_percent") == 0) return attack_attribute_base_percent;
			if (wcscmp(fieldName, L"attack_attribute_modify") == 0) return attack_attribute_modify;
			if (wcscmp(fieldName, L"attack_pierce_base_percent") == 0) return attack_pierce_base_percent;
			if (wcscmp(fieldName, L"defend_critical_damage_percent") == 0) return defend_critical_damage_percent;
			if (wcscmp(fieldName, L"defend_strength_creature_value") == 0) return defend_strength_creature_value;
			if (wcscmp(fieldName, L"attack_precise_creature_value") == 0) return attack_precise_creature_value;
			if (wcscmp(fieldName, L"attack_aoe_pierce_value") == 0) return attack_aoe_pierce_value;
			if (wcscmp(fieldName, L"attack_abnormal_hit_base_percent") == 0) return attack_abnormal_hit_base_percent;
			if (wcscmp(fieldName, L"attack_abnormal_hit_value") == 0) return attack_abnormal_hit_value;
			if (wcscmp(fieldName, L"defend_abnormal_dodge_base_percent") == 0) return defend_abnormal_dodge_base_percent;
			if (wcscmp(fieldName, L"defend_abnormal_dodge_value") == 0) return defend_abnormal_dodge_value;
			if (wcscmp(fieldName, L"support_power_base_percent") == 0) return support_power_base_percent;
			if (wcscmp(fieldName, L"support_power_value") == 0) return support_power_value;
			if (wcscmp(fieldName, L"heal_power_value") == 0) return heal_power_value;
			if (wcscmp(fieldName, L"hypermove_power_value") == 0) return hypermove_power_value;
			if (wcscmp(fieldName, L"r_attack_aoe_pierce_modify") == 0) return r_attack_aoe_pierce_modify;
			if (wcscmp(fieldName, L"r_attack_abnormal_hit_modify") == 0) return r_attack_abnormal_hit_modify;
			if (wcscmp(fieldName, L"r_defend_abnormal_dodge_modify") == 0) return r_defend_abnormal_dodge_modify;
			if (wcscmp(fieldName, L"r_support_power_modify") == 0) return r_support_power_modify;

			return std::any();
		}
		std::wstring GetFieldAsString(const wchar_t* fieldName) {
			if (wcscmp(fieldName, L"id") == 0) return Data::AnyFieldToStringConverter::ToString(&id);
			if (wcscmp(fieldName, L"sex") == 0) return Data::AnyFieldToStringConverter::ToString(&sex);
			if (wcscmp(fieldName, L"radius") == 0) return Data::AnyFieldToStringConverter::ToString(&radius);
			if (wcscmp(fieldName, L"skill_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[0]));
			if (wcscmp(fieldName, L"skill_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[1]));
			if (wcscmp(fieldName, L"skill_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[2]));
			if (wcscmp(fieldName, L"skill_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[3]));
			if (wcscmp(fieldName, L"skill_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[4]));
			if (wcscmp(fieldName, L"skill_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[5]));
			if (wcscmp(fieldName, L"skill_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[6]));
			if (wcscmp(fieldName, L"skill_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[7]));
			if (wcscmp(fieldName, L"skill_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[8]));
			if (wcscmp(fieldName, L"skill_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[9]));
			if (wcscmp(fieldName, L"skill_11") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[10]));
			if (wcscmp(fieldName, L"skill_12") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[11]));
			if (wcscmp(fieldName, L"skill_13") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[12]));
			if (wcscmp(fieldName, L"skill_14") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[13]));
			if (wcscmp(fieldName, L"skill_15") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[14]));
			if (wcscmp(fieldName, L"skill_16") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[15]));
			if (wcscmp(fieldName, L"skill_17") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[16]));
			if (wcscmp(fieldName, L"skill_18") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[17]));
			if (wcscmp(fieldName, L"skill_19") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[18]));
			if (wcscmp(fieldName, L"skill_20") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[19]));
			if (wcscmp(fieldName, L"skill_21") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[20]));
			if (wcscmp(fieldName, L"skill_22") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[21]));
			if (wcscmp(fieldName, L"skill_23") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[22]));
			if (wcscmp(fieldName, L"skill_24") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[23]));
			if (wcscmp(fieldName, L"skill_25") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[24]));
			if (wcscmp(fieldName, L"skill_26") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[25]));
			if (wcscmp(fieldName, L"skill_27") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[26]));
			if (wcscmp(fieldName, L"skill_28") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[27]));
			if (wcscmp(fieldName, L"skill_29") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[28]));
			if (wcscmp(fieldName, L"skill_30") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[29]));
			if (wcscmp(fieldName, L"skill_31") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[30]));
			if (wcscmp(fieldName, L"skill_32") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[31]));
			if (wcscmp(fieldName, L"skill_33") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[32]));
			if (wcscmp(fieldName, L"skill_34") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[33]));
			if (wcscmp(fieldName, L"skill_35") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[34]));
			if (wcscmp(fieldName, L"skill_36") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[35]));
			if (wcscmp(fieldName, L"skill_37") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[36]));
			if (wcscmp(fieldName, L"skill_38") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[37]));
			if (wcscmp(fieldName, L"skill_39") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[38]));
			if (wcscmp(fieldName, L"skill_40") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill[39]));
			if (wcscmp(fieldName, L"skill3_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[0]));
			if (wcscmp(fieldName, L"skill3_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[1]));
			if (wcscmp(fieldName, L"skill3_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[2]));
			if (wcscmp(fieldName, L"skill3_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[3]));
			if (wcscmp(fieldName, L"skill3_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[4]));
			if (wcscmp(fieldName, L"skill3_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[5]));
			if (wcscmp(fieldName, L"skill3_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[6]));
			if (wcscmp(fieldName, L"skill3_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[7]));
			if (wcscmp(fieldName, L"skill3_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[8]));
			if (wcscmp(fieldName, L"skill3_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[9]));
			if (wcscmp(fieldName, L"skill3_11") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[10]));
			if (wcscmp(fieldName, L"skill3_12") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[11]));
			if (wcscmp(fieldName, L"skill3_13") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[12]));
			if (wcscmp(fieldName, L"skill3_14") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[13]));
			if (wcscmp(fieldName, L"skill3_15") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[14]));
			if (wcscmp(fieldName, L"skill3_16") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[15]));
			if (wcscmp(fieldName, L"skill3_17") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[16]));
			if (wcscmp(fieldName, L"skill3_18") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[17]));
			if (wcscmp(fieldName, L"skill3_19") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[18]));
			if (wcscmp(fieldName, L"skill3_20") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[19]));
			if (wcscmp(fieldName, L"skill3_21") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[20]));
			if (wcscmp(fieldName, L"skill3_22") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[21]));
			if (wcscmp(fieldName, L"skill3_23") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[22]));
			if (wcscmp(fieldName, L"skill3_24") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[23]));
			if (wcscmp(fieldName, L"skill3_25") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[24]));
			if (wcscmp(fieldName, L"skill3_26") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[25]));
			if (wcscmp(fieldName, L"skill3_27") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[26]));
			if (wcscmp(fieldName, L"skill3_28") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[27]));
			if (wcscmp(fieldName, L"skill3_29") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[28]));
			if (wcscmp(fieldName, L"skill3_30") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[29]));
			if (wcscmp(fieldName, L"skill3_31") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[30]));
			if (wcscmp(fieldName, L"skill3_32") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[31]));
			if (wcscmp(fieldName, L"skill3_33") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[32]));
			if (wcscmp(fieldName, L"skill3_34") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[33]));
			if (wcscmp(fieldName, L"skill3_35") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[34]));
			if (wcscmp(fieldName, L"skill3_36") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[35]));
			if (wcscmp(fieldName, L"skill3_37") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[36]));
			if (wcscmp(fieldName, L"skill3_38") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[37]));
			if (wcscmp(fieldName, L"skill3_39") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[38]));
			if (wcscmp(fieldName, L"skill3_40") == 0) return Data::AnyFieldToStringConverter::ToString(&(skill3[39]));
			if (wcscmp(fieldName, L"pc_skill3_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(pc_skill3[0]));
			if (wcscmp(fieldName, L"pc_skill3_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(pc_skill3[1]));
			if (wcscmp(fieldName, L"pc_job_style_skill3_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(pc_job_style_skill3[0]));
			if (wcscmp(fieldName, L"pc_job_style_skill3_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(pc_job_style_skill3[1]));
			if (wcscmp(fieldName, L"pc_job_style_skill3_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(pc_job_style_skill3[2]));
			if (wcscmp(fieldName, L"pc_job_style_skill3_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(pc_job_style_skill3[3]));
			if (wcscmp(fieldName, L"pc_job_style_skill3_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(pc_job_style_skill3[4]));
			if (wcscmp(fieldName, L"pc_job_style_skill3_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(pc_job_style_skill3[5]));
			if (wcscmp(fieldName, L"pc_job_style_skill3_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(pc_job_style_skill3[6]));
			if (wcscmp(fieldName, L"pc_job_style_skill3_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(pc_job_style_skill3[7]));
			if (wcscmp(fieldName, L"pc_job_style_skill3_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(pc_job_style_skill3[8]));
			if (wcscmp(fieldName, L"pc_job_style_skill3_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(pc_job_style_skill3[9]));
			if (wcscmp(fieldName, L"skill_build_up_level_max") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_build_up_level_max);
			if (wcscmp(fieldName, L"skill_build_up_point") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_build_up_point);
			if (wcscmp(fieldName, L"max_hp") == 0) return Data::AnyFieldToStringConverter::ToString(&max_hp);
			if (wcscmp(fieldName, L"speed") == 0) return Data::AnyFieldToStringConverter::ToString(&speed);
			if (wcscmp(fieldName, L"modify_cast_speed_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&modify_cast_speed_percent);
			if (wcscmp(fieldName, L"hp_regen") == 0) return Data::AnyFieldToStringConverter::ToString(&hp_regen);
			if (wcscmp(fieldName, L"hp_regen_combat") == 0) return Data::AnyFieldToStringConverter::ToString(&hp_regen_combat);
			if (wcscmp(fieldName, L"attack_hit_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_hit_base_percent);
			if (wcscmp(fieldName, L"attack_hit_value") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_hit_value);
			if (wcscmp(fieldName, L"attack_pierce_value") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_pierce_value);
			if (wcscmp(fieldName, L"attack_concentrate_value") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_concentrate_value);
			if (wcscmp(fieldName, L"attack_critical_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_critical_base_percent);
			if (wcscmp(fieldName, L"attack_critical_damage_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_critical_damage_percent);
			if (wcscmp(fieldName, L"attack_critical_value") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_critical_value);
			if (wcscmp(fieldName, L"attack_critical_damage_value") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_critical_damage_value);
			if (wcscmp(fieldName, L"defend_critical_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_critical_base_percent);
			if (wcscmp(fieldName, L"defend_critical_value") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_critical_value);
			if (wcscmp(fieldName, L"defend_bounce_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_bounce_percent);
			if (wcscmp(fieldName, L"defend_dodge_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_dodge_base_percent);
			if (wcscmp(fieldName, L"defend_dodge_value") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_dodge_value);
			if (wcscmp(fieldName, L"defend_parry_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_parry_base_percent);
			if (wcscmp(fieldName, L"defend_parry_value") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_parry_value);
			if (wcscmp(fieldName, L"defend_parry_reduce_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_parry_reduce_percent);
			if (wcscmp(fieldName, L"defend_parry_reduce_diff") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_parry_reduce_diff);
			if (wcscmp(fieldName, L"defend_perfect_parry_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_perfect_parry_base_percent);
			if (wcscmp(fieldName, L"defend_perfect_parry_reduce_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_perfect_parry_reduce_percent);
			if (wcscmp(fieldName, L"defend_counter_reduce_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_counter_reduce_percent);
			if (wcscmp(fieldName, L"defend_immune_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_immune_base_percent);
			if (wcscmp(fieldName, L"attack_power_creature_min") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_power_creature_min);
			if (wcscmp(fieldName, L"attack_power_creature_max") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_power_creature_max);
			if (wcscmp(fieldName, L"attack_power_equip_min") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_power_equip_min);
			if (wcscmp(fieldName, L"attack_power_equip_max") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_power_equip_max);
			if (wcscmp(fieldName, L"defend_power_creature_value") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_power_creature_value);
			if (wcscmp(fieldName, L"defend_power_equip_value") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_power_equip_value);
			if (wcscmp(fieldName, L"defend_resist_power_creature_value") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_resist_power_creature_value);
			if (wcscmp(fieldName, L"defend_resist_power_equip_value") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_resist_power_equip_value);
			if (wcscmp(fieldName, L"defend_physical_damage_reduce_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_physical_damage_reduce_percent);
			if (wcscmp(fieldName, L"defend_force_damage_reduce_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_force_damage_reduce_percent);
			if (wcscmp(fieldName, L"attack_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_damage_modify_percent);
			if (wcscmp(fieldName, L"attack_damage_modify_diff") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_damage_modify_diff);
			if (wcscmp(fieldName, L"defend_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_damage_modify_percent);
			if (wcscmp(fieldName, L"defend_damage_modify_diff") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_damage_modify_diff);
			if (wcscmp(fieldName, L"defend_miss_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_miss_base_percent);
			if (wcscmp(fieldName, L"attack_stiff_duration_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_stiff_duration_base_percent);
			if (wcscmp(fieldName, L"attack_stiff_duration_value") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_stiff_duration_value);
			if (wcscmp(fieldName, L"defend_stiff_duration_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_stiff_duration_base_percent);
			if (wcscmp(fieldName, L"defend_stiff_duration_value") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_stiff_duration_value);
			if (wcscmp(fieldName, L"cast_duration_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&cast_duration_base_percent);
			if (wcscmp(fieldName, L"cast_duration_value") == 0) return Data::AnyFieldToStringConverter::ToString(&cast_duration_value);
			if (wcscmp(fieldName, L"job_ability_1") == 0) return Data::AnyFieldToStringConverter::ToString(&job_ability_1);
			if (wcscmp(fieldName, L"job_ability_2") == 0) return Data::AnyFieldToStringConverter::ToString(&job_ability_2);
			if (wcscmp(fieldName, L"heal_power_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&heal_power_base_percent);
			if (wcscmp(fieldName, L"aoe_defend_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&aoe_defend_base_percent);
			if (wcscmp(fieldName, L"aoe_defend_power_value") == 0) return Data::AnyFieldToStringConverter::ToString(&aoe_defend_power_value);
			if (wcscmp(fieldName, L"hate_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&hate_base_percent);
			if (wcscmp(fieldName, L"hate_power_creature_value") == 0) return Data::AnyFieldToStringConverter::ToString(&hate_power_creature_value);
			if (wcscmp(fieldName, L"abnormal_attack_power_value") == 0) return Data::AnyFieldToStringConverter::ToString(&abnormal_attack_power_value);
			if (wcscmp(fieldName, L"abnormal_attack_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&abnormal_attack_base_percent);
			if (wcscmp(fieldName, L"abnormal_defend_power_value") == 0) return Data::AnyFieldToStringConverter::ToString(&abnormal_defend_power_value);
			if (wcscmp(fieldName, L"abnormal_defend_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&abnormal_defend_base_percent);
			if (wcscmp(fieldName, L"abnormal_attack_power_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&abnormal_attack_power_modify);
			if (wcscmp(fieldName, L"abnormal_defend_power_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&abnormal_defend_power_modify);
			if (wcscmp(fieldName, L"hate_power_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&hate_power_modify);
			if (wcscmp(fieldName, L"heal_power_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&heal_power_modify);
			if (wcscmp(fieldName, L"aoe_defend_power_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&aoe_defend_power_modify);
			if (wcscmp(fieldName, L"attack_hit_value_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_hit_value_modify);
			if (wcscmp(fieldName, L"attack_critical_value_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_critical_value_modify);
			if (wcscmp(fieldName, L"defend_critical_value_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_critical_value_modify);
			if (wcscmp(fieldName, L"defend_dodge_value_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_dodge_value_modify);
			if (wcscmp(fieldName, L"defend_parry_value_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_parry_value_modify);
			if (wcscmp(fieldName, L"defend_physical_value_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_physical_value_modify);
			if (wcscmp(fieldName, L"defend_force_value_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_force_value_modify);
			if (wcscmp(fieldName, L"attack_stiff_duration_value_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_stiff_duration_value_modify);
			if (wcscmp(fieldName, L"defend_stiff_duration_value_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_stiff_duration_value_modify);
			if (wcscmp(fieldName, L"cast_duration_value_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&cast_duration_value_modify);
			if (wcscmp(fieldName, L"attack_critical_damage_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_critical_damage_modify);
			if (wcscmp(fieldName, L"defend_critical_damage_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_critical_damage_modify);
			if (wcscmp(fieldName, L"attack_pierce_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_pierce_modify);
			if (wcscmp(fieldName, L"attack_parry_pierce_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_parry_pierce_modify);
			if (wcscmp(fieldName, L"defend_parry_reduce_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_parry_reduce_modify);
			if (wcscmp(fieldName, L"attack_perfect_parry_damage_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_perfect_parry_damage_modify);
			if (wcscmp(fieldName, L"defend_perfect_parry_reduce_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_perfect_parry_reduce_modify);
			if (wcscmp(fieldName, L"attack_counter_damage_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_counter_damage_modify);
			if (wcscmp(fieldName, L"defend_counter_reduce_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_counter_reduce_modify);
			if (wcscmp(fieldName, L"attack_attribute_value") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_attribute_value);
			if (wcscmp(fieldName, L"attack_attribute_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_attribute_base_percent);
			if (wcscmp(fieldName, L"attack_attribute_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_attribute_modify);
			if (wcscmp(fieldName, L"attack_pierce_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_pierce_base_percent);
			if (wcscmp(fieldName, L"defend_critical_damage_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_critical_damage_percent);
			if (wcscmp(fieldName, L"defend_strength_creature_value") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_strength_creature_value);
			if (wcscmp(fieldName, L"attack_precise_creature_value") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_precise_creature_value);
			if (wcscmp(fieldName, L"attack_aoe_pierce_value") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_aoe_pierce_value);
			if (wcscmp(fieldName, L"attack_abnormal_hit_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_abnormal_hit_base_percent);
			if (wcscmp(fieldName, L"attack_abnormal_hit_value") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_abnormal_hit_value);
			if (wcscmp(fieldName, L"defend_abnormal_dodge_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_abnormal_dodge_base_percent);
			if (wcscmp(fieldName, L"defend_abnormal_dodge_value") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_abnormal_dodge_value);
			if (wcscmp(fieldName, L"support_power_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&support_power_base_percent);
			if (wcscmp(fieldName, L"support_power_value") == 0) return Data::AnyFieldToStringConverter::ToString(&support_power_value);
			if (wcscmp(fieldName, L"heal_power_value") == 0) return Data::AnyFieldToStringConverter::ToString(&heal_power_value);
			if (wcscmp(fieldName, L"hypermove_power_value") == 0) return Data::AnyFieldToStringConverter::ToString(&hypermove_power_value);
			if (wcscmp(fieldName, L"r_attack_aoe_pierce_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&r_attack_aoe_pierce_modify);
			if (wcscmp(fieldName, L"r_attack_abnormal_hit_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&r_attack_abnormal_hit_modify);
			if (wcscmp(fieldName, L"r_defend_abnormal_dodge_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&r_defend_abnormal_dodge_modify);
			if (wcscmp(fieldName, L"r_support_power_modify") == 0) return Data::AnyFieldToStringConverter::ToString(&r_support_power_modify);

			return L"";
		}
		void AutoCorrectLookupOffsets(const char* lookupDataPtr) {
			//No offsets to correct
		}
		union Key
		{
            struct {
                __int8 race;
__int8 job;
__int16 level;
__int8 contents_type;

            };
			unsigned __int64 key;
		};
		__declspec(align(8)) Key key;
		__int64 id;
__int8 sex;
std::wstring sex_EnumValue() const {return Get_sex_EnumValue(sex);};
char Pad0[1];
__int16 radius;
Data::TableRef skill[40];
int skill_tableId(){return 335;};
Data::TableRef skill3[40];
int skill3_tableId(){return 324;};
Data::TableRef pc_skill3[2];
int pc_skill3_tableId(){return 271;};
Data::TableRef pc_job_style_skill3[10];
int pc_job_style_skill3_tableId(){return 271;};
__int8 skill_build_up_level_max;
char Pad1[1];
__int16 skill_build_up_point;
__int64 max_hp;
__int16 speed;
__int16 modify_cast_speed_percent;
__int64 hp_regen;
__int32 hp_regen_combat;
__int16 attack_hit_base_percent;
__int16 attack_hit_value;
__int16 attack_pierce_value;
__int16 attack_concentrate_value;
__int16 attack_critical_base_percent;
__int16 attack_critical_damage_percent;
__int32 attack_critical_value;
__int32 attack_critical_damage_value;
__int16 defend_critical_base_percent;
char Pad2[2];
__int32 defend_critical_value;
__int16 defend_bounce_percent;
__int16 defend_dodge_base_percent;
__int16 defend_dodge_value;
__int16 defend_parry_base_percent;
__int16 defend_parry_value;
__int16 defend_parry_reduce_percent;
__int16 defend_parry_reduce_diff;
__int16 defend_perfect_parry_base_percent;
__int16 defend_perfect_parry_reduce_percent;
__int16 defend_counter_reduce_percent;
__int16 defend_immune_base_percent;
char Pad3[2];
__int32 attack_power_creature_min;
__int32 attack_power_creature_max;
__int16 attack_power_equip_min;
__int16 attack_power_equip_max;
__int32 defend_power_creature_value;
__int32 defend_power_equip_value;
__int16 defend_resist_power_creature_value;
__int16 defend_resist_power_equip_value;
__int16 defend_physical_damage_reduce_percent;
__int16 defend_force_damage_reduce_percent;
__int16 attack_damage_modify_percent;
char Pad4[2];
__int32 attack_damage_modify_diff;
__int16 defend_damage_modify_percent;
char Pad5[2];
__int32 defend_damage_modify_diff;
__int16 defend_miss_base_percent;
__int16 attack_stiff_duration_base_percent;
__int16 attack_stiff_duration_value;
__int16 defend_stiff_duration_base_percent;
__int16 defend_stiff_duration_value;
__int16 cast_duration_base_percent;
__int16 cast_duration_value;
char Pad6[2];
__int32 job_ability_1;
__int32 job_ability_2;
__int16 heal_power_base_percent;
__int16 aoe_defend_base_percent;
__int16 aoe_defend_power_value;
__int16 hate_base_percent;
__int16 hate_power_creature_value;
char Pad7[2];
__int32 abnormal_attack_power_value;
__int16 abnormal_attack_base_percent;
__int16 abnormal_defend_power_value;
__int16 abnormal_defend_base_percent;
__int16 abnormal_attack_power_modify;
__int16 abnormal_defend_power_modify;
__int16 hate_power_modify;
__int16 heal_power_modify;
__int16 aoe_defend_power_modify;
__int16 attack_hit_value_modify;
__int16 attack_critical_value_modify;
__int16 defend_critical_value_modify;
__int16 defend_dodge_value_modify;
__int16 defend_parry_value_modify;
__int16 defend_physical_value_modify;
__int16 defend_force_value_modify;
__int16 attack_stiff_duration_value_modify;
__int16 defend_stiff_duration_value_modify;
__int16 cast_duration_value_modify;
__int16 attack_critical_damage_modify;
__int16 defend_critical_damage_modify;
__int16 attack_pierce_modify;
__int16 attack_parry_pierce_modify;
__int16 defend_parry_reduce_modify;
__int16 attack_perfect_parry_damage_modify;
__int16 defend_perfect_parry_reduce_modify;
__int16 attack_counter_damage_modify;
__int16 defend_counter_reduce_modify;
char Pad8[2];
__int32 attack_attribute_value;
__int16 attack_attribute_base_percent;
__int16 attack_attribute_modify;
__int16 attack_pierce_base_percent;
__int16 defend_critical_damage_percent;
__int32 defend_strength_creature_value;
__int32 attack_precise_creature_value;
__int16 attack_aoe_pierce_value;
__int16 attack_abnormal_hit_base_percent;
__int16 attack_abnormal_hit_value;
__int16 defend_abnormal_dodge_base_percent;
__int16 defend_abnormal_dodge_value;
__int16 support_power_base_percent;
__int16 support_power_value;
char Pad9[2];
__int32 heal_power_value;
__int16 hypermove_power_value;
__int16 r_attack_aoe_pierce_modify;
__int16 r_attack_abnormal_hit_modify;
__int16 r_defend_abnormal_dodge_modify;
__int16 r_support_power_modify;

		static TableVersion Version() { return TableVersion(2, 0); }
		static __int16 TableId() { return 268; }
		static __int32 SubType() { return 0; }
	};
#pragma pack(pop)
#pragma pack(push, 1)
	struct __declspec(align(4)) pc_RecordPtr // : DrRecordPtr
	{
		pc_Record* _record;
		int _cacheChunkIndex;
		//__unaligned __declspec(align(1)) const Data::pc_Record* _debug;
		bool _makeCopy;
	};
#pragma pack(pop)
}