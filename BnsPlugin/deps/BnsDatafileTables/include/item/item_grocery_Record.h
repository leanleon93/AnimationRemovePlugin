/*
 Generated Code! Do not manually edit this code. Modify the generator instead.
*/
#pragma once
#include "AAA_item_RecordBase.h"

namespace Data {
#pragma pack(push, 1)
	struct item_grocery_Record : item_Record
	{
	private:
		static std::wstring Get_grocery_type_EnumValue(__int8 value);
		static std::wstring Get_skill_limit_job_EnumValue(__int8 value);
		static std::wstring Get_recharge_heart_type_EnumValue(__int8 value);
		static std::wstring Get_message_range_EnumValue(__int8 value);
		static std::wstring Get_fusion_target_category_EnumValue(__int8 value);
		static std::wstring Get_grocery_effect_type_EnumValue(__int8 value);
		static std::wstring Get_use_fail_caster_flag_EnumValue(__int16 value);
		static std::wstring Get_grocery_batch_type_EnumValue(__int8 value);
	public:
		std::any GetField(const wchar_t* fieldName) const {
			auto baseResult = item_Record::GetField(fieldName);
			if (baseResult.has_value()) {
				return baseResult;
			}
			if (wcscmp(fieldName, L"grocery_type") == 0) return grocery_type;
			if (wcscmp(fieldName, L"stack_count") == 0) return stack_count;
			if (wcscmp(fieldName, L"store_bundle_count") == 0) return store_bundle_count;
			if (wcscmp(fieldName, L"skill3") == 0) return skill3;
			if (wcscmp(fieldName, L"duel_skill3") == 0) return duel_skill3;
			if (wcscmp(fieldName, L"skill_limit_level") == 0) return skill_limit_level;
			if (wcscmp(fieldName, L"skill_limit_level_max") == 0) return skill_limit_level_max;
			if (wcscmp(fieldName, L"skill_limit_mastery_level") == 0) return skill_limit_mastery_level;
			if (wcscmp(fieldName, L"skill_limit_mastery_level_max") == 0) return skill_limit_mastery_level_max;
			if (wcscmp(fieldName, L"skill_limit_job") == 0) return skill_limit_job;
			if (wcscmp(fieldName, L"skill_limit_faction") == 0) return skill_limit_faction;
			if (wcscmp(fieldName, L"skill_limit_faction_level") == 0) return skill_limit_faction_level;
			if (wcscmp(fieldName, L"skill_limit_activated_faction") == 0) return skill_limit_activated_faction;
			if (wcscmp(fieldName, L"recharge_heart_type") == 0) return recharge_heart_type;
			if (wcscmp(fieldName, L"disable_vitality_zero") == 0) return disable_vitality_zero;
			if (wcscmp(fieldName, L"disable_vitality_none_zero") == 0) return disable_vitality_none_zero;
			if (wcscmp(fieldName, L"skill_score_point") == 0) return skill_score_point;
			if (wcscmp(fieldName, L"skill_skin_acquire") == 0) return skill_skin_acquire;
			if (wcscmp(fieldName, L"resurrect_effect") == 0) return resurrect_effect;
			if (wcscmp(fieldName, L"bonus_exp") == 0) return bonus_exp;
			if (wcscmp(fieldName, L"bonus_mastery_exp") == 0) return bonus_mastery_exp;
			if (wcscmp(fieldName, L"bonus_account_exp") == 0) return bonus_account_exp;
			if (wcscmp(fieldName, L"bonus_sealed_dungeon_exp") == 0) return bonus_sealed_dungeon_exp;
			if (wcscmp(fieldName, L"bonus_sealed_dungeon_id") == 0) return bonus_sealed_dungeon_id;
			if (wcscmp(fieldName, L"energy_multiple_point") == 0) return energy_multiple_point;
			if (wcscmp(fieldName, L"additional_mastery_stat_point") == 0) return additional_mastery_stat_point;
			if (wcscmp(fieldName, L"skill_build_up_point") == 0) return skill_build_up_point;
			if (wcscmp(fieldName, L"soul_boost_season_id") == 0) return soul_boost_season_id;
			if (wcscmp(fieldName, L"soul_boost_item_point") == 0) return soul_boost_item_point;
			if (wcscmp(fieldName, L"consume_by_skill") == 0) return consume_by_skill;
			if (wcscmp(fieldName, L"repair_level_min") == 0) return repair_level_min;
			if (wcscmp(fieldName, L"repair_level_max") == 0) return repair_level_max;
			if (wcscmp(fieldName, L"repair_duration") == 0) return repair_duration;
			if (wcscmp(fieldName, L"repair_grade") == 0) return repair_grade;
			if (wcscmp(fieldName, L"necessary_campfire") == 0) return necessary_campfire;
			if (wcscmp(fieldName, L"valid_attraction_name") == 0) return valid_attraction_name;
			if (wcscmp(fieldName, L"dest_zone") == 0) return dest_zone;
			if (wcscmp(fieldName, L"expand_weapon_gem_slot_level") == 0) return expand_weapon_gem_slot_level;
			if (wcscmp(fieldName, L"expand_weapon_gem_slot_level_1") == 0) return expand_weapon_gem_slot_level[0];
			if (wcscmp(fieldName, L"expand_weapon_gem_slot_level_2") == 0) return expand_weapon_gem_slot_level[1];
			if (wcscmp(fieldName, L"unseal_acquire_item") == 0) return unseal_acquire_item;
			if (wcscmp(fieldName, L"unseal_acquire_item_1") == 0) return unseal_acquire_item[0];
			if (wcscmp(fieldName, L"unseal_acquire_item_2") == 0) return unseal_acquire_item[1];
			if (wcscmp(fieldName, L"unseal_acquire_item_3") == 0) return unseal_acquire_item[2];
			if (wcscmp(fieldName, L"unseal_acquire_item_4") == 0) return unseal_acquire_item[3];
			if (wcscmp(fieldName, L"unseal_acquire_item_5") == 0) return unseal_acquire_item[4];
			if (wcscmp(fieldName, L"unseal_acquire_item_6") == 0) return unseal_acquire_item[5];
			if (wcscmp(fieldName, L"unseal_acquire_item_7") == 0) return unseal_acquire_item[6];
			if (wcscmp(fieldName, L"unseal_acquire_item_8") == 0) return unseal_acquire_item[7];
			if (wcscmp(fieldName, L"unseal_acquire_item_9") == 0) return unseal_acquire_item[8];
			if (wcscmp(fieldName, L"unseal_acquire_item_10") == 0) return unseal_acquire_item[9];
			if (wcscmp(fieldName, L"unseal_acquire_item_11") == 0) return unseal_acquire_item[10];
			if (wcscmp(fieldName, L"unseal_acquire_item_12") == 0) return unseal_acquire_item[11];
			if (wcscmp(fieldName, L"unseal_acquire_item_13") == 0) return unseal_acquire_item[12];
			if (wcscmp(fieldName, L"unseal_acquire_item_14") == 0) return unseal_acquire_item[13];
			if (wcscmp(fieldName, L"unseal_acquire_item_15") == 0) return unseal_acquire_item[14];
			if (wcscmp(fieldName, L"unseal_acquire_item_16") == 0) return unseal_acquire_item[15];
			if (wcscmp(fieldName, L"unseal_acquire_item_17") == 0) return unseal_acquire_item[16];
			if (wcscmp(fieldName, L"unseal_acquire_item_18") == 0) return unseal_acquire_item[17];
			if (wcscmp(fieldName, L"unseal_acquire_item_19") == 0) return unseal_acquire_item[18];
			if (wcscmp(fieldName, L"unseal_acquire_item_20") == 0) return unseal_acquire_item[19];
			if (wcscmp(fieldName, L"unseal_consume_item2") == 0) return unseal_consume_item2;
			if (wcscmp(fieldName, L"unseal_consume_item2_1") == 0) return unseal_consume_item2[0];
			if (wcscmp(fieldName, L"unseal_consume_item2_2") == 0) return unseal_consume_item2[1];
			if (wcscmp(fieldName, L"unseal_consume_item2_3") == 0) return unseal_consume_item2[2];
			if (wcscmp(fieldName, L"unseal_consume_item2_4") == 0) return unseal_consume_item2[3];
			if (wcscmp(fieldName, L"unseal_consume_item2_stack_count") == 0) return unseal_consume_item2_stack_count;
			if (wcscmp(fieldName, L"unseal_consume_item2_stack_count_1") == 0) return unseal_consume_item2_stack_count[0];
			if (wcscmp(fieldName, L"unseal_consume_item2_stack_count_2") == 0) return unseal_consume_item2_stack_count[1];
			if (wcscmp(fieldName, L"unseal_consume_item2_stack_count_3") == 0) return unseal_consume_item2_stack_count[2];
			if (wcscmp(fieldName, L"unseal_consume_item2_stack_count_4") == 0) return unseal_consume_item2_stack_count[3];
			if (wcscmp(fieldName, L"unseal_result_preview_item") == 0) return unseal_result_preview_item;
			if (wcscmp(fieldName, L"transform_add_probability") == 0) return transform_add_probability;
			if (wcscmp(fieldName, L"transform_change_group") == 0) return transform_change_group;
			if (wcscmp(fieldName, L"additional_growth_recipe_exp_diff") == 0) return additional_growth_recipe_exp_diff;
			if (wcscmp(fieldName, L"additional_growth_recipe_exp_percent") == 0) return additional_growth_recipe_exp_percent;
			if (wcscmp(fieldName, L"additional_awakening_probability") == 0) return additional_awakening_probability;
			if (wcscmp(fieldName, L"randombox_preview") == 0) return randombox_preview;
			if (wcscmp(fieldName, L"message_range") == 0) return message_range;
			if (wcscmp(fieldName, L"pet_food_recovery") == 0) return pet_food_recovery;
			if (wcscmp(fieldName, L"exceptional_usable_attraction") == 0) return exceptional_usable_attraction;
			if (wcscmp(fieldName, L"item_usable_group") == 0) return item_usable_group;
			if (wcscmp(fieldName, L"required_completion_quest") == 0) return required_completion_quest;
			if (wcscmp(fieldName, L"skill_book_achievement_blademaster") == 0) return skill_book_achievement_blademaster;
			if (wcscmp(fieldName, L"skill_book_achievement_kungfufighter") == 0) return skill_book_achievement_kungfufighter;
			if (wcscmp(fieldName, L"skill_book_achievement_forcemaster") == 0) return skill_book_achievement_forcemaster;
			if (wcscmp(fieldName, L"skill_book_achievement_shooter") == 0) return skill_book_achievement_shooter;
			if (wcscmp(fieldName, L"skill_book_achievement_destroyer") == 0) return skill_book_achievement_destroyer;
			if (wcscmp(fieldName, L"skill_book_achievement_summoner") == 0) return skill_book_achievement_summoner;
			if (wcscmp(fieldName, L"skill_book_achievement_assassin") == 0) return skill_book_achievement_assassin;
			if (wcscmp(fieldName, L"skill_book_achievement_swordmaster") == 0) return skill_book_achievement_swordmaster;
			if (wcscmp(fieldName, L"skill_book_achievement_warlock") == 0) return skill_book_achievement_warlock;
			if (wcscmp(fieldName, L"skill_book_achievement_soulfighter") == 0) return skill_book_achievement_soulfighter;
			if (wcscmp(fieldName, L"skill_book_achievement_warrior") == 0) return skill_book_achievement_warrior;
			if (wcscmp(fieldName, L"skill_book_achievement_archer") == 0) return skill_book_achievement_archer;
			if (wcscmp(fieldName, L"skill_book_achievement_spear_master") == 0) return skill_book_achievement_spear_master;
			if (wcscmp(fieldName, L"skill_book_achievement_thunderer") == 0) return skill_book_achievement_thunderer;
			if (wcscmp(fieldName, L"skill_book_achievement_dual_blader") == 0) return skill_book_achievement_dual_blader;
			if (wcscmp(fieldName, L"skill_book_achievement_bard") == 0) return skill_book_achievement_bard;
			if (wcscmp(fieldName, L"fishing_paste") == 0) return fishing_paste;
			if (wcscmp(fieldName, L"secret_treasure_id") == 0) return secret_treasure_id;
			if (wcscmp(fieldName, L"badge_gear_score") == 0) return badge_gear_score;
			if (wcscmp(fieldName, L"badge_synthesis_score") == 0) return badge_synthesis_score;
			if (wcscmp(fieldName, L"slate_scroll") == 0) return slate_scroll;
			if (wcscmp(fieldName, L"fusion_target_category") == 0) return fusion_target_category;
			if (wcscmp(fieldName, L"fusion_score_factor") == 0) return fusion_score_factor;
			if (wcscmp(fieldName, L"grocery_effect_type") == 0) return grocery_effect_type;
			if (wcscmp(fieldName, L"grocery_effect_level") == 0) return grocery_effect_level;
			if (wcscmp(fieldName, L"card") == 0) return card;
			if (wcscmp(fieldName, L"use_fail_caster_flag") == 0) return use_fail_caster_flag;
			if (wcscmp(fieldName, L"glyph_reward") == 0) return glyph_reward;
			if (wcscmp(fieldName, L"glyph_reward_fixed") == 0) return glyph_reward_fixed;
			if (wcscmp(fieldName, L"grocery_batch_type") == 0) return grocery_batch_type;
			if (wcscmp(fieldName, L"relic_symbol") == 0) return relic_symbol;
			if (wcscmp(fieldName, L"relic_image") == 0) return relic_image;
			if (wcscmp(fieldName, L"relic_main_option") == 0) return relic_main_option;
			if (wcscmp(fieldName, L"relic_sub_option") == 0) return relic_sub_option;
			if (wcscmp(fieldName, L"relic_bonus_1_option") == 0) return relic_bonus_1_option;
			if (wcscmp(fieldName, L"relic_bonus_2_option") == 0) return relic_bonus_2_option;
			if (wcscmp(fieldName, L"relic_synthesis_score") == 0) return relic_synthesis_score;
			if (wcscmp(fieldName, L"relic_set_item") == 0) return relic_set_item;
			if (wcscmp(fieldName, L"relic_enhance_cost") == 0) return relic_enhance_cost;
			if (wcscmp(fieldName, L"relic_enhance_max_count") == 0) return relic_enhance_max_count;

			return std::any();
		}
		std::wstring GetFieldAsString(const wchar_t* fieldName) {
			auto baseResult = item_Record::GetFieldAsString(fieldName);
			if (!baseResult.empty()) {
				return baseResult;
			}
			if (wcscmp(fieldName, L"grocery_type") == 0) return Data::AnyFieldToStringConverter::ToString(&grocery_type);
			if (wcscmp(fieldName, L"stack_count") == 0) return Data::AnyFieldToStringConverter::ToString(&stack_count);
			if (wcscmp(fieldName, L"store_bundle_count") == 0) return Data::AnyFieldToStringConverter::ToString(&store_bundle_count);
			if (wcscmp(fieldName, L"skill3") == 0) return Data::AnyFieldToStringConverter::ToString(&skill3);
			if (wcscmp(fieldName, L"duel_skill3") == 0) return Data::AnyFieldToStringConverter::ToString(&duel_skill3);
			if (wcscmp(fieldName, L"skill_limit_level") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_limit_level);
			if (wcscmp(fieldName, L"skill_limit_level_max") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_limit_level_max);
			if (wcscmp(fieldName, L"skill_limit_mastery_level") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_limit_mastery_level);
			if (wcscmp(fieldName, L"skill_limit_mastery_level_max") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_limit_mastery_level_max);
			if (wcscmp(fieldName, L"skill_limit_job") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_limit_job);
			if (wcscmp(fieldName, L"skill_limit_faction") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_limit_faction);
			if (wcscmp(fieldName, L"skill_limit_faction_level") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_limit_faction_level);
			if (wcscmp(fieldName, L"skill_limit_activated_faction") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_limit_activated_faction);
			if (wcscmp(fieldName, L"recharge_heart_type") == 0) return Data::AnyFieldToStringConverter::ToString(&recharge_heart_type);
			if (wcscmp(fieldName, L"disable_vitality_zero") == 0) return Data::AnyFieldToStringConverter::ToString(&disable_vitality_zero);
			if (wcscmp(fieldName, L"disable_vitality_none_zero") == 0) return Data::AnyFieldToStringConverter::ToString(&disable_vitality_none_zero);
			if (wcscmp(fieldName, L"skill_score_point") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_score_point);
			if (wcscmp(fieldName, L"skill_skin_acquire") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_skin_acquire);
			if (wcscmp(fieldName, L"resurrect_effect") == 0) return Data::AnyFieldToStringConverter::ToString(&resurrect_effect);
			if (wcscmp(fieldName, L"bonus_exp") == 0) return Data::AnyFieldToStringConverter::ToString(&bonus_exp);
			if (wcscmp(fieldName, L"bonus_mastery_exp") == 0) return Data::AnyFieldToStringConverter::ToString(&bonus_mastery_exp);
			if (wcscmp(fieldName, L"bonus_account_exp") == 0) return Data::AnyFieldToStringConverter::ToString(&bonus_account_exp);
			if (wcscmp(fieldName, L"bonus_sealed_dungeon_exp") == 0) return Data::AnyFieldToStringConverter::ToString(&bonus_sealed_dungeon_exp);
			if (wcscmp(fieldName, L"bonus_sealed_dungeon_id") == 0) return Data::AnyFieldToStringConverter::ToString(&bonus_sealed_dungeon_id);
			if (wcscmp(fieldName, L"energy_multiple_point") == 0) return Data::AnyFieldToStringConverter::ToString(&energy_multiple_point);
			if (wcscmp(fieldName, L"additional_mastery_stat_point") == 0) return Data::AnyFieldToStringConverter::ToString(&additional_mastery_stat_point);
			if (wcscmp(fieldName, L"skill_build_up_point") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_build_up_point);
			if (wcscmp(fieldName, L"soul_boost_season_id") == 0) return Data::AnyFieldToStringConverter::ToString(&soul_boost_season_id);
			if (wcscmp(fieldName, L"soul_boost_item_point") == 0) return Data::AnyFieldToStringConverter::ToString(&soul_boost_item_point);
			if (wcscmp(fieldName, L"consume_by_skill") == 0) return Data::AnyFieldToStringConverter::ToString(&consume_by_skill);
			if (wcscmp(fieldName, L"repair_level_min") == 0) return Data::AnyFieldToStringConverter::ToString(&repair_level_min);
			if (wcscmp(fieldName, L"repair_level_max") == 0) return Data::AnyFieldToStringConverter::ToString(&repair_level_max);
			if (wcscmp(fieldName, L"repair_duration") == 0) return Data::AnyFieldToStringConverter::ToString(&repair_duration);
			if (wcscmp(fieldName, L"repair_grade") == 0) return Data::AnyFieldToStringConverter::ToString(&repair_grade);
			if (wcscmp(fieldName, L"necessary_campfire") == 0) return Data::AnyFieldToStringConverter::ToString(&necessary_campfire);
			if (wcscmp(fieldName, L"valid_attraction_name") == 0) return Data::AnyFieldToStringConverter::ToString(&valid_attraction_name);
			if (wcscmp(fieldName, L"dest_zone") == 0) return Data::AnyFieldToStringConverter::ToString(&dest_zone);
			if (wcscmp(fieldName, L"expand_weapon_gem_slot_level_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(expand_weapon_gem_slot_level[0]));
			if (wcscmp(fieldName, L"expand_weapon_gem_slot_level_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(expand_weapon_gem_slot_level[1]));
			if (wcscmp(fieldName, L"unseal_acquire_item_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_acquire_item[0]));
			if (wcscmp(fieldName, L"unseal_acquire_item_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_acquire_item[1]));
			if (wcscmp(fieldName, L"unseal_acquire_item_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_acquire_item[2]));
			if (wcscmp(fieldName, L"unseal_acquire_item_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_acquire_item[3]));
			if (wcscmp(fieldName, L"unseal_acquire_item_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_acquire_item[4]));
			if (wcscmp(fieldName, L"unseal_acquire_item_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_acquire_item[5]));
			if (wcscmp(fieldName, L"unseal_acquire_item_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_acquire_item[6]));
			if (wcscmp(fieldName, L"unseal_acquire_item_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_acquire_item[7]));
			if (wcscmp(fieldName, L"unseal_acquire_item_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_acquire_item[8]));
			if (wcscmp(fieldName, L"unseal_acquire_item_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_acquire_item[9]));
			if (wcscmp(fieldName, L"unseal_acquire_item_11") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_acquire_item[10]));
			if (wcscmp(fieldName, L"unseal_acquire_item_12") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_acquire_item[11]));
			if (wcscmp(fieldName, L"unseal_acquire_item_13") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_acquire_item[12]));
			if (wcscmp(fieldName, L"unseal_acquire_item_14") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_acquire_item[13]));
			if (wcscmp(fieldName, L"unseal_acquire_item_15") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_acquire_item[14]));
			if (wcscmp(fieldName, L"unseal_acquire_item_16") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_acquire_item[15]));
			if (wcscmp(fieldName, L"unseal_acquire_item_17") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_acquire_item[16]));
			if (wcscmp(fieldName, L"unseal_acquire_item_18") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_acquire_item[17]));
			if (wcscmp(fieldName, L"unseal_acquire_item_19") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_acquire_item[18]));
			if (wcscmp(fieldName, L"unseal_acquire_item_20") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_acquire_item[19]));
			if (wcscmp(fieldName, L"unseal_consume_item2_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_consume_item2[0]));
			if (wcscmp(fieldName, L"unseal_consume_item2_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_consume_item2[1]));
			if (wcscmp(fieldName, L"unseal_consume_item2_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_consume_item2[2]));
			if (wcscmp(fieldName, L"unseal_consume_item2_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_consume_item2[3]));
			if (wcscmp(fieldName, L"unseal_consume_item2_stack_count_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_consume_item2_stack_count[0]));
			if (wcscmp(fieldName, L"unseal_consume_item2_stack_count_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_consume_item2_stack_count[1]));
			if (wcscmp(fieldName, L"unseal_consume_item2_stack_count_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_consume_item2_stack_count[2]));
			if (wcscmp(fieldName, L"unseal_consume_item2_stack_count_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(unseal_consume_item2_stack_count[3]));
			if (wcscmp(fieldName, L"unseal_result_preview_item") == 0) return Data::AnyFieldToStringConverter::ToString(&unseal_result_preview_item);
			if (wcscmp(fieldName, L"transform_add_probability") == 0) return Data::AnyFieldToStringConverter::ToString(&transform_add_probability);
			if (wcscmp(fieldName, L"transform_change_group") == 0) return Data::AnyFieldToStringConverter::ToString(&transform_change_group);
			if (wcscmp(fieldName, L"additional_growth_recipe_exp_diff") == 0) return Data::AnyFieldToStringConverter::ToString(&additional_growth_recipe_exp_diff);
			if (wcscmp(fieldName, L"additional_growth_recipe_exp_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&additional_growth_recipe_exp_percent);
			if (wcscmp(fieldName, L"additional_awakening_probability") == 0) return Data::AnyFieldToStringConverter::ToString(&additional_awakening_probability);
			if (wcscmp(fieldName, L"randombox_preview") == 0) return Data::AnyFieldToStringConverter::ToString(&randombox_preview);
			if (wcscmp(fieldName, L"message_range") == 0) return Data::AnyFieldToStringConverter::ToString(&message_range);
			if (wcscmp(fieldName, L"pet_food_recovery") == 0) return Data::AnyFieldToStringConverter::ToString(&pet_food_recovery);
			if (wcscmp(fieldName, L"exceptional_usable_attraction") == 0) return Data::AnyFieldToStringConverter::ToString(&exceptional_usable_attraction);
			if (wcscmp(fieldName, L"item_usable_group") == 0) return Data::AnyFieldToStringConverter::ToString(&item_usable_group);
			if (wcscmp(fieldName, L"required_completion_quest") == 0) return Data::AnyFieldToStringConverter::ToString(&required_completion_quest);
			if (wcscmp(fieldName, L"skill_book_achievement_blademaster") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_book_achievement_blademaster);
			if (wcscmp(fieldName, L"skill_book_achievement_kungfufighter") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_book_achievement_kungfufighter);
			if (wcscmp(fieldName, L"skill_book_achievement_forcemaster") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_book_achievement_forcemaster);
			if (wcscmp(fieldName, L"skill_book_achievement_shooter") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_book_achievement_shooter);
			if (wcscmp(fieldName, L"skill_book_achievement_destroyer") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_book_achievement_destroyer);
			if (wcscmp(fieldName, L"skill_book_achievement_summoner") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_book_achievement_summoner);
			if (wcscmp(fieldName, L"skill_book_achievement_assassin") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_book_achievement_assassin);
			if (wcscmp(fieldName, L"skill_book_achievement_swordmaster") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_book_achievement_swordmaster);
			if (wcscmp(fieldName, L"skill_book_achievement_warlock") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_book_achievement_warlock);
			if (wcscmp(fieldName, L"skill_book_achievement_soulfighter") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_book_achievement_soulfighter);
			if (wcscmp(fieldName, L"skill_book_achievement_warrior") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_book_achievement_warrior);
			if (wcscmp(fieldName, L"skill_book_achievement_archer") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_book_achievement_archer);
			if (wcscmp(fieldName, L"skill_book_achievement_spear_master") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_book_achievement_spear_master);
			if (wcscmp(fieldName, L"skill_book_achievement_thunderer") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_book_achievement_thunderer);
			if (wcscmp(fieldName, L"skill_book_achievement_dual_blader") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_book_achievement_dual_blader);
			if (wcscmp(fieldName, L"skill_book_achievement_bard") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_book_achievement_bard);
			if (wcscmp(fieldName, L"fishing_paste") == 0) return Data::AnyFieldToStringConverter::ToString(&fishing_paste);
			if (wcscmp(fieldName, L"secret_treasure_id") == 0) return Data::AnyFieldToStringConverter::ToString(&secret_treasure_id);
			if (wcscmp(fieldName, L"badge_gear_score") == 0) return Data::AnyFieldToStringConverter::ToString(&badge_gear_score);
			if (wcscmp(fieldName, L"badge_synthesis_score") == 0) return Data::AnyFieldToStringConverter::ToString(&badge_synthesis_score);
			if (wcscmp(fieldName, L"slate_scroll") == 0) return Data::AnyFieldToStringConverter::ToString(&slate_scroll);
			if (wcscmp(fieldName, L"fusion_target_category") == 0) return Data::AnyFieldToStringConverter::ToString(&fusion_target_category);
			if (wcscmp(fieldName, L"fusion_score_factor") == 0) return Data::AnyFieldToStringConverter::ToString(&fusion_score_factor);
			if (wcscmp(fieldName, L"grocery_effect_type") == 0) return Data::AnyFieldToStringConverter::ToString(&grocery_effect_type);
			if (wcscmp(fieldName, L"grocery_effect_level") == 0) return Data::AnyFieldToStringConverter::ToString(&grocery_effect_level);
			if (wcscmp(fieldName, L"card") == 0) return Data::AnyFieldToStringConverter::ToString(&card);
			if (wcscmp(fieldName, L"use_fail_caster_flag") == 0) return Data::AnyFieldToStringConverter::ToString(&use_fail_caster_flag);
			if (wcscmp(fieldName, L"glyph_reward") == 0) return Data::AnyFieldToStringConverter::ToString(&glyph_reward);
			if (wcscmp(fieldName, L"glyph_reward_fixed") == 0) return Data::AnyFieldToStringConverter::ToString(&glyph_reward_fixed);
			if (wcscmp(fieldName, L"grocery_batch_type") == 0) return Data::AnyFieldToStringConverter::ToString(&grocery_batch_type);
			if (wcscmp(fieldName, L"relic_symbol") == 0) return Data::AnyFieldToStringConverter::ToString(&relic_symbol);
			if (wcscmp(fieldName, L"relic_image") == 0) return Data::AnyFieldToStringConverter::ToString(&relic_image);
			if (wcscmp(fieldName, L"relic_main_option") == 0) return Data::AnyFieldToStringConverter::ToString(&relic_main_option);
			if (wcscmp(fieldName, L"relic_sub_option") == 0) return Data::AnyFieldToStringConverter::ToString(&relic_sub_option);
			if (wcscmp(fieldName, L"relic_bonus_1_option") == 0) return Data::AnyFieldToStringConverter::ToString(&relic_bonus_1_option);
			if (wcscmp(fieldName, L"relic_bonus_2_option") == 0) return Data::AnyFieldToStringConverter::ToString(&relic_bonus_2_option);
			if (wcscmp(fieldName, L"relic_synthesis_score") == 0) return Data::AnyFieldToStringConverter::ToString(&relic_synthesis_score);
			if (wcscmp(fieldName, L"relic_set_item") == 0) return Data::AnyFieldToStringConverter::ToString(&relic_set_item);
			if (wcscmp(fieldName, L"relic_enhance_cost") == 0) return Data::AnyFieldToStringConverter::ToString(&relic_enhance_cost);
			if (wcscmp(fieldName, L"relic_enhance_max_count") == 0) return Data::AnyFieldToStringConverter::ToString(&relic_enhance_max_count);

			return L"";
		}
		void AutoCorrectLookupOffsets(const char* lookupDataPtr) {
			item_Record::AutoCorrectLookupOffsets(lookupDataPtr);
			//No offsets to correct
		}
		char Pad_sub_0[3];
__int8 grocery_type;
std::wstring grocery_type_EnumValue() const {return Get_grocery_type_EnumValue(grocery_type);};
char Pad_sub_1[1];
__int16 stack_count;
__int16 store_bundle_count;
char Pad_sub_2[2];
Data::TableRef skill3;
int skill3_tableId(){return 324;};
Data::TableRef duel_skill3;
int duel_skill3_tableId(){return 324;};
__int8 skill_limit_level;
__int8 skill_limit_level_max;
__int8 skill_limit_mastery_level;
__int8 skill_limit_mastery_level_max;
__int8 skill_limit_job;
std::wstring skill_limit_job_EnumValue() const {return Get_skill_limit_job_EnumValue(skill_limit_job);};
char Pad_sub_3[3];
Data::TableRef skill_limit_faction;
int skill_limit_faction_tableId(){return 130;};
__int16 skill_limit_faction_level;
char Pad_sub_4[2];
Data::TableRef skill_limit_activated_faction;
int skill_limit_activated_faction_tableId(){return 130;};
__int8 recharge_heart_type;
std::wstring recharge_heart_type_EnumValue() const {return Get_recharge_heart_type_EnumValue(recharge_heart_type);};
bool disable_vitality_zero;
bool disable_vitality_none_zero;
char Pad_sub_5[1];
__int32 skill_score_point;
Data::TableRef skill_skin_acquire;
int skill_skin_acquire_tableId(){return 344;};
Data::TableRef resurrect_effect;
int resurrect_effect_tableId(){return 111;};
__int32 bonus_exp;
__int32 bonus_mastery_exp;
__int32 bonus_account_exp;
__int32 bonus_sealed_dungeon_exp;
Data::TableRef bonus_sealed_dungeon_id;
int bonus_sealed_dungeon_id_tableId(){return 110;};
__int32 energy_multiple_point;
__int16 additional_mastery_stat_point;
__int16 skill_build_up_point;
__int32 soul_boost_season_id;
__int32 soul_boost_item_point;
bool consume_by_skill;
char Pad_sub_6[1];
__int16 repair_level_min;
__int16 repair_level_max;
char Pad_sub_7[2];
__int32 repair_duration;
__int8 repair_grade;
bool necessary_campfire;
char Pad_sub_8[2];
Data::TableRef valid_attraction_name;
int valid_attraction_name_tableId(){return 405;};
Data::TableRef dest_zone;
int dest_zone_tableId(){return 443;};
__int8 expand_weapon_gem_slot_level[2];
char Pad_sub_9[2];
Data::TableRef unseal_acquire_item[20];
int unseal_acquire_item_tableId(){return 189;};
Data::TableRef unseal_consume_item2[4];
int unseal_consume_item2_tableId(){return 189;};
__int16 unseal_consume_item2_stack_count[4];
Data::TableRef unseal_result_preview_item;
int unseal_result_preview_item_tableId(){return 189;};
__int16 transform_add_probability;
bool transform_change_group;
char Pad_sub_10[1];
__int32 additional_growth_recipe_exp_diff;
__int32 additional_growth_recipe_exp_percent;
__int8 additional_awakening_probability;
char Pad_sub_11[3];
Data::TableRef randombox_preview;
int randombox_preview_tableId(){return 290;};
__int8 message_range;
std::wstring message_range_EnumValue() const {return Get_message_range_EnumValue(message_range);};
char Pad_sub_12[3];
Data::TableRef pet_food_recovery;
int pet_food_recovery_tableId(){return 275;};
Data::ExplicitTableRef exceptional_usable_attraction;
Data::TableRef item_usable_group;
int item_usable_group_tableId(){return 215;};
Data::TableRef required_completion_quest;
int required_completion_quest_tableId(){return 283;};
Data::TableRef skill_book_achievement_blademaster;
int skill_book_achievement_blademaster_tableId(){return 6;};
Data::TableRef skill_book_achievement_kungfufighter;
int skill_book_achievement_kungfufighter_tableId(){return 6;};
Data::TableRef skill_book_achievement_forcemaster;
int skill_book_achievement_forcemaster_tableId(){return 6;};
Data::TableRef skill_book_achievement_shooter;
int skill_book_achievement_shooter_tableId(){return 6;};
Data::TableRef skill_book_achievement_destroyer;
int skill_book_achievement_destroyer_tableId(){return 6;};
Data::TableRef skill_book_achievement_summoner;
int skill_book_achievement_summoner_tableId(){return 6;};
Data::TableRef skill_book_achievement_assassin;
int skill_book_achievement_assassin_tableId(){return 6;};
Data::TableRef skill_book_achievement_swordmaster;
int skill_book_achievement_swordmaster_tableId(){return 6;};
Data::TableRef skill_book_achievement_warlock;
int skill_book_achievement_warlock_tableId(){return 6;};
Data::TableRef skill_book_achievement_soulfighter;
int skill_book_achievement_soulfighter_tableId(){return 6;};
Data::TableRef skill_book_achievement_warrior;
int skill_book_achievement_warrior_tableId(){return 6;};
Data::TableRef skill_book_achievement_archer;
int skill_book_achievement_archer_tableId(){return 6;};
Data::TableRef skill_book_achievement_spear_master;
int skill_book_achievement_spear_master_tableId(){return 6;};
Data::TableRef skill_book_achievement_thunderer;
int skill_book_achievement_thunderer_tableId(){return 6;};
Data::TableRef skill_book_achievement_dual_blader;
int skill_book_achievement_dual_blader_tableId(){return 6;};
Data::TableRef skill_book_achievement_bard;
int skill_book_achievement_bard_tableId(){return 6;};
Data::TableRef fishing_paste;
int fishing_paste_tableId(){return 146;};
__int16 secret_treasure_id;
char Pad_sub_13[2];
__int32 badge_gear_score;
__int32 badge_synthesis_score;
Data::TableRef slate_scroll;
int slate_scroll_tableId(){return 364;};
__int8 fusion_target_category;
std::wstring fusion_target_category_EnumValue() const {return Get_fusion_target_category_EnumValue(fusion_target_category);};
char Pad_sub_14[1];
__int16 fusion_score_factor;
__int8 grocery_effect_type;
std::wstring grocery_effect_type_EnumValue() const {return Get_grocery_effect_type_EnumValue(grocery_effect_type);};
char Pad_sub_15[1];
__int16 grocery_effect_level;
Data::TableRef card;
int card_tableId(){return 433;};
__int16 use_fail_caster_flag;
std::wstring use_fail_caster_flag_EnumValue() const {return Get_use_fail_caster_flag_EnumValue(use_fail_caster_flag);};
char Pad_sub_16[2];
Data::TableRef glyph_reward;
int glyph_reward_tableId(){return 155;};
Data::TableRef glyph_reward_fixed;
int glyph_reward_fixed_tableId(){return 153;};
__int8 grocery_batch_type;
std::wstring grocery_batch_type_EnumValue() const {return Get_grocery_batch_type_EnumValue(grocery_batch_type);};
char Pad_sub_17[3];
Data::TableRef relic_symbol;
int relic_symbol_tableId(){return 310;};
Data::IconRef relic_image;
Data::TableRef relic_main_option;
int relic_main_option_tableId(){return 308;};
Data::TableRef relic_sub_option;
int relic_sub_option_tableId(){return 308;};
Data::TableRef relic_bonus_1_option;
int relic_bonus_1_option_tableId(){return 308;};
Data::TableRef relic_bonus_2_option;
int relic_bonus_2_option_tableId(){return 308;};
__int32 relic_synthesis_score;
Data::TableRef relic_set_item;
int relic_set_item_tableId(){return 309;};
Data::TableRef relic_enhance_cost;
int relic_enhance_cost_tableId(){return 307;};
__int8 relic_enhance_max_count;

		static __int32 SubType() { return 2; }
	};
#pragma pack(pop)
}