/*
 Generated Code! Do not manually edit this code. Modify the generator instead.
*/
#pragma once
#include "../DrEl.h"
#include "../AnyToStringConverter.h"

namespace Data {
    enum class item_RecordSubType : __int32
    {
		item_record_sub_weapon = 0,
		item_record_sub_costume = 1,
		item_record_sub_grocery = 2,
		item_record_sub_gem = 3,
		item_record_sub_accessory = 4,
		item_record_sub_enchant = 5,
		item_record_sub_count = 6,
    };
#pragma pack(push, 1)
	struct item_Record : DrEl
	{
	private:
		static std::wstring Get_game_category_1_EnumValue(__int8 value);
		static std::wstring Get_game_category_2_EnumValue(__int8 value);
		static std::wstring Get_game_category_3_EnumValue(__int16 value);
		static std::wstring Get_market_category_1_EnumValue(__int8 value);
		static std::wstring Get_market_category_2_EnumValue(__int8 value);
		static std::wstring Get_market_category_3_EnumValue(__int16 value);
		static std::wstring Get_equip_job_check_EnumValue(__int8 value);
		static std::wstring Get_equip_sex_EnumValue(__int8 value);
		static std::wstring Get_equip_race_EnumValue(__int8 value);
		static std::wstring Get_equip_type_EnumValue(__int8 value);
		static std::wstring Get_legend_grade_background_particle_type_EnumValue(__int8 value);
		static std::wstring Get_use_recycle_group_EnumValue(__int8 value);
		static std::wstring Get_pouch_appearance_EnumValue(__int8 value);
		static std::wstring Get_forwarding_types_EnumValue(__int8 value);
		static std::wstring Get_main_ability_EnumValue(__int8 value);
		static std::wstring Get_required_seed_item_growth_course_EnumValue(__int8 value);
		static std::wstring Get_required_seed_item_condition_type_EnumValue(__int8 value);
		static std::wstring Get_required_feed_item_condition_type_EnumValue(__int8 value);
		static std::wstring Get_time_limit_type_EnumValue(__int8 value);
		static std::wstring Get_delete_expiration_type_EnumValue(__int8 value);
		static std::wstring Get_fusion_category_1_EnumValue(__int8 value);
		static std::wstring Get_fusion_category_2_EnumValue(__int16 value);
		static std::wstring Get_boast_event_type_EnumValue(__int8 value);
		static std::wstring Get_ui_icon_state_EnumValue(__int8 value);
		static std::wstring Get_item_style_EnumValue(__int8 value);
	public:
		std::any GetField(const wchar_t* fieldName) const {
			if (wcscmp(fieldName, L"alias") == 0) return alias;
			if (wcscmp(fieldName, L"item_combat") == 0) return item_combat;
			if (wcscmp(fieldName, L"item_combat_1") == 0) return item_combat[0];
			if (wcscmp(fieldName, L"item_combat_2") == 0) return item_combat[1];
			if (wcscmp(fieldName, L"item_combat_3") == 0) return item_combat[2];
			if (wcscmp(fieldName, L"item_combat_4") == 0) return item_combat[3];
			if (wcscmp(fieldName, L"item_combat_5") == 0) return item_combat[4];
			if (wcscmp(fieldName, L"item_combat_6") == 0) return item_combat[5];
			if (wcscmp(fieldName, L"item_combat_7") == 0) return item_combat[6];
			if (wcscmp(fieldName, L"item_combat_8") == 0) return item_combat[7];
			if (wcscmp(fieldName, L"item_combat_9") == 0) return item_combat[8];
			if (wcscmp(fieldName, L"item_combat_10") == 0) return item_combat[9];
			if (wcscmp(fieldName, L"brand") == 0) return brand;
			if (wcscmp(fieldName, L"price") == 0) return price;
			if (wcscmp(fieldName, L"base_fee") == 0) return base_fee;
			if (wcscmp(fieldName, L"game_category_1") == 0) return game_category_1;
			if (wcscmp(fieldName, L"game_category_2") == 0) return game_category_2;
			if (wcscmp(fieldName, L"game_category_3") == 0) return game_category_3;
			if (wcscmp(fieldName, L"market_category_1") == 0) return market_category_1;
			if (wcscmp(fieldName, L"market_category_2") == 0) return market_category_2;
			if (wcscmp(fieldName, L"market_category_3") == 0) return market_category_3;
			if (wcscmp(fieldName, L"cannot_dispose") == 0) return cannot_dispose;
			if (wcscmp(fieldName, L"cannot_sell") == 0) return cannot_sell;
			if (wcscmp(fieldName, L"cannot_trade") == 0) return cannot_trade;
			if (wcscmp(fieldName, L"cannot_depot") == 0) return cannot_depot;
			if (wcscmp(fieldName, L"consume_durability") == 0) return consume_durability;
			if (wcscmp(fieldName, L"auctionable") == 0) return auctionable;
			if (wcscmp(fieldName, L"seal_renewal_auctionable") == 0) return seal_renewal_auctionable;
			if (wcscmp(fieldName, L"party_auction_exclusion") == 0) return party_auction_exclusion;
			if (wcscmp(fieldName, L"acquire_used") == 0) return acquire_used;
			if (wcscmp(fieldName, L"equip_used") == 0) return equip_used;
			if (wcscmp(fieldName, L"account_used") == 0) return account_used;
			if (wcscmp(fieldName, L"filter_equip") == 0) return filter_equip;
			if (wcscmp(fieldName, L"filter_equip_1") == 0) return filter_equip[0];
			if (wcscmp(fieldName, L"filter_equip_2") == 0) return filter_equip[1];
			if (wcscmp(fieldName, L"filter_equip_3") == 0) return filter_equip[2];
			if (wcscmp(fieldName, L"filter_equip_4") == 0) return filter_equip[3];
			if (wcscmp(fieldName, L"effect_equip") == 0) return effect_equip;
			if (wcscmp(fieldName, L"effect_equip_1") == 0) return effect_equip[0];
			if (wcscmp(fieldName, L"effect_equip_2") == 0) return effect_equip[1];
			if (wcscmp(fieldName, L"effect_equip_3") == 0) return effect_equip[2];
			if (wcscmp(fieldName, L"effect_equip_4") == 0) return effect_equip[3];
			if (wcscmp(fieldName, L"gear_score") == 0) return gear_score;
			if (wcscmp(fieldName, L"equip_level") == 0) return equip_level;
			if (wcscmp(fieldName, L"equip_level_max") == 0) return equip_level_max;
			if (wcscmp(fieldName, L"equip_mastery_level") == 0) return equip_mastery_level;
			if (wcscmp(fieldName, L"equip_job_check") == 0) return equip_job_check;
			if (wcscmp(fieldName, L"equip_job_check_1") == 0) return equip_job_check[0];
			if (wcscmp(fieldName, L"equip_job_check_2") == 0) return equip_job_check[1];
			if (wcscmp(fieldName, L"equip_job_check_3") == 0) return equip_job_check[2];
			if (wcscmp(fieldName, L"equip_job_check_4") == 0) return equip_job_check[3];
			if (wcscmp(fieldName, L"equip_job_check_5") == 0) return equip_job_check[4];
			if (wcscmp(fieldName, L"equip_sex") == 0) return equip_sex;
			if (wcscmp(fieldName, L"equip_race") == 0) return equip_race;
			if (wcscmp(fieldName, L"equip_type") == 0) return equip_type;
			if (wcscmp(fieldName, L"equip_solo_duel_grade") == 0) return equip_solo_duel_grade;
			if (wcscmp(fieldName, L"equip_team_duel_grade") == 0) return equip_team_duel_grade;
			if (wcscmp(fieldName, L"item_grade") == 0) return item_grade;
			if (wcscmp(fieldName, L"legend_grade_background_particle_type") == 0) return legend_grade_background_particle_type;
			if (wcscmp(fieldName, L"init_durability") == 0) return init_durability;
			if (wcscmp(fieldName, L"max_durability") == 0) return max_durability;
			if (wcscmp(fieldName, L"repair_money_cost") == 0) return repair_money_cost;
			if (wcscmp(fieldName, L"use_global_recycle_group") == 0) return use_global_recycle_group;
			if (wcscmp(fieldName, L"use_global_recycle_group_duration") == 0) return use_global_recycle_group_duration;
			if (wcscmp(fieldName, L"use_recycle_group") == 0) return use_recycle_group;
			if (wcscmp(fieldName, L"use_recycle_group_id") == 0) return use_recycle_group_id;
			if (wcscmp(fieldName, L"use_recycle_group_duration") == 0) return use_recycle_group_duration;
			if (wcscmp(fieldName, L"decompose_reward_by_consume_index") == 0) return decompose_reward_by_consume_index;
			if (wcscmp(fieldName, L"decompose_reward") == 0) return decompose_reward;
			if (wcscmp(fieldName, L"decompose_reward_1") == 0) return decompose_reward[0];
			if (wcscmp(fieldName, L"decompose_reward_2") == 0) return decompose_reward[1];
			if (wcscmp(fieldName, L"decompose_reward_3") == 0) return decompose_reward[2];
			if (wcscmp(fieldName, L"decompose_reward_4") == 0) return decompose_reward[3];
			if (wcscmp(fieldName, L"decompose_reward_5") == 0) return decompose_reward[4];
			if (wcscmp(fieldName, L"decompose_reward_6") == 0) return decompose_reward[5];
			if (wcscmp(fieldName, L"decompose_reward_7") == 0) return decompose_reward[6];
			if (wcscmp(fieldName, L"decompose_reward_total_count") == 0) return decompose_reward_total_count;
			if (wcscmp(fieldName, L"decompose_event_reward") == 0) return decompose_event_reward;
			if (wcscmp(fieldName, L"decompose_job_reward_blade_master") == 0) return decompose_job_reward_blade_master;
			if (wcscmp(fieldName, L"decompose_job_reward_kung_fu_fighter") == 0) return decompose_job_reward_kung_fu_fighter;
			if (wcscmp(fieldName, L"decompose_job_reward_force_master") == 0) return decompose_job_reward_force_master;
			if (wcscmp(fieldName, L"decompose_job_reward_destroyer") == 0) return decompose_job_reward_destroyer;
			if (wcscmp(fieldName, L"decompose_job_reward_summoner") == 0) return decompose_job_reward_summoner;
			if (wcscmp(fieldName, L"decompose_job_reward_assassin") == 0) return decompose_job_reward_assassin;
			if (wcscmp(fieldName, L"decompose_job_reward_sword_master") == 0) return decompose_job_reward_sword_master;
			if (wcscmp(fieldName, L"decompose_job_reward_warlock") == 0) return decompose_job_reward_warlock;
			if (wcscmp(fieldName, L"decompose_job_reward_soul_fighter") == 0) return decompose_job_reward_soul_fighter;
			if (wcscmp(fieldName, L"decompose_job_reward_shooter") == 0) return decompose_job_reward_shooter;
			if (wcscmp(fieldName, L"decompose_job_reward_warrior") == 0) return decompose_job_reward_warrior;
			if (wcscmp(fieldName, L"decompose_job_reward_archer") == 0) return decompose_job_reward_archer;
			if (wcscmp(fieldName, L"decompose_job_reward_spear_master") == 0) return decompose_job_reward_spear_master;
			if (wcscmp(fieldName, L"decompose_job_reward_thunderer") == 0) return decompose_job_reward_thunderer;
			if (wcscmp(fieldName, L"decompose_job_reward_dual_blader") == 0) return decompose_job_reward_dual_blader;
			if (wcscmp(fieldName, L"decompose_job_reward_bard") == 0) return decompose_job_reward_bard;
			if (wcscmp(fieldName, L"decompose_max") == 0) return decompose_max;
			if (wcscmp(fieldName, L"decompose_money_cost") == 0) return decompose_money_cost;
			if (wcscmp(fieldName, L"decompose_by_item2") == 0) return decompose_by_item2;
			if (wcscmp(fieldName, L"decompose_by_item2_1") == 0) return decompose_by_item2[0];
			if (wcscmp(fieldName, L"decompose_by_item2_2") == 0) return decompose_by_item2[1];
			if (wcscmp(fieldName, L"decompose_by_item2_3") == 0) return decompose_by_item2[2];
			if (wcscmp(fieldName, L"decompose_by_item2_4") == 0) return decompose_by_item2[3];
			if (wcscmp(fieldName, L"decompose_by_item2_5") == 0) return decompose_by_item2[4];
			if (wcscmp(fieldName, L"decompose_by_item2_6") == 0) return decompose_by_item2[5];
			if (wcscmp(fieldName, L"decompose_by_item2_7") == 0) return decompose_by_item2[6];
			if (wcscmp(fieldName, L"decompose_by_item2_stack_count") == 0) return decompose_by_item2_stack_count;
			if (wcscmp(fieldName, L"decompose_by_item2_stack_count_1") == 0) return decompose_by_item2_stack_count[0];
			if (wcscmp(fieldName, L"decompose_by_item2_stack_count_2") == 0) return decompose_by_item2_stack_count[1];
			if (wcscmp(fieldName, L"decompose_by_item2_stack_count_3") == 0) return decompose_by_item2_stack_count[2];
			if (wcscmp(fieldName, L"decompose_by_item2_stack_count_4") == 0) return decompose_by_item2_stack_count[3];
			if (wcscmp(fieldName, L"decompose_by_item2_stack_count_5") == 0) return decompose_by_item2_stack_count[4];
			if (wcscmp(fieldName, L"decompose_by_item2_stack_count_6") == 0) return decompose_by_item2_stack_count[5];
			if (wcscmp(fieldName, L"decompose_by_item2_stack_count_7") == 0) return decompose_by_item2_stack_count[6];
			if (wcscmp(fieldName, L"decompose_by_item2_total_count") == 0) return decompose_by_item2_total_count;
			if (wcscmp(fieldName, L"job_decompose_by_item2") == 0) return job_decompose_by_item2;
			if (wcscmp(fieldName, L"job_decompose_by_item2_1") == 0) return job_decompose_by_item2[0];
			if (wcscmp(fieldName, L"job_decompose_by_item2_2") == 0) return job_decompose_by_item2[1];
			if (wcscmp(fieldName, L"job_decompose_by_item2_3") == 0) return job_decompose_by_item2[2];
			if (wcscmp(fieldName, L"job_decompose_by_item2_4") == 0) return job_decompose_by_item2[3];
			if (wcscmp(fieldName, L"job_decompose_by_item2_5") == 0) return job_decompose_by_item2[4];
			if (wcscmp(fieldName, L"job_decompose_by_item2_6") == 0) return job_decompose_by_item2[5];
			if (wcscmp(fieldName, L"job_decompose_by_item2_7") == 0) return job_decompose_by_item2[6];
			if (wcscmp(fieldName, L"job_decompose_by_item2_stack_count") == 0) return job_decompose_by_item2_stack_count;
			if (wcscmp(fieldName, L"job_decompose_by_item2_stack_count_1") == 0) return job_decompose_by_item2_stack_count[0];
			if (wcscmp(fieldName, L"job_decompose_by_item2_stack_count_2") == 0) return job_decompose_by_item2_stack_count[1];
			if (wcscmp(fieldName, L"job_decompose_by_item2_stack_count_3") == 0) return job_decompose_by_item2_stack_count[2];
			if (wcscmp(fieldName, L"job_decompose_by_item2_stack_count_4") == 0) return job_decompose_by_item2_stack_count[3];
			if (wcscmp(fieldName, L"job_decompose_by_item2_stack_count_5") == 0) return job_decompose_by_item2_stack_count[4];
			if (wcscmp(fieldName, L"job_decompose_by_item2_stack_count_6") == 0) return job_decompose_by_item2_stack_count[5];
			if (wcscmp(fieldName, L"job_decompose_by_item2_stack_count_7") == 0) return job_decompose_by_item2_stack_count[6];
			if (wcscmp(fieldName, L"job_decompose_by_item2_total_count") == 0) return job_decompose_by_item2_total_count;
			if (wcscmp(fieldName, L"set_item") == 0) return set_item;
			if (wcscmp(fieldName, L"faction") == 0) return faction;
			if (wcscmp(fieldName, L"equip_faction") == 0) return equip_faction;
			if (wcscmp(fieldName, L"equip_faction_level") == 0) return equip_faction_level;
			if (wcscmp(fieldName, L"new_product") == 0) return new_product;
			if (wcscmp(fieldName, L"hot_product") == 0) return hot_product;
			if (wcscmp(fieldName, L"pouch_appearance_priority") == 0) return pouch_appearance_priority;
			if (wcscmp(fieldName, L"pouch_appearance") == 0) return pouch_appearance;
			if (wcscmp(fieldName, L"seal_consume_item") == 0) return seal_consume_item;
			if (wcscmp(fieldName, L"seal_consume_item_1") == 0) return seal_consume_item[0];
			if (wcscmp(fieldName, L"seal_consume_item_2") == 0) return seal_consume_item[1];
			if (wcscmp(fieldName, L"seal_consume_item_count") == 0) return seal_consume_item_count;
			if (wcscmp(fieldName, L"seal_consume_item_count_1") == 0) return seal_consume_item_count[0];
			if (wcscmp(fieldName, L"seal_consume_item_count_2") == 0) return seal_consume_item_count[1];
			if (wcscmp(fieldName, L"seal_acquire_item") == 0) return seal_acquire_item;
			if (wcscmp(fieldName, L"seal_keep_level") == 0) return seal_keep_level;
			if (wcscmp(fieldName, L"forwarding_types") == 0) return forwarding_types;
			if (wcscmp(fieldName, L"forwarding_types_1") == 0) return forwarding_types[0];
			if (wcscmp(fieldName, L"forwarding_types_2") == 0) return forwarding_types[1];
			if (wcscmp(fieldName, L"forwarding_types_3") == 0) return forwarding_types[2];
			if (wcscmp(fieldName, L"forwarding_types_4") == 0) return forwarding_types[3];
			if (wcscmp(fieldName, L"forwarding_types_5") == 0) return forwarding_types[4];
			if (wcscmp(fieldName, L"forwarding_types_6") == 0) return forwarding_types[5];
			if (wcscmp(fieldName, L"forwarding_types_7") == 0) return forwarding_types[6];
			if (wcscmp(fieldName, L"forwarding_types_8") == 0) return forwarding_types[7];
			if (wcscmp(fieldName, L"forwarding_types_9") == 0) return forwarding_types[8];
			if (wcscmp(fieldName, L"forwarding_types_10") == 0) return forwarding_types[9];
			if (wcscmp(fieldName, L"forwarding_types_11") == 0) return forwarding_types[10];
			if (wcscmp(fieldName, L"forwarding_types_12") == 0) return forwarding_types[11];
			if (wcscmp(fieldName, L"forwarding_types_13") == 0) return forwarding_types[12];
			if (wcscmp(fieldName, L"forwarding_types_14") == 0) return forwarding_types[13];
			if (wcscmp(fieldName, L"forwarding_types_15") == 0) return forwarding_types[14];
			if (wcscmp(fieldName, L"forwarding_types_16") == 0) return forwarding_types[15];
			if (wcscmp(fieldName, L"forwarding_types_17") == 0) return forwarding_types[16];
			if (wcscmp(fieldName, L"forwarding_types_18") == 0) return forwarding_types[17];
			if (wcscmp(fieldName, L"forwarding_types_19") == 0) return forwarding_types[18];
			if (wcscmp(fieldName, L"forwarding_types_20") == 0) return forwarding_types[19];
			if (wcscmp(fieldName, L"forwarding_types_21") == 0) return forwarding_types[20];
			if (wcscmp(fieldName, L"forwarding_types_22") == 0) return forwarding_types[21];
			if (wcscmp(fieldName, L"forwarding_types_23") == 0) return forwarding_types[22];
			if (wcscmp(fieldName, L"forwarding_types_24") == 0) return forwarding_types[23];
			if (wcscmp(fieldName, L"forwarding_types_25") == 0) return forwarding_types[24];
			if (wcscmp(fieldName, L"forwarding_types_26") == 0) return forwarding_types[25];
			if (wcscmp(fieldName, L"forwarding_types_27") == 0) return forwarding_types[26];
			if (wcscmp(fieldName, L"forwarding_types_28") == 0) return forwarding_types[27];
			if (wcscmp(fieldName, L"forwarding_types_29") == 0) return forwarding_types[28];
			if (wcscmp(fieldName, L"forwarding_types_30") == 0) return forwarding_types[29];
			if (wcscmp(fieldName, L"forwarding_types_31") == 0) return forwarding_types[30];
			if (wcscmp(fieldName, L"forwarding_types_32") == 0) return forwarding_types[31];
			if (wcscmp(fieldName, L"forwarding_types_33") == 0) return forwarding_types[32];
			if (wcscmp(fieldName, L"forwarding_types_34") == 0) return forwarding_types[33];
			if (wcscmp(fieldName, L"forwarding_types_35") == 0) return forwarding_types[34];
			if (wcscmp(fieldName, L"forwarding_types_36") == 0) return forwarding_types[35];
			if (wcscmp(fieldName, L"forwarding_types_37") == 0) return forwarding_types[36];
			if (wcscmp(fieldName, L"forwarding_types_38") == 0) return forwarding_types[37];
			if (wcscmp(fieldName, L"forwarding_types_39") == 0) return forwarding_types[38];
			if (wcscmp(fieldName, L"forwarding_types_40") == 0) return forwarding_types[39];
			if (wcscmp(fieldName, L"forwarding_types_41") == 0) return forwarding_types[40];
			if (wcscmp(fieldName, L"forwarding_types_42") == 0) return forwarding_types[41];
			if (wcscmp(fieldName, L"forwarding_types_43") == 0) return forwarding_types[42];
			if (wcscmp(fieldName, L"forwarding_types_44") == 0) return forwarding_types[43];
			if (wcscmp(fieldName, L"forwarding_types_45") == 0) return forwarding_types[44];
			if (wcscmp(fieldName, L"forwarding_types_46") == 0) return forwarding_types[45];
			if (wcscmp(fieldName, L"forwarding_types_47") == 0) return forwarding_types[46];
			if (wcscmp(fieldName, L"forwarding_types_48") == 0) return forwarding_types[47];
			if (wcscmp(fieldName, L"forwarding_types_49") == 0) return forwarding_types[48];
			if (wcscmp(fieldName, L"forwarding_types_50") == 0) return forwarding_types[49];
			if (wcscmp(fieldName, L"forwarding_types_51") == 0) return forwarding_types[50];
			if (wcscmp(fieldName, L"forwarding_types_52") == 0) return forwarding_types[51];
			if (wcscmp(fieldName, L"forwarding_types_53") == 0) return forwarding_types[52];
			if (wcscmp(fieldName, L"forwarding_types_54") == 0) return forwarding_types[53];
			if (wcscmp(fieldName, L"forwarding_types_55") == 0) return forwarding_types[54];
			if (wcscmp(fieldName, L"forwarding_types_56") == 0) return forwarding_types[55];
			if (wcscmp(fieldName, L"forwarding_types_57") == 0) return forwarding_types[56];
			if (wcscmp(fieldName, L"forwarding_types_58") == 0) return forwarding_types[57];
			if (wcscmp(fieldName, L"forwarding_types_59") == 0) return forwarding_types[58];
			if (wcscmp(fieldName, L"forwarding_types_60") == 0) return forwarding_types[59];
			if (wcscmp(fieldName, L"forwarding_types_61") == 0) return forwarding_types[60];
			if (wcscmp(fieldName, L"forwarding_types_62") == 0) return forwarding_types[61];
			if (wcscmp(fieldName, L"forwarding_types_63") == 0) return forwarding_types[62];
			if (wcscmp(fieldName, L"forwarding_types_64") == 0) return forwarding_types[63];
			if (wcscmp(fieldName, L"quests") == 0) return quests;
			if (wcscmp(fieldName, L"quests_1") == 0) return quests[0];
			if (wcscmp(fieldName, L"quests_2") == 0) return quests[1];
			if (wcscmp(fieldName, L"quests_3") == 0) return quests[2];
			if (wcscmp(fieldName, L"quests_4") == 0) return quests[3];
			if (wcscmp(fieldName, L"quests_5") == 0) return quests[4];
			if (wcscmp(fieldName, L"quests_6") == 0) return quests[5];
			if (wcscmp(fieldName, L"quests_7") == 0) return quests[6];
			if (wcscmp(fieldName, L"quests_8") == 0) return quests[7];
			if (wcscmp(fieldName, L"quests_9") == 0) return quests[8];
			if (wcscmp(fieldName, L"quests_10") == 0) return quests[9];
			if (wcscmp(fieldName, L"quests_11") == 0) return quests[10];
			if (wcscmp(fieldName, L"quests_12") == 0) return quests[11];
			if (wcscmp(fieldName, L"quests_13") == 0) return quests[12];
			if (wcscmp(fieldName, L"quests_14") == 0) return quests[13];
			if (wcscmp(fieldName, L"quests_15") == 0) return quests[14];
			if (wcscmp(fieldName, L"quests_16") == 0) return quests[15];
			if (wcscmp(fieldName, L"quests_17") == 0) return quests[16];
			if (wcscmp(fieldName, L"quests_18") == 0) return quests[17];
			if (wcscmp(fieldName, L"quests_19") == 0) return quests[18];
			if (wcscmp(fieldName, L"quests_20") == 0) return quests[19];
			if (wcscmp(fieldName, L"quests_21") == 0) return quests[20];
			if (wcscmp(fieldName, L"quests_22") == 0) return quests[21];
			if (wcscmp(fieldName, L"quests_23") == 0) return quests[22];
			if (wcscmp(fieldName, L"quests_24") == 0) return quests[23];
			if (wcscmp(fieldName, L"quests_25") == 0) return quests[24];
			if (wcscmp(fieldName, L"quests_26") == 0) return quests[25];
			if (wcscmp(fieldName, L"quests_27") == 0) return quests[26];
			if (wcscmp(fieldName, L"quests_28") == 0) return quests[27];
			if (wcscmp(fieldName, L"quests_29") == 0) return quests[28];
			if (wcscmp(fieldName, L"quests_30") == 0) return quests[29];
			if (wcscmp(fieldName, L"quests_31") == 0) return quests[30];
			if (wcscmp(fieldName, L"quests_32") == 0) return quests[31];
			if (wcscmp(fieldName, L"quests_33") == 0) return quests[32];
			if (wcscmp(fieldName, L"quests_34") == 0) return quests[33];
			if (wcscmp(fieldName, L"quests_35") == 0) return quests[34];
			if (wcscmp(fieldName, L"quests_36") == 0) return quests[35];
			if (wcscmp(fieldName, L"quests_37") == 0) return quests[36];
			if (wcscmp(fieldName, L"quests_38") == 0) return quests[37];
			if (wcscmp(fieldName, L"quests_39") == 0) return quests[38];
			if (wcscmp(fieldName, L"quests_40") == 0) return quests[39];
			if (wcscmp(fieldName, L"quests_41") == 0) return quests[40];
			if (wcscmp(fieldName, L"quests_42") == 0) return quests[41];
			if (wcscmp(fieldName, L"quests_43") == 0) return quests[42];
			if (wcscmp(fieldName, L"quests_44") == 0) return quests[43];
			if (wcscmp(fieldName, L"quests_45") == 0) return quests[44];
			if (wcscmp(fieldName, L"quests_46") == 0) return quests[45];
			if (wcscmp(fieldName, L"quests_47") == 0) return quests[46];
			if (wcscmp(fieldName, L"quests_48") == 0) return quests[47];
			if (wcscmp(fieldName, L"quests_49") == 0) return quests[48];
			if (wcscmp(fieldName, L"quests_50") == 0) return quests[49];
			if (wcscmp(fieldName, L"quests_51") == 0) return quests[50];
			if (wcscmp(fieldName, L"quests_52") == 0) return quests[51];
			if (wcscmp(fieldName, L"quests_53") == 0) return quests[52];
			if (wcscmp(fieldName, L"quests_54") == 0) return quests[53];
			if (wcscmp(fieldName, L"quests_55") == 0) return quests[54];
			if (wcscmp(fieldName, L"quests_56") == 0) return quests[55];
			if (wcscmp(fieldName, L"quests_57") == 0) return quests[56];
			if (wcscmp(fieldName, L"quests_58") == 0) return quests[57];
			if (wcscmp(fieldName, L"quests_59") == 0) return quests[58];
			if (wcscmp(fieldName, L"quests_60") == 0) return quests[59];
			if (wcscmp(fieldName, L"quests_61") == 0) return quests[60];
			if (wcscmp(fieldName, L"quests_62") == 0) return quests[61];
			if (wcscmp(fieldName, L"quests_63") == 0) return quests[62];
			if (wcscmp(fieldName, L"quests_64") == 0) return quests[63];
			if (wcscmp(fieldName, L"missions") == 0) return missions;
			if (wcscmp(fieldName, L"missions_1") == 0) return missions[0];
			if (wcscmp(fieldName, L"missions_2") == 0) return missions[1];
			if (wcscmp(fieldName, L"missions_3") == 0) return missions[2];
			if (wcscmp(fieldName, L"missions_4") == 0) return missions[3];
			if (wcscmp(fieldName, L"missions_5") == 0) return missions[4];
			if (wcscmp(fieldName, L"missions_6") == 0) return missions[5];
			if (wcscmp(fieldName, L"missions_7") == 0) return missions[6];
			if (wcscmp(fieldName, L"missions_8") == 0) return missions[7];
			if (wcscmp(fieldName, L"missions_9") == 0) return missions[8];
			if (wcscmp(fieldName, L"missions_10") == 0) return missions[9];
			if (wcscmp(fieldName, L"missions_11") == 0) return missions[10];
			if (wcscmp(fieldName, L"missions_12") == 0) return missions[11];
			if (wcscmp(fieldName, L"missions_13") == 0) return missions[12];
			if (wcscmp(fieldName, L"missions_14") == 0) return missions[13];
			if (wcscmp(fieldName, L"missions_15") == 0) return missions[14];
			if (wcscmp(fieldName, L"missions_16") == 0) return missions[15];
			if (wcscmp(fieldName, L"missions_17") == 0) return missions[16];
			if (wcscmp(fieldName, L"missions_18") == 0) return missions[17];
			if (wcscmp(fieldName, L"missions_19") == 0) return missions[18];
			if (wcscmp(fieldName, L"missions_20") == 0) return missions[19];
			if (wcscmp(fieldName, L"missions_21") == 0) return missions[20];
			if (wcscmp(fieldName, L"missions_22") == 0) return missions[21];
			if (wcscmp(fieldName, L"missions_23") == 0) return missions[22];
			if (wcscmp(fieldName, L"missions_24") == 0) return missions[23];
			if (wcscmp(fieldName, L"missions_25") == 0) return missions[24];
			if (wcscmp(fieldName, L"missions_26") == 0) return missions[25];
			if (wcscmp(fieldName, L"missions_27") == 0) return missions[26];
			if (wcscmp(fieldName, L"missions_28") == 0) return missions[27];
			if (wcscmp(fieldName, L"missions_29") == 0) return missions[28];
			if (wcscmp(fieldName, L"missions_30") == 0) return missions[29];
			if (wcscmp(fieldName, L"missions_31") == 0) return missions[30];
			if (wcscmp(fieldName, L"missions_32") == 0) return missions[31];
			if (wcscmp(fieldName, L"missions_33") == 0) return missions[32];
			if (wcscmp(fieldName, L"missions_34") == 0) return missions[33];
			if (wcscmp(fieldName, L"missions_35") == 0) return missions[34];
			if (wcscmp(fieldName, L"missions_36") == 0) return missions[35];
			if (wcscmp(fieldName, L"missions_37") == 0) return missions[36];
			if (wcscmp(fieldName, L"missions_38") == 0) return missions[37];
			if (wcscmp(fieldName, L"missions_39") == 0) return missions[38];
			if (wcscmp(fieldName, L"missions_40") == 0) return missions[39];
			if (wcscmp(fieldName, L"missions_41") == 0) return missions[40];
			if (wcscmp(fieldName, L"missions_42") == 0) return missions[41];
			if (wcscmp(fieldName, L"missions_43") == 0) return missions[42];
			if (wcscmp(fieldName, L"missions_44") == 0) return missions[43];
			if (wcscmp(fieldName, L"missions_45") == 0) return missions[44];
			if (wcscmp(fieldName, L"missions_46") == 0) return missions[45];
			if (wcscmp(fieldName, L"missions_47") == 0) return missions[46];
			if (wcscmp(fieldName, L"missions_48") == 0) return missions[47];
			if (wcscmp(fieldName, L"missions_49") == 0) return missions[48];
			if (wcscmp(fieldName, L"missions_50") == 0) return missions[49];
			if (wcscmp(fieldName, L"missions_51") == 0) return missions[50];
			if (wcscmp(fieldName, L"missions_52") == 0) return missions[51];
			if (wcscmp(fieldName, L"missions_53") == 0) return missions[52];
			if (wcscmp(fieldName, L"missions_54") == 0) return missions[53];
			if (wcscmp(fieldName, L"missions_55") == 0) return missions[54];
			if (wcscmp(fieldName, L"missions_56") == 0) return missions[55];
			if (wcscmp(fieldName, L"missions_57") == 0) return missions[56];
			if (wcscmp(fieldName, L"missions_58") == 0) return missions[57];
			if (wcscmp(fieldName, L"missions_59") == 0) return missions[58];
			if (wcscmp(fieldName, L"missions_60") == 0) return missions[59];
			if (wcscmp(fieldName, L"missions_61") == 0) return missions[60];
			if (wcscmp(fieldName, L"missions_62") == 0) return missions[61];
			if (wcscmp(fieldName, L"missions_63") == 0) return missions[62];
			if (wcscmp(fieldName, L"missions_64") == 0) return missions[63];
			if (wcscmp(fieldName, L"cases") == 0) return cases;
			if (wcscmp(fieldName, L"cases_1") == 0) return cases[0];
			if (wcscmp(fieldName, L"cases_2") == 0) return cases[1];
			if (wcscmp(fieldName, L"cases_3") == 0) return cases[2];
			if (wcscmp(fieldName, L"cases_4") == 0) return cases[3];
			if (wcscmp(fieldName, L"cases_5") == 0) return cases[4];
			if (wcscmp(fieldName, L"cases_6") == 0) return cases[5];
			if (wcscmp(fieldName, L"cases_7") == 0) return cases[6];
			if (wcscmp(fieldName, L"cases_8") == 0) return cases[7];
			if (wcscmp(fieldName, L"cases_9") == 0) return cases[8];
			if (wcscmp(fieldName, L"cases_10") == 0) return cases[9];
			if (wcscmp(fieldName, L"cases_11") == 0) return cases[10];
			if (wcscmp(fieldName, L"cases_12") == 0) return cases[11];
			if (wcscmp(fieldName, L"cases_13") == 0) return cases[12];
			if (wcscmp(fieldName, L"cases_14") == 0) return cases[13];
			if (wcscmp(fieldName, L"cases_15") == 0) return cases[14];
			if (wcscmp(fieldName, L"cases_16") == 0) return cases[15];
			if (wcscmp(fieldName, L"cases_17") == 0) return cases[16];
			if (wcscmp(fieldName, L"cases_18") == 0) return cases[17];
			if (wcscmp(fieldName, L"cases_19") == 0) return cases[18];
			if (wcscmp(fieldName, L"cases_20") == 0) return cases[19];
			if (wcscmp(fieldName, L"cases_21") == 0) return cases[20];
			if (wcscmp(fieldName, L"cases_22") == 0) return cases[21];
			if (wcscmp(fieldName, L"cases_23") == 0) return cases[22];
			if (wcscmp(fieldName, L"cases_24") == 0) return cases[23];
			if (wcscmp(fieldName, L"cases_25") == 0) return cases[24];
			if (wcscmp(fieldName, L"cases_26") == 0) return cases[25];
			if (wcscmp(fieldName, L"cases_27") == 0) return cases[26];
			if (wcscmp(fieldName, L"cases_28") == 0) return cases[27];
			if (wcscmp(fieldName, L"cases_29") == 0) return cases[28];
			if (wcscmp(fieldName, L"cases_30") == 0) return cases[29];
			if (wcscmp(fieldName, L"cases_31") == 0) return cases[30];
			if (wcscmp(fieldName, L"cases_32") == 0) return cases[31];
			if (wcscmp(fieldName, L"cases_33") == 0) return cases[32];
			if (wcscmp(fieldName, L"cases_34") == 0) return cases[33];
			if (wcscmp(fieldName, L"cases_35") == 0) return cases[34];
			if (wcscmp(fieldName, L"cases_36") == 0) return cases[35];
			if (wcscmp(fieldName, L"cases_37") == 0) return cases[36];
			if (wcscmp(fieldName, L"cases_38") == 0) return cases[37];
			if (wcscmp(fieldName, L"cases_39") == 0) return cases[38];
			if (wcscmp(fieldName, L"cases_40") == 0) return cases[39];
			if (wcscmp(fieldName, L"cases_41") == 0) return cases[40];
			if (wcscmp(fieldName, L"cases_42") == 0) return cases[41];
			if (wcscmp(fieldName, L"cases_43") == 0) return cases[42];
			if (wcscmp(fieldName, L"cases_44") == 0) return cases[43];
			if (wcscmp(fieldName, L"cases_45") == 0) return cases[44];
			if (wcscmp(fieldName, L"cases_46") == 0) return cases[45];
			if (wcscmp(fieldName, L"cases_47") == 0) return cases[46];
			if (wcscmp(fieldName, L"cases_48") == 0) return cases[47];
			if (wcscmp(fieldName, L"cases_49") == 0) return cases[48];
			if (wcscmp(fieldName, L"cases_50") == 0) return cases[49];
			if (wcscmp(fieldName, L"cases_51") == 0) return cases[50];
			if (wcscmp(fieldName, L"cases_52") == 0) return cases[51];
			if (wcscmp(fieldName, L"cases_53") == 0) return cases[52];
			if (wcscmp(fieldName, L"cases_54") == 0) return cases[53];
			if (wcscmp(fieldName, L"cases_55") == 0) return cases[54];
			if (wcscmp(fieldName, L"cases_56") == 0) return cases[55];
			if (wcscmp(fieldName, L"cases_57") == 0) return cases[56];
			if (wcscmp(fieldName, L"cases_58") == 0) return cases[57];
			if (wcscmp(fieldName, L"cases_59") == 0) return cases[58];
			if (wcscmp(fieldName, L"cases_60") == 0) return cases[59];
			if (wcscmp(fieldName, L"cases_61") == 0) return cases[60];
			if (wcscmp(fieldName, L"cases_62") == 0) return cases[61];
			if (wcscmp(fieldName, L"cases_63") == 0) return cases[62];
			if (wcscmp(fieldName, L"cases_64") == 0) return cases[63];
			if (wcscmp(fieldName, L"case_subtypes") == 0) return case_subtypes;
			if (wcscmp(fieldName, L"case_subtypes_1") == 0) return case_subtypes[0];
			if (wcscmp(fieldName, L"case_subtypes_2") == 0) return case_subtypes[1];
			if (wcscmp(fieldName, L"case_subtypes_3") == 0) return case_subtypes[2];
			if (wcscmp(fieldName, L"case_subtypes_4") == 0) return case_subtypes[3];
			if (wcscmp(fieldName, L"case_subtypes_5") == 0) return case_subtypes[4];
			if (wcscmp(fieldName, L"case_subtypes_6") == 0) return case_subtypes[5];
			if (wcscmp(fieldName, L"case_subtypes_7") == 0) return case_subtypes[6];
			if (wcscmp(fieldName, L"case_subtypes_8") == 0) return case_subtypes[7];
			if (wcscmp(fieldName, L"case_subtypes_9") == 0) return case_subtypes[8];
			if (wcscmp(fieldName, L"case_subtypes_10") == 0) return case_subtypes[9];
			if (wcscmp(fieldName, L"case_subtypes_11") == 0) return case_subtypes[10];
			if (wcscmp(fieldName, L"case_subtypes_12") == 0) return case_subtypes[11];
			if (wcscmp(fieldName, L"case_subtypes_13") == 0) return case_subtypes[12];
			if (wcscmp(fieldName, L"case_subtypes_14") == 0) return case_subtypes[13];
			if (wcscmp(fieldName, L"case_subtypes_15") == 0) return case_subtypes[14];
			if (wcscmp(fieldName, L"case_subtypes_16") == 0) return case_subtypes[15];
			if (wcscmp(fieldName, L"case_subtypes_17") == 0) return case_subtypes[16];
			if (wcscmp(fieldName, L"case_subtypes_18") == 0) return case_subtypes[17];
			if (wcscmp(fieldName, L"case_subtypes_19") == 0) return case_subtypes[18];
			if (wcscmp(fieldName, L"case_subtypes_20") == 0) return case_subtypes[19];
			if (wcscmp(fieldName, L"case_subtypes_21") == 0) return case_subtypes[20];
			if (wcscmp(fieldName, L"case_subtypes_22") == 0) return case_subtypes[21];
			if (wcscmp(fieldName, L"case_subtypes_23") == 0) return case_subtypes[22];
			if (wcscmp(fieldName, L"case_subtypes_24") == 0) return case_subtypes[23];
			if (wcscmp(fieldName, L"case_subtypes_25") == 0) return case_subtypes[24];
			if (wcscmp(fieldName, L"case_subtypes_26") == 0) return case_subtypes[25];
			if (wcscmp(fieldName, L"case_subtypes_27") == 0) return case_subtypes[26];
			if (wcscmp(fieldName, L"case_subtypes_28") == 0) return case_subtypes[27];
			if (wcscmp(fieldName, L"case_subtypes_29") == 0) return case_subtypes[28];
			if (wcscmp(fieldName, L"case_subtypes_30") == 0) return case_subtypes[29];
			if (wcscmp(fieldName, L"case_subtypes_31") == 0) return case_subtypes[30];
			if (wcscmp(fieldName, L"case_subtypes_32") == 0) return case_subtypes[31];
			if (wcscmp(fieldName, L"case_subtypes_33") == 0) return case_subtypes[32];
			if (wcscmp(fieldName, L"case_subtypes_34") == 0) return case_subtypes[33];
			if (wcscmp(fieldName, L"case_subtypes_35") == 0) return case_subtypes[34];
			if (wcscmp(fieldName, L"case_subtypes_36") == 0) return case_subtypes[35];
			if (wcscmp(fieldName, L"case_subtypes_37") == 0) return case_subtypes[36];
			if (wcscmp(fieldName, L"case_subtypes_38") == 0) return case_subtypes[37];
			if (wcscmp(fieldName, L"case_subtypes_39") == 0) return case_subtypes[38];
			if (wcscmp(fieldName, L"case_subtypes_40") == 0) return case_subtypes[39];
			if (wcscmp(fieldName, L"case_subtypes_41") == 0) return case_subtypes[40];
			if (wcscmp(fieldName, L"case_subtypes_42") == 0) return case_subtypes[41];
			if (wcscmp(fieldName, L"case_subtypes_43") == 0) return case_subtypes[42];
			if (wcscmp(fieldName, L"case_subtypes_44") == 0) return case_subtypes[43];
			if (wcscmp(fieldName, L"case_subtypes_45") == 0) return case_subtypes[44];
			if (wcscmp(fieldName, L"case_subtypes_46") == 0) return case_subtypes[45];
			if (wcscmp(fieldName, L"case_subtypes_47") == 0) return case_subtypes[46];
			if (wcscmp(fieldName, L"case_subtypes_48") == 0) return case_subtypes[47];
			if (wcscmp(fieldName, L"case_subtypes_49") == 0) return case_subtypes[48];
			if (wcscmp(fieldName, L"case_subtypes_50") == 0) return case_subtypes[49];
			if (wcscmp(fieldName, L"case_subtypes_51") == 0) return case_subtypes[50];
			if (wcscmp(fieldName, L"case_subtypes_52") == 0) return case_subtypes[51];
			if (wcscmp(fieldName, L"case_subtypes_53") == 0) return case_subtypes[52];
			if (wcscmp(fieldName, L"case_subtypes_54") == 0) return case_subtypes[53];
			if (wcscmp(fieldName, L"case_subtypes_55") == 0) return case_subtypes[54];
			if (wcscmp(fieldName, L"case_subtypes_56") == 0) return case_subtypes[55];
			if (wcscmp(fieldName, L"case_subtypes_57") == 0) return case_subtypes[56];
			if (wcscmp(fieldName, L"case_subtypes_58") == 0) return case_subtypes[57];
			if (wcscmp(fieldName, L"case_subtypes_59") == 0) return case_subtypes[58];
			if (wcscmp(fieldName, L"case_subtypes_60") == 0) return case_subtypes[59];
			if (wcscmp(fieldName, L"case_subtypes_61") == 0) return case_subtypes[60];
			if (wcscmp(fieldName, L"case_subtypes_62") == 0) return case_subtypes[61];
			if (wcscmp(fieldName, L"case_subtypes_63") == 0) return case_subtypes[62];
			if (wcscmp(fieldName, L"case_subtypes_64") == 0) return case_subtypes[63];
			if (wcscmp(fieldName, L"attack_power_equip_min") == 0) return attack_power_equip_min;
			if (wcscmp(fieldName, L"attack_power_equip_max") == 0) return attack_power_equip_max;
			if (wcscmp(fieldName, L"defend_power_equip_value") == 0) return defend_power_equip_value;
			if (wcscmp(fieldName, L"defend_resist_power_equip_value") == 0) return defend_resist_power_equip_value;
			if (wcscmp(fieldName, L"attack_hit_base_percent") == 0) return attack_hit_base_percent;
			if (wcscmp(fieldName, L"attack_hit_value") == 0) return attack_hit_value;
			if (wcscmp(fieldName, L"attack_hit_value_equip") == 0) return attack_hit_value_equip;
			if (wcscmp(fieldName, L"attack_pierce_base_percent") == 0) return attack_pierce_base_percent;
			if (wcscmp(fieldName, L"attack_parry_pierce_percent") == 0) return attack_parry_pierce_percent;
			if (wcscmp(fieldName, L"attack_pierce_value") == 0) return attack_pierce_value;
			if (wcscmp(fieldName, L"attack_pierce_value_equip") == 0) return attack_pierce_value_equip;
			if (wcscmp(fieldName, L"attack_critical_base_percent") == 0) return attack_critical_base_percent;
			if (wcscmp(fieldName, L"attack_critical_damage_percent") == 0) return attack_critical_damage_percent;
			if (wcscmp(fieldName, L"attack_critical_value") == 0) return attack_critical_value;
			if (wcscmp(fieldName, L"attack_critical_value_equip") == 0) return attack_critical_value_equip;
			if (wcscmp(fieldName, L"attack_critical_damage_value") == 0) return attack_critical_damage_value;
			if (wcscmp(fieldName, L"attack_critical_damage_value_equip") == 0) return attack_critical_damage_value_equip;
			if (wcscmp(fieldName, L"defend_critical_base_percent") == 0) return defend_critical_base_percent;
			if (wcscmp(fieldName, L"defend_critical_damage_percent") == 0) return defend_critical_damage_percent;
			if (wcscmp(fieldName, L"defend_critical_value") == 0) return defend_critical_value;
			if (wcscmp(fieldName, L"defend_critical_value_equip") == 0) return defend_critical_value_equip;
			if (wcscmp(fieldName, L"defend_dodge_base_percent") == 0) return defend_dodge_base_percent;
			if (wcscmp(fieldName, L"defend_dodge_value") == 0) return defend_dodge_value;
			if (wcscmp(fieldName, L"defend_dodge_value_equip") == 0) return defend_dodge_value_equip;
			if (wcscmp(fieldName, L"defend_parry_base_percent") == 0) return defend_parry_base_percent;
			if (wcscmp(fieldName, L"defend_parry_value") == 0) return defend_parry_value;
			if (wcscmp(fieldName, L"defend_parry_value_equip") == 0) return defend_parry_value_equip;
			if (wcscmp(fieldName, L"attack_stiff_duration_base_percent") == 0) return attack_stiff_duration_base_percent;
			if (wcscmp(fieldName, L"attack_stiff_duration_value") == 0) return attack_stiff_duration_value;
			if (wcscmp(fieldName, L"defend_stiff_duration_base_percent") == 0) return defend_stiff_duration_base_percent;
			if (wcscmp(fieldName, L"defend_stiff_duration_value") == 0) return defend_stiff_duration_value;
			if (wcscmp(fieldName, L"cast_duration_base_percent") == 0) return cast_duration_base_percent;
			if (wcscmp(fieldName, L"cast_duration_value") == 0) return cast_duration_value;
			if (wcscmp(fieldName, L"defend_physical_damage_reduce_percent") == 0) return defend_physical_damage_reduce_percent;
			if (wcscmp(fieldName, L"defend_force_damage_reduce_percent") == 0) return defend_force_damage_reduce_percent;
			if (wcscmp(fieldName, L"attack_damage_modify_percent") == 0) return attack_damage_modify_percent;
			if (wcscmp(fieldName, L"attack_damage_modify_diff") == 0) return attack_damage_modify_diff;
			if (wcscmp(fieldName, L"defend_damage_modify_percent") == 0) return defend_damage_modify_percent;
			if (wcscmp(fieldName, L"defend_damage_modify_diff") == 0) return defend_damage_modify_diff;
			if (wcscmp(fieldName, L"max_hp") == 0) return max_hp;
			if (wcscmp(fieldName, L"max_hp_equip") == 0) return max_hp_equip;
			if (wcscmp(fieldName, L"hp_regen") == 0) return hp_regen;
			if (wcscmp(fieldName, L"hp_regen_equip") == 0) return hp_regen_equip;
			if (wcscmp(fieldName, L"hp_regen_combat") == 0) return hp_regen_combat;
			if (wcscmp(fieldName, L"hp_regen_combat_equip") == 0) return hp_regen_combat_equip;
			if (wcscmp(fieldName, L"max_guard_gauge") == 0) return max_guard_gauge;
			if (wcscmp(fieldName, L"max_guard_gauge_equip") == 0) return max_guard_gauge_equip;
			if (wcscmp(fieldName, L"attack_concentrate_value") == 0) return attack_concentrate_value;
			if (wcscmp(fieldName, L"attack_concentrate_value_equip") == 0) return attack_concentrate_value_equip;
			if (wcscmp(fieldName, L"defend_perfect_parry_reduce_percent") == 0) return defend_perfect_parry_reduce_percent;
			if (wcscmp(fieldName, L"defend_counter_reduce_percent") == 0) return defend_counter_reduce_percent;
			if (wcscmp(fieldName, L"attack_attribute_value") == 0) return attack_attribute_value;
			if (wcscmp(fieldName, L"attack_attribute_value_equip") == 0) return attack_attribute_value_equip;
			if (wcscmp(fieldName, L"attack_attribute_base_percent") == 0) return attack_attribute_base_percent;
			if (wcscmp(fieldName, L"pve_boss_level_npc_attack_power_equip_min") == 0) return pve_boss_level_npc_attack_power_equip_min;
			if (wcscmp(fieldName, L"pve_boss_level_npc_attack_power_equip_max") == 0) return pve_boss_level_npc_attack_power_equip_max;
			if (wcscmp(fieldName, L"pve_boss_level_npc_defend_power_equip_value") == 0) return pve_boss_level_npc_defend_power_equip_value;
			if (wcscmp(fieldName, L"pvp_attack_power_equip_min") == 0) return pvp_attack_power_equip_min;
			if (wcscmp(fieldName, L"pvp_attack_power_equip_max") == 0) return pvp_attack_power_equip_max;
			if (wcscmp(fieldName, L"pvp_defend_power_equip_value") == 0) return pvp_defend_power_equip_value;
			if (wcscmp(fieldName, L"r_attack_stiff_duration_equip_value") == 0) return r_attack_stiff_duration_equip_value;
			if (wcscmp(fieldName, L"r_defend_stiff_duration_equip_value") == 0) return r_defend_stiff_duration_equip_value;
			if (wcscmp(fieldName, L"r_aoe_defend_power_value_equip") == 0) return r_aoe_defend_power_value_equip;
			if (wcscmp(fieldName, L"r_heal_power_equip_value") == 0) return r_heal_power_equip_value;
			if (wcscmp(fieldName, L"r_defend_strength_equip_value") == 0) return r_defend_strength_equip_value;
			if (wcscmp(fieldName, L"r_attack_precise_equip_value") == 0) return r_attack_precise_equip_value;
			if (wcscmp(fieldName, L"r_attack_aoe_pierce_value_equip") == 0) return r_attack_aoe_pierce_value_equip;
			if (wcscmp(fieldName, L"r_attack_abnormal_hit_equip_value") == 0) return r_attack_abnormal_hit_equip_value;
			if (wcscmp(fieldName, L"r_defend_abnormal_dodge_equip_value") == 0) return r_defend_abnormal_dodge_equip_value;
			if (wcscmp(fieldName, L"r_support_power_equip_value") == 0) return r_support_power_equip_value;
			if (wcscmp(fieldName, L"r_hypermove_power_equip_value") == 0) return r_hypermove_power_equip_value;
			if (wcscmp(fieldName, L"defend_difficulty_type_damage_reduce_percent") == 0) return defend_difficulty_type_damage_reduce_percent;
			if (wcscmp(fieldName, L"race_type_1_attack_damage_modify_percent") == 0) return race_type_1_attack_damage_modify_percent;
			if (wcscmp(fieldName, L"race_type_2_attack_damage_modify_percent") == 0) return race_type_2_attack_damage_modify_percent;
			if (wcscmp(fieldName, L"race_type_3_attack_damage_modify_percent") == 0) return race_type_3_attack_damage_modify_percent;
			if (wcscmp(fieldName, L"race_type_4_attack_damage_modify_percent") == 0) return race_type_4_attack_damage_modify_percent;
			if (wcscmp(fieldName, L"race_type_5_attack_damage_modify_percent") == 0) return race_type_5_attack_damage_modify_percent;
			if (wcscmp(fieldName, L"race_type_6_attack_damage_modify_percent") == 0) return race_type_6_attack_damage_modify_percent;
			if (wcscmp(fieldName, L"race_type_7_attack_damage_modify_percent") == 0) return race_type_7_attack_damage_modify_percent;
			if (wcscmp(fieldName, L"race_type_1_defend_damage_modify_percent") == 0) return race_type_1_defend_damage_modify_percent;
			if (wcscmp(fieldName, L"race_type_2_defend_damage_modify_percent") == 0) return race_type_2_defend_damage_modify_percent;
			if (wcscmp(fieldName, L"race_type_3_defend_damage_modify_percent") == 0) return race_type_3_defend_damage_modify_percent;
			if (wcscmp(fieldName, L"race_type_4_defend_damage_modify_percent") == 0) return race_type_4_defend_damage_modify_percent;
			if (wcscmp(fieldName, L"race_type_5_defend_damage_modify_percent") == 0) return race_type_5_defend_damage_modify_percent;
			if (wcscmp(fieldName, L"race_type_6_defend_damage_modify_percent") == 0) return race_type_6_defend_damage_modify_percent;
			if (wcscmp(fieldName, L"race_type_7_defend_damage_modify_percent") == 0) return race_type_7_defend_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_1_attack_damage_modify_percent") == 0) return attribute_type_1_attack_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_2_attack_damage_modify_percent") == 0) return attribute_type_2_attack_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_3_attack_damage_modify_percent") == 0) return attribute_type_3_attack_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_4_attack_damage_modify_percent") == 0) return attribute_type_4_attack_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_5_attack_damage_modify_percent") == 0) return attribute_type_5_attack_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_6_attack_damage_modify_percent") == 0) return attribute_type_6_attack_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_7_attack_damage_modify_percent") == 0) return attribute_type_7_attack_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_8_attack_damage_modify_percent") == 0) return attribute_type_8_attack_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_9_attack_damage_modify_percent") == 0) return attribute_type_9_attack_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_10_attack_damage_modify_percent") == 0) return attribute_type_10_attack_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_11_attack_damage_modify_percent") == 0) return attribute_type_11_attack_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_12_attack_damage_modify_percent") == 0) return attribute_type_12_attack_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_1_defend_damage_modify_percent") == 0) return attribute_type_1_defend_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_2_defend_damage_modify_percent") == 0) return attribute_type_2_defend_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_3_defend_damage_modify_percent") == 0) return attribute_type_3_defend_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_4_defend_damage_modify_percent") == 0) return attribute_type_4_defend_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_5_defend_damage_modify_percent") == 0) return attribute_type_5_defend_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_6_defend_damage_modify_percent") == 0) return attribute_type_6_defend_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_7_defend_damage_modify_percent") == 0) return attribute_type_7_defend_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_8_defend_damage_modify_percent") == 0) return attribute_type_8_defend_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_9_defend_damage_modify_percent") == 0) return attribute_type_9_defend_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_10_defend_damage_modify_percent") == 0) return attribute_type_10_defend_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_11_defend_damage_modify_percent") == 0) return attribute_type_11_defend_damage_modify_percent;
			if (wcscmp(fieldName, L"attribute_type_12_defend_damage_modify_percent") == 0) return attribute_type_12_defend_damage_modify_percent;
			if (wcscmp(fieldName, L"defend_critical_damage_value") == 0) return defend_critical_damage_value;
			if (wcscmp(fieldName, L"defend_critical_damage_value_equip") == 0) return defend_critical_damage_value_equip;
			if (wcscmp(fieldName, L"job_ability_1") == 0) return job_ability_1;
			if (wcscmp(fieldName, L"job_ability_2") == 0) return job_ability_2;
			if (wcscmp(fieldName, L"heal_power_base_percent") == 0) return heal_power_base_percent;
			if (wcscmp(fieldName, L"heal_power_value") == 0) return heal_power_value;
			if (wcscmp(fieldName, L"heal_power_diff") == 0) return heal_power_diff;
			if (wcscmp(fieldName, L"aoe_defend_base_percent") == 0) return aoe_defend_base_percent;
			if (wcscmp(fieldName, L"aoe_defend_power_value") == 0) return aoe_defend_power_value;
			if (wcscmp(fieldName, L"abnormal_attack_base_percent") == 0) return abnormal_attack_base_percent;
			if (wcscmp(fieldName, L"abnormal_attack_power_value") == 0) return abnormal_attack_power_value;
			if (wcscmp(fieldName, L"abnormal_attack_power_value_equip") == 0) return abnormal_attack_power_value_equip;
			if (wcscmp(fieldName, L"abnormal_defend_base_percent") == 0) return abnormal_defend_base_percent;
			if (wcscmp(fieldName, L"abnormal_defend_power_value") == 0) return abnormal_defend_power_value;
			if (wcscmp(fieldName, L"hate_power_equip_value") == 0) return hate_power_equip_value;
			if (wcscmp(fieldName, L"additional_exp_diff_by_kill") == 0) return additional_exp_diff_by_kill;
			if (wcscmp(fieldName, L"additional_exp_percent_by_kill") == 0) return additional_exp_percent_by_kill;
			if (wcscmp(fieldName, L"potential_attack_power_equip_min") == 0) return potential_attack_power_equip_min;
			if (wcscmp(fieldName, L"potential_attack_power_equip_max") == 0) return potential_attack_power_equip_max;
			if (wcscmp(fieldName, L"potential_defend_power_equip_value") == 0) return potential_defend_power_equip_value;
			if (wcscmp(fieldName, L"potential_defend_resist_power_equip_value") == 0) return potential_defend_resist_power_equip_value;
			if (wcscmp(fieldName, L"potential_attack_hit_base_percent") == 0) return potential_attack_hit_base_percent;
			if (wcscmp(fieldName, L"potential_attack_hit_value") == 0) return potential_attack_hit_value;
			if (wcscmp(fieldName, L"potential_attack_pierce_value") == 0) return potential_attack_pierce_value;
			if (wcscmp(fieldName, L"potential_attack_critical_base_percent") == 0) return potential_attack_critical_base_percent;
			if (wcscmp(fieldName, L"potential_attack_critical_damage_percent") == 0) return potential_attack_critical_damage_percent;
			if (wcscmp(fieldName, L"potential_attack_critical_value") == 0) return potential_attack_critical_value;
			if (wcscmp(fieldName, L"potential_defend_critical_base_percent") == 0) return potential_defend_critical_base_percent;
			if (wcscmp(fieldName, L"potential_defend_critical_value") == 0) return potential_defend_critical_value;
			if (wcscmp(fieldName, L"potential_defend_dodge_base_percent") == 0) return potential_defend_dodge_base_percent;
			if (wcscmp(fieldName, L"potential_defend_dodge_value") == 0) return potential_defend_dodge_value;
			if (wcscmp(fieldName, L"potential_defend_parry_base_percent") == 0) return potential_defend_parry_base_percent;
			if (wcscmp(fieldName, L"potential_defend_parry_value") == 0) return potential_defend_parry_value;
			if (wcscmp(fieldName, L"potential_attack_stiff_duration_base_percent") == 0) return potential_attack_stiff_duration_base_percent;
			if (wcscmp(fieldName, L"potential_attack_stiff_duration_value") == 0) return potential_attack_stiff_duration_value;
			if (wcscmp(fieldName, L"potential_defend_stiff_duration_base_percent") == 0) return potential_defend_stiff_duration_base_percent;
			if (wcscmp(fieldName, L"potential_defend_stiff_duration_value") == 0) return potential_defend_stiff_duration_value;
			if (wcscmp(fieldName, L"potential_cast_duration_base_percent") == 0) return potential_cast_duration_base_percent;
			if (wcscmp(fieldName, L"potential_cast_duration_value") == 0) return potential_cast_duration_value;
			if (wcscmp(fieldName, L"potential_defend_physical_damage_reduce_percent") == 0) return potential_defend_physical_damage_reduce_percent;
			if (wcscmp(fieldName, L"potential_defend_force_damage_reduce_percent") == 0) return potential_defend_force_damage_reduce_percent;
			if (wcscmp(fieldName, L"potential_attack_damage_modify_percent") == 0) return potential_attack_damage_modify_percent;
			if (wcscmp(fieldName, L"potential_attack_damage_modify_diff") == 0) return potential_attack_damage_modify_diff;
			if (wcscmp(fieldName, L"potential_defend_damage_modify_percent") == 0) return potential_defend_damage_modify_percent;
			if (wcscmp(fieldName, L"potential_defend_damage_modify_diff") == 0) return potential_defend_damage_modify_diff;
			if (wcscmp(fieldName, L"potential_attack_concentrate_value") == 0) return potential_attack_concentrate_value;
			if (wcscmp(fieldName, L"potential_defend_perfect_parry_reduce_percent") == 0) return potential_defend_perfect_parry_reduce_percent;
			if (wcscmp(fieldName, L"potential_defend_counter_reduce_percent") == 0) return potential_defend_counter_reduce_percent;
			if (wcscmp(fieldName, L"potential_max_hp") == 0) return potential_max_hp;
			if (wcscmp(fieldName, L"potential_hp_regen") == 0) return potential_hp_regen;
			if (wcscmp(fieldName, L"potential_hp_regen_combat") == 0) return potential_hp_regen_combat;
			if (wcscmp(fieldName, L"potential_max_guard_gauge") == 0) return potential_max_guard_gauge;
			if (wcscmp(fieldName, L"potential_pve_boss_level_npc_attack_power_equip_min") == 0) return potential_pve_boss_level_npc_attack_power_equip_min;
			if (wcscmp(fieldName, L"potential_pve_boss_level_npc_attack_power_equip_max") == 0) return potential_pve_boss_level_npc_attack_power_equip_max;
			if (wcscmp(fieldName, L"potential_pve_boss_level_npc_defend_power_equip_value") == 0) return potential_pve_boss_level_npc_defend_power_equip_value;
			if (wcscmp(fieldName, L"potential_pvp_attack_power_equip_min") == 0) return potential_pvp_attack_power_equip_min;
			if (wcscmp(fieldName, L"potential_pvp_attack_power_equip_max") == 0) return potential_pvp_attack_power_equip_max;
			if (wcscmp(fieldName, L"potential_pvp_defend_power_equip_value") == 0) return potential_pvp_defend_power_equip_value;
			if (wcscmp(fieldName, L"potential_attack_attribute_value_equip") == 0) return potential_attack_attribute_value_equip;
			if (wcscmp(fieldName, L"potential_abnormal_attack_power_value_equip") == 0) return potential_abnormal_attack_power_value_equip;
			if (wcscmp(fieldName, L"potential_abnormal_defend_power_value") == 0) return potential_abnormal_defend_power_value;
			if (wcscmp(fieldName, L"potential_heal_power_value") == 0) return potential_heal_power_value;
			if (wcscmp(fieldName, L"potential_attack_critical_damage_value_equip") == 0) return potential_attack_critical_damage_value_equip;
			if (wcscmp(fieldName, L"item_sound_move") == 0) return item_sound_move;
			if (wcscmp(fieldName, L"item_sound_dragstart") == 0) return item_sound_dragstart;
			if (wcscmp(fieldName, L"item_sound_itemdrop") == 0) return item_sound_itemdrop;
			if (wcscmp(fieldName, L"main_ability") == 0) return main_ability;
			if (wcscmp(fieldName, L"main_ability_1") == 0) return main_ability[0];
			if (wcscmp(fieldName, L"main_ability_2") == 0) return main_ability[1];
			if (wcscmp(fieldName, L"pccafe_ncsoft_korea_only") == 0) return pccafe_ncsoft_korea_only;
			if (wcscmp(fieldName, L"growth_id") == 0) return growth_id;
			if (wcscmp(fieldName, L"growth_level_max") == 0) return growth_level_max;
			if (wcscmp(fieldName, L"growth_step") == 0) return growth_step;
			if (wcscmp(fieldName, L"growth_efficient_level") == 0) return growth_efficient_level;
			if (wcscmp(fieldName, L"growth_exp_scale") == 0) return growth_exp_scale;
			if (wcscmp(fieldName, L"random_option_group_id") == 0) return random_option_group_id;
			if (wcscmp(fieldName, L"has_random_option_group_data_flag") == 0) return has_random_option_group_data_flag;
			if (wcscmp(fieldName, L"growth_recipe_exp_min") == 0) return growth_recipe_exp_min;
			if (wcscmp(fieldName, L"growth_recipe_exp_max") == 0) return growth_recipe_exp_max;
			if (wcscmp(fieldName, L"growth_recipe_exp") == 0) return growth_recipe_exp;
			if (wcscmp(fieldName, L"growth_recipe_exp_1") == 0) return growth_recipe_exp[0];
			if (wcscmp(fieldName, L"growth_recipe_exp_2") == 0) return growth_recipe_exp[1];
			if (wcscmp(fieldName, L"growth_recipe_exp_3") == 0) return growth_recipe_exp[2];
			if (wcscmp(fieldName, L"growth_recipe_exp_4") == 0) return growth_recipe_exp[3];
			if (wcscmp(fieldName, L"growth_recipe_cost") == 0) return growth_recipe_cost;
			if (wcscmp(fieldName, L"growth_recipe_material") == 0) return growth_recipe_material;
			if (wcscmp(fieldName, L"growth_recipe_material_1") == 0) return growth_recipe_material[0];
			if (wcscmp(fieldName, L"growth_recipe_material_2") == 0) return growth_recipe_material[1];
			if (wcscmp(fieldName, L"growth_recipe_material_3") == 0) return growth_recipe_material[2];
			if (wcscmp(fieldName, L"growth_recipe_material_4") == 0) return growth_recipe_material[3];
			if (wcscmp(fieldName, L"growth_recipe_material_5") == 0) return growth_recipe_material[4];
			if (wcscmp(fieldName, L"growth_recipe_material_6") == 0) return growth_recipe_material[5];
			if (wcscmp(fieldName, L"growth_recipe_material_count") == 0) return growth_recipe_material_count;
			if (wcscmp(fieldName, L"growth_recipe_material_count_1") == 0) return growth_recipe_material_count[0];
			if (wcscmp(fieldName, L"growth_recipe_material_count_2") == 0) return growth_recipe_material_count[1];
			if (wcscmp(fieldName, L"growth_recipe_material_count_3") == 0) return growth_recipe_material_count[2];
			if (wcscmp(fieldName, L"growth_recipe_material_count_4") == 0) return growth_recipe_material_count[3];
			if (wcscmp(fieldName, L"growth_recipe_material_count_5") == 0) return growth_recipe_material_count[4];
			if (wcscmp(fieldName, L"growth_recipe_material_count_6") == 0) return growth_recipe_material_count[5];
			if (wcscmp(fieldName, L"growth_fail_probability") == 0) return growth_fail_probability;
			if (wcscmp(fieldName, L"awakening_recipe_cost") == 0) return awakening_recipe_cost;
			if (wcscmp(fieldName, L"awakening_recipe_material") == 0) return awakening_recipe_material;
			if (wcscmp(fieldName, L"awakening_recipe_material_1") == 0) return awakening_recipe_material[0];
			if (wcscmp(fieldName, L"awakening_recipe_material_2") == 0) return awakening_recipe_material[1];
			if (wcscmp(fieldName, L"awakening_recipe_material_3") == 0) return awakening_recipe_material[2];
			if (wcscmp(fieldName, L"awakening_recipe_material_4") == 0) return awakening_recipe_material[3];
			if (wcscmp(fieldName, L"awakening_recipe_material_5") == 0) return awakening_recipe_material[4];
			if (wcscmp(fieldName, L"awakening_recipe_material_6") == 0) return awakening_recipe_material[5];
			if (wcscmp(fieldName, L"awakening_recipe_material_count") == 0) return awakening_recipe_material_count;
			if (wcscmp(fieldName, L"awakening_recipe_material_count_1") == 0) return awakening_recipe_material_count[0];
			if (wcscmp(fieldName, L"awakening_recipe_material_count_2") == 0) return awakening_recipe_material_count[1];
			if (wcscmp(fieldName, L"awakening_recipe_material_count_3") == 0) return awakening_recipe_material_count[2];
			if (wcscmp(fieldName, L"awakening_recipe_material_count_4") == 0) return awakening_recipe_material_count[3];
			if (wcscmp(fieldName, L"awakening_recipe_material_count_5") == 0) return awakening_recipe_material_count[4];
			if (wcscmp(fieldName, L"awakening_recipe_material_count_6") == 0) return awakening_recipe_material_count[5];
			if (wcscmp(fieldName, L"dispose_awakening_feed_item") == 0) return dispose_awakening_feed_item;
			if (wcscmp(fieldName, L"dispose_awakening_material") == 0) return dispose_awakening_material;
			if (wcscmp(fieldName, L"required_feed_item_brand_for_growth") == 0) return required_feed_item_brand_for_growth;
			if (wcscmp(fieldName, L"required_feed_item_for_growth") == 0) return required_feed_item_for_growth;
			if (wcscmp(fieldName, L"required_seed_item_growth_course") == 0) return required_seed_item_growth_course;
			if (wcscmp(fieldName, L"required_seed_item_condition_type") == 0) return required_seed_item_condition_type;
			if (wcscmp(fieldName, L"required_seed_item_equip_level_min") == 0) return required_seed_item_equip_level_min;
			if (wcscmp(fieldName, L"required_seed_item_equip_level_max") == 0) return required_seed_item_equip_level_max;
			if (wcscmp(fieldName, L"required_feed_item_brand_for_awakening") == 0) return required_feed_item_brand_for_awakening;
			if (wcscmp(fieldName, L"required_feed_item_condition_type") == 0) return required_feed_item_condition_type;
			if (wcscmp(fieldName, L"required_feed_item_level_min") == 0) return required_feed_item_level_min;
			if (wcscmp(fieldName, L"awakening_target_item") == 0) return awakening_target_item;
			if (wcscmp(fieldName, L"awakening_target_item_1") == 0) return awakening_target_item[0];
			if (wcscmp(fieldName, L"awakening_target_item_2") == 0) return awakening_target_item[1];
			if (wcscmp(fieldName, L"awakening_target_item_3") == 0) return awakening_target_item[2];
			if (wcscmp(fieldName, L"awakening_target_item_4") == 0) return awakening_target_item[3];
			if (wcscmp(fieldName, L"awakening_target_item_5") == 0) return awakening_target_item[4];
			if (wcscmp(fieldName, L"required_awakening_bm_item_count") == 0) return required_awakening_bm_item_count;
			if (wcscmp(fieldName, L"awakening_probability") == 0) return awakening_probability;
			if (wcscmp(fieldName, L"awakening_fail_effect") == 0) return awakening_fail_effect;
			if (wcscmp(fieldName, L"lock_enable") == 0) return lock_enable;
			if (wcscmp(fieldName, L"time_limit_type") == 0) return time_limit_type;
			if (wcscmp(fieldName, L"usable_duration") == 0) return usable_duration;
			if (wcscmp(fieldName, L"fixed_expiration_time") == 0) return fixed_expiration_time;
			if (wcscmp(fieldName, L"delete_expiration_type") == 0) return delete_expiration_type;
			if (wcscmp(fieldName, L"event_info") == 0) return event_info;
			if (wcscmp(fieldName, L"show_reward_preview") == 0) return show_reward_preview;
			if (wcscmp(fieldName, L"account_post_charge") == 0) return account_post_charge;
			if (wcscmp(fieldName, L"fusion_category_1") == 0) return fusion_category_1;
			if (wcscmp(fieldName, L"fusion_category_2") == 0) return fusion_category_2;
			if (wcscmp(fieldName, L"fusion_score") == 0) return fusion_score;
			if (wcscmp(fieldName, L"boast_event_type") == 0) return boast_event_type;
			if (wcscmp(fieldName, L"improve_id") == 0) return improve_id;
			if (wcscmp(fieldName, L"improve_level") == 0) return improve_level;
			if (wcscmp(fieldName, L"improve_next_item") == 0) return improve_next_item;
			if (wcscmp(fieldName, L"improve_prev_item") == 0) return improve_prev_item;
			if (wcscmp(fieldName, L"job_change_item_exchange_group") == 0) return job_change_item_exchange_group;
			if (wcscmp(fieldName, L"manipulate_zone_env2_list") == 0) return manipulate_zone_env2_list;
			if (wcscmp(fieldName, L"manipulate_zone_env2_list_1") == 0) return manipulate_zone_env2_list[0];
			if (wcscmp(fieldName, L"manipulate_zone_env2_list_2") == 0) return manipulate_zone_env2_list[1];
			if (wcscmp(fieldName, L"manipulate_zone_env2_list_3") == 0) return manipulate_zone_env2_list[2];
			if (wcscmp(fieldName, L"manipulate_zone_env2_list_4") == 0) return manipulate_zone_env2_list[3];
			if (wcscmp(fieldName, L"manipulate_zone_env2_list_5") == 0) return manipulate_zone_env2_list[4];
			if (wcscmp(fieldName, L"manipulate_zone_env2_list_6") == 0) return manipulate_zone_env2_list[5];
			if (wcscmp(fieldName, L"manipulate_zone_env2_list_7") == 0) return manipulate_zone_env2_list[6];
			if (wcscmp(fieldName, L"manipulate_zone_env2_list_8") == 0) return manipulate_zone_env2_list[7];
			if (wcscmp(fieldName, L"manipulate_zone_env2_list_9") == 0) return manipulate_zone_env2_list[8];
			if (wcscmp(fieldName, L"manipulate_zone_env2_list_10") == 0) return manipulate_zone_env2_list[9];
			if (wcscmp(fieldName, L"name2") == 0) return name2;
			if (wcscmp(fieldName, L"nickname") == 0) return nickname;
			if (wcscmp(fieldName, L"stage_number") == 0) return stage_number;
			if (wcscmp(fieldName, L"tag_icon") == 0) return tag_icon;
			if (wcscmp(fieldName, L"tag_icon_grade") == 0) return tag_icon_grade;
			if (wcscmp(fieldName, L"icon") == 0) return icon;
			if (wcscmp(fieldName, L"kun_mesh") == 0) return kun_mesh;
			if (wcscmp(fieldName, L"gon_male_mesh") == 0) return gon_male_mesh;
			if (wcscmp(fieldName, L"gon_female_mesh") == 0) return gon_female_mesh;
			if (wcscmp(fieldName, L"lyn_male_mesh") == 0) return lyn_male_mesh;
			if (wcscmp(fieldName, L"lyn_female_mesh") == 0) return lyn_female_mesh;
			if (wcscmp(fieldName, L"jin_male_mesh") == 0) return jin_male_mesh;
			if (wcscmp(fieldName, L"jin_female_mesh") == 0) return jin_female_mesh;
			if (wcscmp(fieldName, L"cat_mesh") == 0) return cat_mesh;
			if (wcscmp(fieldName, L"kun_mesh_col") == 0) return kun_mesh_col;
			if (wcscmp(fieldName, L"kun_mesh_col_1") == 0) return kun_mesh_col[0];
			if (wcscmp(fieldName, L"kun_mesh_col_2") == 0) return kun_mesh_col[1];
			if (wcscmp(fieldName, L"kun_mesh_col_3") == 0) return kun_mesh_col[2];
			if (wcscmp(fieldName, L"gon_male_mesh_col") == 0) return gon_male_mesh_col;
			if (wcscmp(fieldName, L"gon_male_mesh_col_1") == 0) return gon_male_mesh_col[0];
			if (wcscmp(fieldName, L"gon_male_mesh_col_2") == 0) return gon_male_mesh_col[1];
			if (wcscmp(fieldName, L"gon_male_mesh_col_3") == 0) return gon_male_mesh_col[2];
			if (wcscmp(fieldName, L"gon_female_mesh_col") == 0) return gon_female_mesh_col;
			if (wcscmp(fieldName, L"gon_female_mesh_col_1") == 0) return gon_female_mesh_col[0];
			if (wcscmp(fieldName, L"gon_female_mesh_col_2") == 0) return gon_female_mesh_col[1];
			if (wcscmp(fieldName, L"gon_female_mesh_col_3") == 0) return gon_female_mesh_col[2];
			if (wcscmp(fieldName, L"lyn_male_mesh_col") == 0) return lyn_male_mesh_col;
			if (wcscmp(fieldName, L"lyn_male_mesh_col_1") == 0) return lyn_male_mesh_col[0];
			if (wcscmp(fieldName, L"lyn_male_mesh_col_2") == 0) return lyn_male_mesh_col[1];
			if (wcscmp(fieldName, L"lyn_male_mesh_col_3") == 0) return lyn_male_mesh_col[2];
			if (wcscmp(fieldName, L"lyn_female_mesh_col") == 0) return lyn_female_mesh_col;
			if (wcscmp(fieldName, L"lyn_female_mesh_col_1") == 0) return lyn_female_mesh_col[0];
			if (wcscmp(fieldName, L"lyn_female_mesh_col_2") == 0) return lyn_female_mesh_col[1];
			if (wcscmp(fieldName, L"lyn_female_mesh_col_3") == 0) return lyn_female_mesh_col[2];
			if (wcscmp(fieldName, L"jin_male_mesh_col") == 0) return jin_male_mesh_col;
			if (wcscmp(fieldName, L"jin_male_mesh_col_1") == 0) return jin_male_mesh_col[0];
			if (wcscmp(fieldName, L"jin_male_mesh_col_2") == 0) return jin_male_mesh_col[1];
			if (wcscmp(fieldName, L"jin_male_mesh_col_3") == 0) return jin_male_mesh_col[2];
			if (wcscmp(fieldName, L"jin_female_mesh_col") == 0) return jin_female_mesh_col;
			if (wcscmp(fieldName, L"jin_female_mesh_col_1") == 0) return jin_female_mesh_col[0];
			if (wcscmp(fieldName, L"jin_female_mesh_col_2") == 0) return jin_female_mesh_col[1];
			if (wcscmp(fieldName, L"jin_female_mesh_col_3") == 0) return jin_female_mesh_col[2];
			if (wcscmp(fieldName, L"cat_mesh_col") == 0) return cat_mesh_col;
			if (wcscmp(fieldName, L"cat_mesh_col_1") == 0) return cat_mesh_col[0];
			if (wcscmp(fieldName, L"cat_mesh_col_2") == 0) return cat_mesh_col[1];
			if (wcscmp(fieldName, L"cat_mesh_col_3") == 0) return cat_mesh_col[2];
			if (wcscmp(fieldName, L"mesh_id") == 0) return mesh_id;
			if (wcscmp(fieldName, L"mesh_id_2") == 0) return mesh_id_2;
			if (wcscmp(fieldName, L"talk_mesh") == 0) return talk_mesh;
			if (wcscmp(fieldName, L"talk_animset") == 0) return talk_animset;
			if (wcscmp(fieldName, L"mesh_col") == 0) return mesh_col;
			if (wcscmp(fieldName, L"mesh_col_1") == 0) return mesh_col[0];
			if (wcscmp(fieldName, L"mesh_col_2") == 0) return mesh_col[1];
			if (wcscmp(fieldName, L"mesh_col_3") == 0) return mesh_col[2];
			if (wcscmp(fieldName, L"mesh_animset") == 0) return mesh_animset;
			if (wcscmp(fieldName, L"mesh_animtree") == 0) return mesh_animtree;
			if (wcscmp(fieldName, L"mesh_attach") == 0) return mesh_attach;
			if (wcscmp(fieldName, L"hide_beard") == 0) return hide_beard;
			if (wcscmp(fieldName, L"hide_name") == 0) return hide_name;
			if (wcscmp(fieldName, L"guild_item") == 0) return guild_item;
			if (wcscmp(fieldName, L"description2") == 0) return description2;
			if (wcscmp(fieldName, L"description4_title") == 0) return description4_title;
			if (wcscmp(fieldName, L"description5_title") == 0) return description5_title;
			if (wcscmp(fieldName, L"description6_title") == 0) return description6_title;
			if (wcscmp(fieldName, L"description4") == 0) return description4;
			if (wcscmp(fieldName, L"description5") == 0) return description5;
			if (wcscmp(fieldName, L"description6") == 0) return description6;
			if (wcscmp(fieldName, L"description7") == 0) return description7;
			if (wcscmp(fieldName, L"main_info") == 0) return main_info;
			if (wcscmp(fieldName, L"sub_info") == 0) return sub_info;
			if (wcscmp(fieldName, L"identify_main_info") == 0) return identify_main_info;
			if (wcscmp(fieldName, L"identify_sub_info") == 0) return identify_sub_info;
			if (wcscmp(fieldName, L"identify_description") == 0) return identify_description;
			if (wcscmp(fieldName, L"legend_transform_title_name") == 0) return legend_transform_title_name;
			if (wcscmp(fieldName, L"ui_icon_state") == 0) return ui_icon_state;
			if (wcscmp(fieldName, L"message") == 0) return message;
			if (wcscmp(fieldName, L"message_1") == 0) return message[0];
			if (wcscmp(fieldName, L"message_2") == 0) return message[1];
			if (wcscmp(fieldName, L"message_3") == 0) return message[2];
			if (wcscmp(fieldName, L"message_4") == 0) return message[3];
			if (wcscmp(fieldName, L"message_5") == 0) return message[4];
			if (wcscmp(fieldName, L"message_6") == 0) return message[5];
			if (wcscmp(fieldName, L"message_7") == 0) return message[6];
			if (wcscmp(fieldName, L"message_8") == 0) return message[7];
			if (wcscmp(fieldName, L"message_9") == 0) return message[8];
			if (wcscmp(fieldName, L"invoke_fx_msg") == 0) return invoke_fx_msg;
			if (wcscmp(fieldName, L"tooltip_info") == 0) return tooltip_info;
			if (wcscmp(fieldName, L"item_score") == 0) return item_score;
			if (wcscmp(fieldName, L"item_style") == 0) return item_style;

			return std::any();
		}
		std::wstring GetFieldAsString(const wchar_t* fieldName) {
			if (wcscmp(fieldName, L"alias") == 0) return Data::AnyFieldToStringConverter::ToString(&alias);
			if (wcscmp(fieldName, L"item_combat_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_combat[0]));
			if (wcscmp(fieldName, L"item_combat_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_combat[1]));
			if (wcscmp(fieldName, L"item_combat_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_combat[2]));
			if (wcscmp(fieldName, L"item_combat_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_combat[3]));
			if (wcscmp(fieldName, L"item_combat_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_combat[4]));
			if (wcscmp(fieldName, L"item_combat_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_combat[5]));
			if (wcscmp(fieldName, L"item_combat_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_combat[6]));
			if (wcscmp(fieldName, L"item_combat_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_combat[7]));
			if (wcscmp(fieldName, L"item_combat_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_combat[8]));
			if (wcscmp(fieldName, L"item_combat_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(item_combat[9]));
			if (wcscmp(fieldName, L"brand") == 0) return Data::AnyFieldToStringConverter::ToString(&brand);
			if (wcscmp(fieldName, L"price") == 0) return Data::AnyFieldToStringConverter::ToString(&price);
			if (wcscmp(fieldName, L"base_fee") == 0) return Data::AnyFieldToStringConverter::ToString(&base_fee);
			if (wcscmp(fieldName, L"game_category_1") == 0) return Data::AnyFieldToStringConverter::ToString(&game_category_1);
			if (wcscmp(fieldName, L"game_category_2") == 0) return Data::AnyFieldToStringConverter::ToString(&game_category_2);
			if (wcscmp(fieldName, L"game_category_3") == 0) return Data::AnyFieldToStringConverter::ToString(&game_category_3);
			if (wcscmp(fieldName, L"market_category_1") == 0) return Data::AnyFieldToStringConverter::ToString(&market_category_1);
			if (wcscmp(fieldName, L"market_category_2") == 0) return Data::AnyFieldToStringConverter::ToString(&market_category_2);
			if (wcscmp(fieldName, L"market_category_3") == 0) return Data::AnyFieldToStringConverter::ToString(&market_category_3);
			if (wcscmp(fieldName, L"cannot_dispose") == 0) return Data::AnyFieldToStringConverter::ToString(&cannot_dispose);
			if (wcscmp(fieldName, L"cannot_sell") == 0) return Data::AnyFieldToStringConverter::ToString(&cannot_sell);
			if (wcscmp(fieldName, L"cannot_trade") == 0) return Data::AnyFieldToStringConverter::ToString(&cannot_trade);
			if (wcscmp(fieldName, L"cannot_depot") == 0) return Data::AnyFieldToStringConverter::ToString(&cannot_depot);
			if (wcscmp(fieldName, L"consume_durability") == 0) return Data::AnyFieldToStringConverter::ToString(&consume_durability);
			if (wcscmp(fieldName, L"auctionable") == 0) return Data::AnyFieldToStringConverter::ToString(&auctionable);
			if (wcscmp(fieldName, L"seal_renewal_auctionable") == 0) return Data::AnyFieldToStringConverter::ToString(&seal_renewal_auctionable);
			if (wcscmp(fieldName, L"party_auction_exclusion") == 0) return Data::AnyFieldToStringConverter::ToString(&party_auction_exclusion);
			if (wcscmp(fieldName, L"acquire_used") == 0) return Data::AnyFieldToStringConverter::ToString(&acquire_used);
			if (wcscmp(fieldName, L"equip_used") == 0) return Data::AnyFieldToStringConverter::ToString(&equip_used);
			if (wcscmp(fieldName, L"account_used") == 0) return Data::AnyFieldToStringConverter::ToString(&account_used);
			if (wcscmp(fieldName, L"filter_equip_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(filter_equip[0]));
			if (wcscmp(fieldName, L"filter_equip_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(filter_equip[1]));
			if (wcscmp(fieldName, L"filter_equip_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(filter_equip[2]));
			if (wcscmp(fieldName, L"filter_equip_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(filter_equip[3]));
			if (wcscmp(fieldName, L"effect_equip_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(effect_equip[0]));
			if (wcscmp(fieldName, L"effect_equip_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(effect_equip[1]));
			if (wcscmp(fieldName, L"effect_equip_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(effect_equip[2]));
			if (wcscmp(fieldName, L"effect_equip_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(effect_equip[3]));
			if (wcscmp(fieldName, L"gear_score") == 0) return Data::AnyFieldToStringConverter::ToString(&gear_score);
			if (wcscmp(fieldName, L"equip_level") == 0) return Data::AnyFieldToStringConverter::ToString(&equip_level);
			if (wcscmp(fieldName, L"equip_level_max") == 0) return Data::AnyFieldToStringConverter::ToString(&equip_level_max);
			if (wcscmp(fieldName, L"equip_mastery_level") == 0) return Data::AnyFieldToStringConverter::ToString(&equip_mastery_level);
			if (wcscmp(fieldName, L"equip_job_check_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(equip_job_check[0]));
			if (wcscmp(fieldName, L"equip_job_check_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(equip_job_check[1]));
			if (wcscmp(fieldName, L"equip_job_check_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(equip_job_check[2]));
			if (wcscmp(fieldName, L"equip_job_check_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(equip_job_check[3]));
			if (wcscmp(fieldName, L"equip_job_check_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(equip_job_check[4]));
			if (wcscmp(fieldName, L"equip_sex") == 0) return Data::AnyFieldToStringConverter::ToString(&equip_sex);
			if (wcscmp(fieldName, L"equip_race") == 0) return Data::AnyFieldToStringConverter::ToString(&equip_race);
			if (wcscmp(fieldName, L"equip_type") == 0) return Data::AnyFieldToStringConverter::ToString(&equip_type);
			if (wcscmp(fieldName, L"equip_solo_duel_grade") == 0) return Data::AnyFieldToStringConverter::ToString(&equip_solo_duel_grade);
			if (wcscmp(fieldName, L"equip_team_duel_grade") == 0) return Data::AnyFieldToStringConverter::ToString(&equip_team_duel_grade);
			if (wcscmp(fieldName, L"item_grade") == 0) return Data::AnyFieldToStringConverter::ToString(&item_grade);
			if (wcscmp(fieldName, L"legend_grade_background_particle_type") == 0) return Data::AnyFieldToStringConverter::ToString(&legend_grade_background_particle_type);
			if (wcscmp(fieldName, L"init_durability") == 0) return Data::AnyFieldToStringConverter::ToString(&init_durability);
			if (wcscmp(fieldName, L"max_durability") == 0) return Data::AnyFieldToStringConverter::ToString(&max_durability);
			if (wcscmp(fieldName, L"repair_money_cost") == 0) return Data::AnyFieldToStringConverter::ToString(&repair_money_cost);
			if (wcscmp(fieldName, L"use_global_recycle_group") == 0) return Data::AnyFieldToStringConverter::ToString(&use_global_recycle_group);
			if (wcscmp(fieldName, L"use_global_recycle_group_duration") == 0) return Data::AnyFieldToStringConverter::ToString(&use_global_recycle_group_duration);
			if (wcscmp(fieldName, L"use_recycle_group") == 0) return Data::AnyFieldToStringConverter::ToString(&use_recycle_group);
			if (wcscmp(fieldName, L"use_recycle_group_id") == 0) return Data::AnyFieldToStringConverter::ToString(&use_recycle_group_id);
			if (wcscmp(fieldName, L"use_recycle_group_duration") == 0) return Data::AnyFieldToStringConverter::ToString(&use_recycle_group_duration);
			if (wcscmp(fieldName, L"decompose_reward_by_consume_index") == 0) return Data::AnyFieldToStringConverter::ToString(&decompose_reward_by_consume_index);
			if (wcscmp(fieldName, L"decompose_reward_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(decompose_reward[0]));
			if (wcscmp(fieldName, L"decompose_reward_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(decompose_reward[1]));
			if (wcscmp(fieldName, L"decompose_reward_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(decompose_reward[2]));
			if (wcscmp(fieldName, L"decompose_reward_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(decompose_reward[3]));
			if (wcscmp(fieldName, L"decompose_reward_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(decompose_reward[4]));
			if (wcscmp(fieldName, L"decompose_reward_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(decompose_reward[5]));
			if (wcscmp(fieldName, L"decompose_reward_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(decompose_reward[6]));
			if (wcscmp(fieldName, L"decompose_reward_total_count") == 0) return Data::AnyFieldToStringConverter::ToString(&decompose_reward_total_count);
			if (wcscmp(fieldName, L"decompose_event_reward") == 0) return Data::AnyFieldToStringConverter::ToString(&decompose_event_reward);
			if (wcscmp(fieldName, L"decompose_job_reward_blade_master") == 0) return Data::AnyFieldToStringConverter::ToString(&decompose_job_reward_blade_master);
			if (wcscmp(fieldName, L"decompose_job_reward_kung_fu_fighter") == 0) return Data::AnyFieldToStringConverter::ToString(&decompose_job_reward_kung_fu_fighter);
			if (wcscmp(fieldName, L"decompose_job_reward_force_master") == 0) return Data::AnyFieldToStringConverter::ToString(&decompose_job_reward_force_master);
			if (wcscmp(fieldName, L"decompose_job_reward_destroyer") == 0) return Data::AnyFieldToStringConverter::ToString(&decompose_job_reward_destroyer);
			if (wcscmp(fieldName, L"decompose_job_reward_summoner") == 0) return Data::AnyFieldToStringConverter::ToString(&decompose_job_reward_summoner);
			if (wcscmp(fieldName, L"decompose_job_reward_assassin") == 0) return Data::AnyFieldToStringConverter::ToString(&decompose_job_reward_assassin);
			if (wcscmp(fieldName, L"decompose_job_reward_sword_master") == 0) return Data::AnyFieldToStringConverter::ToString(&decompose_job_reward_sword_master);
			if (wcscmp(fieldName, L"decompose_job_reward_warlock") == 0) return Data::AnyFieldToStringConverter::ToString(&decompose_job_reward_warlock);
			if (wcscmp(fieldName, L"decompose_job_reward_soul_fighter") == 0) return Data::AnyFieldToStringConverter::ToString(&decompose_job_reward_soul_fighter);
			if (wcscmp(fieldName, L"decompose_job_reward_shooter") == 0) return Data::AnyFieldToStringConverter::ToString(&decompose_job_reward_shooter);
			if (wcscmp(fieldName, L"decompose_job_reward_warrior") == 0) return Data::AnyFieldToStringConverter::ToString(&decompose_job_reward_warrior);
			if (wcscmp(fieldName, L"decompose_job_reward_archer") == 0) return Data::AnyFieldToStringConverter::ToString(&decompose_job_reward_archer);
			if (wcscmp(fieldName, L"decompose_job_reward_spear_master") == 0) return Data::AnyFieldToStringConverter::ToString(&decompose_job_reward_spear_master);
			if (wcscmp(fieldName, L"decompose_job_reward_thunderer") == 0) return Data::AnyFieldToStringConverter::ToString(&decompose_job_reward_thunderer);
			if (wcscmp(fieldName, L"decompose_job_reward_dual_blader") == 0) return Data::AnyFieldToStringConverter::ToString(&decompose_job_reward_dual_blader);
			if (wcscmp(fieldName, L"decompose_job_reward_bard") == 0) return Data::AnyFieldToStringConverter::ToString(&decompose_job_reward_bard);
			if (wcscmp(fieldName, L"decompose_max") == 0) return Data::AnyFieldToStringConverter::ToString(&decompose_max);
			if (wcscmp(fieldName, L"decompose_money_cost") == 0) return Data::AnyFieldToStringConverter::ToString(&decompose_money_cost);
			if (wcscmp(fieldName, L"decompose_by_item2_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(decompose_by_item2[0]));
			if (wcscmp(fieldName, L"decompose_by_item2_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(decompose_by_item2[1]));
			if (wcscmp(fieldName, L"decompose_by_item2_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(decompose_by_item2[2]));
			if (wcscmp(fieldName, L"decompose_by_item2_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(decompose_by_item2[3]));
			if (wcscmp(fieldName, L"decompose_by_item2_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(decompose_by_item2[4]));
			if (wcscmp(fieldName, L"decompose_by_item2_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(decompose_by_item2[5]));
			if (wcscmp(fieldName, L"decompose_by_item2_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(decompose_by_item2[6]));
			if (wcscmp(fieldName, L"decompose_by_item2_stack_count_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(decompose_by_item2_stack_count[0]));
			if (wcscmp(fieldName, L"decompose_by_item2_stack_count_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(decompose_by_item2_stack_count[1]));
			if (wcscmp(fieldName, L"decompose_by_item2_stack_count_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(decompose_by_item2_stack_count[2]));
			if (wcscmp(fieldName, L"decompose_by_item2_stack_count_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(decompose_by_item2_stack_count[3]));
			if (wcscmp(fieldName, L"decompose_by_item2_stack_count_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(decompose_by_item2_stack_count[4]));
			if (wcscmp(fieldName, L"decompose_by_item2_stack_count_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(decompose_by_item2_stack_count[5]));
			if (wcscmp(fieldName, L"decompose_by_item2_stack_count_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(decompose_by_item2_stack_count[6]));
			if (wcscmp(fieldName, L"decompose_by_item2_total_count") == 0) return Data::AnyFieldToStringConverter::ToString(&decompose_by_item2_total_count);
			if (wcscmp(fieldName, L"job_decompose_by_item2_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(job_decompose_by_item2[0]));
			if (wcscmp(fieldName, L"job_decompose_by_item2_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(job_decompose_by_item2[1]));
			if (wcscmp(fieldName, L"job_decompose_by_item2_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(job_decompose_by_item2[2]));
			if (wcscmp(fieldName, L"job_decompose_by_item2_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(job_decompose_by_item2[3]));
			if (wcscmp(fieldName, L"job_decompose_by_item2_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(job_decompose_by_item2[4]));
			if (wcscmp(fieldName, L"job_decompose_by_item2_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(job_decompose_by_item2[5]));
			if (wcscmp(fieldName, L"job_decompose_by_item2_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(job_decompose_by_item2[6]));
			if (wcscmp(fieldName, L"job_decompose_by_item2_stack_count_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(job_decompose_by_item2_stack_count[0]));
			if (wcscmp(fieldName, L"job_decompose_by_item2_stack_count_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(job_decompose_by_item2_stack_count[1]));
			if (wcscmp(fieldName, L"job_decompose_by_item2_stack_count_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(job_decompose_by_item2_stack_count[2]));
			if (wcscmp(fieldName, L"job_decompose_by_item2_stack_count_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(job_decompose_by_item2_stack_count[3]));
			if (wcscmp(fieldName, L"job_decompose_by_item2_stack_count_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(job_decompose_by_item2_stack_count[4]));
			if (wcscmp(fieldName, L"job_decompose_by_item2_stack_count_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(job_decompose_by_item2_stack_count[5]));
			if (wcscmp(fieldName, L"job_decompose_by_item2_stack_count_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(job_decompose_by_item2_stack_count[6]));
			if (wcscmp(fieldName, L"job_decompose_by_item2_total_count") == 0) return Data::AnyFieldToStringConverter::ToString(&job_decompose_by_item2_total_count);
			if (wcscmp(fieldName, L"set_item") == 0) return Data::AnyFieldToStringConverter::ToString(&set_item);
			if (wcscmp(fieldName, L"faction") == 0) return Data::AnyFieldToStringConverter::ToString(&faction);
			if (wcscmp(fieldName, L"equip_faction") == 0) return Data::AnyFieldToStringConverter::ToString(&equip_faction);
			if (wcscmp(fieldName, L"equip_faction_level") == 0) return Data::AnyFieldToStringConverter::ToString(&equip_faction_level);
			if (wcscmp(fieldName, L"new_product") == 0) return Data::AnyFieldToStringConverter::ToString(&new_product);
			if (wcscmp(fieldName, L"hot_product") == 0) return Data::AnyFieldToStringConverter::ToString(&hot_product);
			if (wcscmp(fieldName, L"pouch_appearance_priority") == 0) return Data::AnyFieldToStringConverter::ToString(&pouch_appearance_priority);
			if (wcscmp(fieldName, L"pouch_appearance") == 0) return Data::AnyFieldToStringConverter::ToString(&pouch_appearance);
			if (wcscmp(fieldName, L"seal_consume_item_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(seal_consume_item[0]));
			if (wcscmp(fieldName, L"seal_consume_item_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(seal_consume_item[1]));
			if (wcscmp(fieldName, L"seal_consume_item_count_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(seal_consume_item_count[0]));
			if (wcscmp(fieldName, L"seal_consume_item_count_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(seal_consume_item_count[1]));
			if (wcscmp(fieldName, L"seal_acquire_item") == 0) return Data::AnyFieldToStringConverter::ToString(&seal_acquire_item);
			if (wcscmp(fieldName, L"seal_keep_level") == 0) return Data::AnyFieldToStringConverter::ToString(&seal_keep_level);
			if (wcscmp(fieldName, L"forwarding_types_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[0]));
			if (wcscmp(fieldName, L"forwarding_types_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[1]));
			if (wcscmp(fieldName, L"forwarding_types_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[2]));
			if (wcscmp(fieldName, L"forwarding_types_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[3]));
			if (wcscmp(fieldName, L"forwarding_types_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[4]));
			if (wcscmp(fieldName, L"forwarding_types_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[5]));
			if (wcscmp(fieldName, L"forwarding_types_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[6]));
			if (wcscmp(fieldName, L"forwarding_types_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[7]));
			if (wcscmp(fieldName, L"forwarding_types_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[8]));
			if (wcscmp(fieldName, L"forwarding_types_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[9]));
			if (wcscmp(fieldName, L"forwarding_types_11") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[10]));
			if (wcscmp(fieldName, L"forwarding_types_12") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[11]));
			if (wcscmp(fieldName, L"forwarding_types_13") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[12]));
			if (wcscmp(fieldName, L"forwarding_types_14") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[13]));
			if (wcscmp(fieldName, L"forwarding_types_15") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[14]));
			if (wcscmp(fieldName, L"forwarding_types_16") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[15]));
			if (wcscmp(fieldName, L"forwarding_types_17") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[16]));
			if (wcscmp(fieldName, L"forwarding_types_18") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[17]));
			if (wcscmp(fieldName, L"forwarding_types_19") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[18]));
			if (wcscmp(fieldName, L"forwarding_types_20") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[19]));
			if (wcscmp(fieldName, L"forwarding_types_21") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[20]));
			if (wcscmp(fieldName, L"forwarding_types_22") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[21]));
			if (wcscmp(fieldName, L"forwarding_types_23") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[22]));
			if (wcscmp(fieldName, L"forwarding_types_24") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[23]));
			if (wcscmp(fieldName, L"forwarding_types_25") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[24]));
			if (wcscmp(fieldName, L"forwarding_types_26") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[25]));
			if (wcscmp(fieldName, L"forwarding_types_27") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[26]));
			if (wcscmp(fieldName, L"forwarding_types_28") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[27]));
			if (wcscmp(fieldName, L"forwarding_types_29") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[28]));
			if (wcscmp(fieldName, L"forwarding_types_30") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[29]));
			if (wcscmp(fieldName, L"forwarding_types_31") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[30]));
			if (wcscmp(fieldName, L"forwarding_types_32") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[31]));
			if (wcscmp(fieldName, L"forwarding_types_33") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[32]));
			if (wcscmp(fieldName, L"forwarding_types_34") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[33]));
			if (wcscmp(fieldName, L"forwarding_types_35") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[34]));
			if (wcscmp(fieldName, L"forwarding_types_36") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[35]));
			if (wcscmp(fieldName, L"forwarding_types_37") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[36]));
			if (wcscmp(fieldName, L"forwarding_types_38") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[37]));
			if (wcscmp(fieldName, L"forwarding_types_39") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[38]));
			if (wcscmp(fieldName, L"forwarding_types_40") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[39]));
			if (wcscmp(fieldName, L"forwarding_types_41") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[40]));
			if (wcscmp(fieldName, L"forwarding_types_42") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[41]));
			if (wcscmp(fieldName, L"forwarding_types_43") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[42]));
			if (wcscmp(fieldName, L"forwarding_types_44") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[43]));
			if (wcscmp(fieldName, L"forwarding_types_45") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[44]));
			if (wcscmp(fieldName, L"forwarding_types_46") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[45]));
			if (wcscmp(fieldName, L"forwarding_types_47") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[46]));
			if (wcscmp(fieldName, L"forwarding_types_48") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[47]));
			if (wcscmp(fieldName, L"forwarding_types_49") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[48]));
			if (wcscmp(fieldName, L"forwarding_types_50") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[49]));
			if (wcscmp(fieldName, L"forwarding_types_51") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[50]));
			if (wcscmp(fieldName, L"forwarding_types_52") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[51]));
			if (wcscmp(fieldName, L"forwarding_types_53") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[52]));
			if (wcscmp(fieldName, L"forwarding_types_54") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[53]));
			if (wcscmp(fieldName, L"forwarding_types_55") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[54]));
			if (wcscmp(fieldName, L"forwarding_types_56") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[55]));
			if (wcscmp(fieldName, L"forwarding_types_57") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[56]));
			if (wcscmp(fieldName, L"forwarding_types_58") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[57]));
			if (wcscmp(fieldName, L"forwarding_types_59") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[58]));
			if (wcscmp(fieldName, L"forwarding_types_60") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[59]));
			if (wcscmp(fieldName, L"forwarding_types_61") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[60]));
			if (wcscmp(fieldName, L"forwarding_types_62") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[61]));
			if (wcscmp(fieldName, L"forwarding_types_63") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[62]));
			if (wcscmp(fieldName, L"forwarding_types_64") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[63]));
			if (wcscmp(fieldName, L"quests_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[0]));
			if (wcscmp(fieldName, L"quests_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[1]));
			if (wcscmp(fieldName, L"quests_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[2]));
			if (wcscmp(fieldName, L"quests_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[3]));
			if (wcscmp(fieldName, L"quests_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[4]));
			if (wcscmp(fieldName, L"quests_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[5]));
			if (wcscmp(fieldName, L"quests_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[6]));
			if (wcscmp(fieldName, L"quests_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[7]));
			if (wcscmp(fieldName, L"quests_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[8]));
			if (wcscmp(fieldName, L"quests_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[9]));
			if (wcscmp(fieldName, L"quests_11") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[10]));
			if (wcscmp(fieldName, L"quests_12") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[11]));
			if (wcscmp(fieldName, L"quests_13") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[12]));
			if (wcscmp(fieldName, L"quests_14") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[13]));
			if (wcscmp(fieldName, L"quests_15") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[14]));
			if (wcscmp(fieldName, L"quests_16") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[15]));
			if (wcscmp(fieldName, L"quests_17") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[16]));
			if (wcscmp(fieldName, L"quests_18") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[17]));
			if (wcscmp(fieldName, L"quests_19") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[18]));
			if (wcscmp(fieldName, L"quests_20") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[19]));
			if (wcscmp(fieldName, L"quests_21") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[20]));
			if (wcscmp(fieldName, L"quests_22") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[21]));
			if (wcscmp(fieldName, L"quests_23") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[22]));
			if (wcscmp(fieldName, L"quests_24") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[23]));
			if (wcscmp(fieldName, L"quests_25") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[24]));
			if (wcscmp(fieldName, L"quests_26") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[25]));
			if (wcscmp(fieldName, L"quests_27") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[26]));
			if (wcscmp(fieldName, L"quests_28") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[27]));
			if (wcscmp(fieldName, L"quests_29") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[28]));
			if (wcscmp(fieldName, L"quests_30") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[29]));
			if (wcscmp(fieldName, L"quests_31") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[30]));
			if (wcscmp(fieldName, L"quests_32") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[31]));
			if (wcscmp(fieldName, L"quests_33") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[32]));
			if (wcscmp(fieldName, L"quests_34") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[33]));
			if (wcscmp(fieldName, L"quests_35") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[34]));
			if (wcscmp(fieldName, L"quests_36") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[35]));
			if (wcscmp(fieldName, L"quests_37") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[36]));
			if (wcscmp(fieldName, L"quests_38") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[37]));
			if (wcscmp(fieldName, L"quests_39") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[38]));
			if (wcscmp(fieldName, L"quests_40") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[39]));
			if (wcscmp(fieldName, L"quests_41") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[40]));
			if (wcscmp(fieldName, L"quests_42") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[41]));
			if (wcscmp(fieldName, L"quests_43") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[42]));
			if (wcscmp(fieldName, L"quests_44") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[43]));
			if (wcscmp(fieldName, L"quests_45") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[44]));
			if (wcscmp(fieldName, L"quests_46") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[45]));
			if (wcscmp(fieldName, L"quests_47") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[46]));
			if (wcscmp(fieldName, L"quests_48") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[47]));
			if (wcscmp(fieldName, L"quests_49") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[48]));
			if (wcscmp(fieldName, L"quests_50") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[49]));
			if (wcscmp(fieldName, L"quests_51") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[50]));
			if (wcscmp(fieldName, L"quests_52") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[51]));
			if (wcscmp(fieldName, L"quests_53") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[52]));
			if (wcscmp(fieldName, L"quests_54") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[53]));
			if (wcscmp(fieldName, L"quests_55") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[54]));
			if (wcscmp(fieldName, L"quests_56") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[55]));
			if (wcscmp(fieldName, L"quests_57") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[56]));
			if (wcscmp(fieldName, L"quests_58") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[57]));
			if (wcscmp(fieldName, L"quests_59") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[58]));
			if (wcscmp(fieldName, L"quests_60") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[59]));
			if (wcscmp(fieldName, L"quests_61") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[60]));
			if (wcscmp(fieldName, L"quests_62") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[61]));
			if (wcscmp(fieldName, L"quests_63") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[62]));
			if (wcscmp(fieldName, L"quests_64") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[63]));
			if (wcscmp(fieldName, L"missions_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[0]));
			if (wcscmp(fieldName, L"missions_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[1]));
			if (wcscmp(fieldName, L"missions_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[2]));
			if (wcscmp(fieldName, L"missions_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[3]));
			if (wcscmp(fieldName, L"missions_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[4]));
			if (wcscmp(fieldName, L"missions_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[5]));
			if (wcscmp(fieldName, L"missions_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[6]));
			if (wcscmp(fieldName, L"missions_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[7]));
			if (wcscmp(fieldName, L"missions_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[8]));
			if (wcscmp(fieldName, L"missions_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[9]));
			if (wcscmp(fieldName, L"missions_11") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[10]));
			if (wcscmp(fieldName, L"missions_12") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[11]));
			if (wcscmp(fieldName, L"missions_13") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[12]));
			if (wcscmp(fieldName, L"missions_14") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[13]));
			if (wcscmp(fieldName, L"missions_15") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[14]));
			if (wcscmp(fieldName, L"missions_16") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[15]));
			if (wcscmp(fieldName, L"missions_17") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[16]));
			if (wcscmp(fieldName, L"missions_18") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[17]));
			if (wcscmp(fieldName, L"missions_19") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[18]));
			if (wcscmp(fieldName, L"missions_20") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[19]));
			if (wcscmp(fieldName, L"missions_21") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[20]));
			if (wcscmp(fieldName, L"missions_22") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[21]));
			if (wcscmp(fieldName, L"missions_23") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[22]));
			if (wcscmp(fieldName, L"missions_24") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[23]));
			if (wcscmp(fieldName, L"missions_25") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[24]));
			if (wcscmp(fieldName, L"missions_26") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[25]));
			if (wcscmp(fieldName, L"missions_27") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[26]));
			if (wcscmp(fieldName, L"missions_28") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[27]));
			if (wcscmp(fieldName, L"missions_29") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[28]));
			if (wcscmp(fieldName, L"missions_30") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[29]));
			if (wcscmp(fieldName, L"missions_31") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[30]));
			if (wcscmp(fieldName, L"missions_32") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[31]));
			if (wcscmp(fieldName, L"missions_33") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[32]));
			if (wcscmp(fieldName, L"missions_34") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[33]));
			if (wcscmp(fieldName, L"missions_35") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[34]));
			if (wcscmp(fieldName, L"missions_36") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[35]));
			if (wcscmp(fieldName, L"missions_37") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[36]));
			if (wcscmp(fieldName, L"missions_38") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[37]));
			if (wcscmp(fieldName, L"missions_39") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[38]));
			if (wcscmp(fieldName, L"missions_40") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[39]));
			if (wcscmp(fieldName, L"missions_41") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[40]));
			if (wcscmp(fieldName, L"missions_42") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[41]));
			if (wcscmp(fieldName, L"missions_43") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[42]));
			if (wcscmp(fieldName, L"missions_44") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[43]));
			if (wcscmp(fieldName, L"missions_45") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[44]));
			if (wcscmp(fieldName, L"missions_46") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[45]));
			if (wcscmp(fieldName, L"missions_47") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[46]));
			if (wcscmp(fieldName, L"missions_48") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[47]));
			if (wcscmp(fieldName, L"missions_49") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[48]));
			if (wcscmp(fieldName, L"missions_50") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[49]));
			if (wcscmp(fieldName, L"missions_51") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[50]));
			if (wcscmp(fieldName, L"missions_52") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[51]));
			if (wcscmp(fieldName, L"missions_53") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[52]));
			if (wcscmp(fieldName, L"missions_54") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[53]));
			if (wcscmp(fieldName, L"missions_55") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[54]));
			if (wcscmp(fieldName, L"missions_56") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[55]));
			if (wcscmp(fieldName, L"missions_57") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[56]));
			if (wcscmp(fieldName, L"missions_58") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[57]));
			if (wcscmp(fieldName, L"missions_59") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[58]));
			if (wcscmp(fieldName, L"missions_60") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[59]));
			if (wcscmp(fieldName, L"missions_61") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[60]));
			if (wcscmp(fieldName, L"missions_62") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[61]));
			if (wcscmp(fieldName, L"missions_63") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[62]));
			if (wcscmp(fieldName, L"missions_64") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[63]));
			if (wcscmp(fieldName, L"cases_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[0]));
			if (wcscmp(fieldName, L"cases_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[1]));
			if (wcscmp(fieldName, L"cases_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[2]));
			if (wcscmp(fieldName, L"cases_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[3]));
			if (wcscmp(fieldName, L"cases_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[4]));
			if (wcscmp(fieldName, L"cases_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[5]));
			if (wcscmp(fieldName, L"cases_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[6]));
			if (wcscmp(fieldName, L"cases_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[7]));
			if (wcscmp(fieldName, L"cases_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[8]));
			if (wcscmp(fieldName, L"cases_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[9]));
			if (wcscmp(fieldName, L"cases_11") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[10]));
			if (wcscmp(fieldName, L"cases_12") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[11]));
			if (wcscmp(fieldName, L"cases_13") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[12]));
			if (wcscmp(fieldName, L"cases_14") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[13]));
			if (wcscmp(fieldName, L"cases_15") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[14]));
			if (wcscmp(fieldName, L"cases_16") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[15]));
			if (wcscmp(fieldName, L"cases_17") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[16]));
			if (wcscmp(fieldName, L"cases_18") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[17]));
			if (wcscmp(fieldName, L"cases_19") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[18]));
			if (wcscmp(fieldName, L"cases_20") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[19]));
			if (wcscmp(fieldName, L"cases_21") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[20]));
			if (wcscmp(fieldName, L"cases_22") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[21]));
			if (wcscmp(fieldName, L"cases_23") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[22]));
			if (wcscmp(fieldName, L"cases_24") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[23]));
			if (wcscmp(fieldName, L"cases_25") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[24]));
			if (wcscmp(fieldName, L"cases_26") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[25]));
			if (wcscmp(fieldName, L"cases_27") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[26]));
			if (wcscmp(fieldName, L"cases_28") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[27]));
			if (wcscmp(fieldName, L"cases_29") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[28]));
			if (wcscmp(fieldName, L"cases_30") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[29]));
			if (wcscmp(fieldName, L"cases_31") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[30]));
			if (wcscmp(fieldName, L"cases_32") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[31]));
			if (wcscmp(fieldName, L"cases_33") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[32]));
			if (wcscmp(fieldName, L"cases_34") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[33]));
			if (wcscmp(fieldName, L"cases_35") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[34]));
			if (wcscmp(fieldName, L"cases_36") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[35]));
			if (wcscmp(fieldName, L"cases_37") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[36]));
			if (wcscmp(fieldName, L"cases_38") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[37]));
			if (wcscmp(fieldName, L"cases_39") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[38]));
			if (wcscmp(fieldName, L"cases_40") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[39]));
			if (wcscmp(fieldName, L"cases_41") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[40]));
			if (wcscmp(fieldName, L"cases_42") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[41]));
			if (wcscmp(fieldName, L"cases_43") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[42]));
			if (wcscmp(fieldName, L"cases_44") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[43]));
			if (wcscmp(fieldName, L"cases_45") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[44]));
			if (wcscmp(fieldName, L"cases_46") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[45]));
			if (wcscmp(fieldName, L"cases_47") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[46]));
			if (wcscmp(fieldName, L"cases_48") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[47]));
			if (wcscmp(fieldName, L"cases_49") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[48]));
			if (wcscmp(fieldName, L"cases_50") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[49]));
			if (wcscmp(fieldName, L"cases_51") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[50]));
			if (wcscmp(fieldName, L"cases_52") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[51]));
			if (wcscmp(fieldName, L"cases_53") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[52]));
			if (wcscmp(fieldName, L"cases_54") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[53]));
			if (wcscmp(fieldName, L"cases_55") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[54]));
			if (wcscmp(fieldName, L"cases_56") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[55]));
			if (wcscmp(fieldName, L"cases_57") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[56]));
			if (wcscmp(fieldName, L"cases_58") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[57]));
			if (wcscmp(fieldName, L"cases_59") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[58]));
			if (wcscmp(fieldName, L"cases_60") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[59]));
			if (wcscmp(fieldName, L"cases_61") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[60]));
			if (wcscmp(fieldName, L"cases_62") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[61]));
			if (wcscmp(fieldName, L"cases_63") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[62]));
			if (wcscmp(fieldName, L"cases_64") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[63]));
			if (wcscmp(fieldName, L"case_subtypes_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[0]));
			if (wcscmp(fieldName, L"case_subtypes_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[1]));
			if (wcscmp(fieldName, L"case_subtypes_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[2]));
			if (wcscmp(fieldName, L"case_subtypes_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[3]));
			if (wcscmp(fieldName, L"case_subtypes_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[4]));
			if (wcscmp(fieldName, L"case_subtypes_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[5]));
			if (wcscmp(fieldName, L"case_subtypes_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[6]));
			if (wcscmp(fieldName, L"case_subtypes_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[7]));
			if (wcscmp(fieldName, L"case_subtypes_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[8]));
			if (wcscmp(fieldName, L"case_subtypes_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[9]));
			if (wcscmp(fieldName, L"case_subtypes_11") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[10]));
			if (wcscmp(fieldName, L"case_subtypes_12") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[11]));
			if (wcscmp(fieldName, L"case_subtypes_13") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[12]));
			if (wcscmp(fieldName, L"case_subtypes_14") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[13]));
			if (wcscmp(fieldName, L"case_subtypes_15") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[14]));
			if (wcscmp(fieldName, L"case_subtypes_16") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[15]));
			if (wcscmp(fieldName, L"case_subtypes_17") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[16]));
			if (wcscmp(fieldName, L"case_subtypes_18") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[17]));
			if (wcscmp(fieldName, L"case_subtypes_19") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[18]));
			if (wcscmp(fieldName, L"case_subtypes_20") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[19]));
			if (wcscmp(fieldName, L"case_subtypes_21") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[20]));
			if (wcscmp(fieldName, L"case_subtypes_22") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[21]));
			if (wcscmp(fieldName, L"case_subtypes_23") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[22]));
			if (wcscmp(fieldName, L"case_subtypes_24") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[23]));
			if (wcscmp(fieldName, L"case_subtypes_25") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[24]));
			if (wcscmp(fieldName, L"case_subtypes_26") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[25]));
			if (wcscmp(fieldName, L"case_subtypes_27") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[26]));
			if (wcscmp(fieldName, L"case_subtypes_28") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[27]));
			if (wcscmp(fieldName, L"case_subtypes_29") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[28]));
			if (wcscmp(fieldName, L"case_subtypes_30") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[29]));
			if (wcscmp(fieldName, L"case_subtypes_31") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[30]));
			if (wcscmp(fieldName, L"case_subtypes_32") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[31]));
			if (wcscmp(fieldName, L"case_subtypes_33") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[32]));
			if (wcscmp(fieldName, L"case_subtypes_34") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[33]));
			if (wcscmp(fieldName, L"case_subtypes_35") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[34]));
			if (wcscmp(fieldName, L"case_subtypes_36") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[35]));
			if (wcscmp(fieldName, L"case_subtypes_37") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[36]));
			if (wcscmp(fieldName, L"case_subtypes_38") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[37]));
			if (wcscmp(fieldName, L"case_subtypes_39") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[38]));
			if (wcscmp(fieldName, L"case_subtypes_40") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[39]));
			if (wcscmp(fieldName, L"case_subtypes_41") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[40]));
			if (wcscmp(fieldName, L"case_subtypes_42") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[41]));
			if (wcscmp(fieldName, L"case_subtypes_43") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[42]));
			if (wcscmp(fieldName, L"case_subtypes_44") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[43]));
			if (wcscmp(fieldName, L"case_subtypes_45") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[44]));
			if (wcscmp(fieldName, L"case_subtypes_46") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[45]));
			if (wcscmp(fieldName, L"case_subtypes_47") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[46]));
			if (wcscmp(fieldName, L"case_subtypes_48") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[47]));
			if (wcscmp(fieldName, L"case_subtypes_49") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[48]));
			if (wcscmp(fieldName, L"case_subtypes_50") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[49]));
			if (wcscmp(fieldName, L"case_subtypes_51") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[50]));
			if (wcscmp(fieldName, L"case_subtypes_52") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[51]));
			if (wcscmp(fieldName, L"case_subtypes_53") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[52]));
			if (wcscmp(fieldName, L"case_subtypes_54") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[53]));
			if (wcscmp(fieldName, L"case_subtypes_55") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[54]));
			if (wcscmp(fieldName, L"case_subtypes_56") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[55]));
			if (wcscmp(fieldName, L"case_subtypes_57") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[56]));
			if (wcscmp(fieldName, L"case_subtypes_58") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[57]));
			if (wcscmp(fieldName, L"case_subtypes_59") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[58]));
			if (wcscmp(fieldName, L"case_subtypes_60") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[59]));
			if (wcscmp(fieldName, L"case_subtypes_61") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[60]));
			if (wcscmp(fieldName, L"case_subtypes_62") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[61]));
			if (wcscmp(fieldName, L"case_subtypes_63") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[62]));
			if (wcscmp(fieldName, L"case_subtypes_64") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[63]));
			if (wcscmp(fieldName, L"attack_power_equip_min") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_power_equip_min);
			if (wcscmp(fieldName, L"attack_power_equip_max") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_power_equip_max);
			if (wcscmp(fieldName, L"defend_power_equip_value") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_power_equip_value);
			if (wcscmp(fieldName, L"defend_resist_power_equip_value") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_resist_power_equip_value);
			if (wcscmp(fieldName, L"attack_hit_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_hit_base_percent);
			if (wcscmp(fieldName, L"attack_hit_value") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_hit_value);
			if (wcscmp(fieldName, L"attack_hit_value_equip") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_hit_value_equip);
			if (wcscmp(fieldName, L"attack_pierce_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_pierce_base_percent);
			if (wcscmp(fieldName, L"attack_parry_pierce_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_parry_pierce_percent);
			if (wcscmp(fieldName, L"attack_pierce_value") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_pierce_value);
			if (wcscmp(fieldName, L"attack_pierce_value_equip") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_pierce_value_equip);
			if (wcscmp(fieldName, L"attack_critical_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_critical_base_percent);
			if (wcscmp(fieldName, L"attack_critical_damage_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_critical_damage_percent);
			if (wcscmp(fieldName, L"attack_critical_value") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_critical_value);
			if (wcscmp(fieldName, L"attack_critical_value_equip") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_critical_value_equip);
			if (wcscmp(fieldName, L"attack_critical_damage_value") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_critical_damage_value);
			if (wcscmp(fieldName, L"attack_critical_damage_value_equip") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_critical_damage_value_equip);
			if (wcscmp(fieldName, L"defend_critical_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_critical_base_percent);
			if (wcscmp(fieldName, L"defend_critical_damage_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_critical_damage_percent);
			if (wcscmp(fieldName, L"defend_critical_value") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_critical_value);
			if (wcscmp(fieldName, L"defend_critical_value_equip") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_critical_value_equip);
			if (wcscmp(fieldName, L"defend_dodge_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_dodge_base_percent);
			if (wcscmp(fieldName, L"defend_dodge_value") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_dodge_value);
			if (wcscmp(fieldName, L"defend_dodge_value_equip") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_dodge_value_equip);
			if (wcscmp(fieldName, L"defend_parry_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_parry_base_percent);
			if (wcscmp(fieldName, L"defend_parry_value") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_parry_value);
			if (wcscmp(fieldName, L"defend_parry_value_equip") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_parry_value_equip);
			if (wcscmp(fieldName, L"attack_stiff_duration_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_stiff_duration_base_percent);
			if (wcscmp(fieldName, L"attack_stiff_duration_value") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_stiff_duration_value);
			if (wcscmp(fieldName, L"defend_stiff_duration_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_stiff_duration_base_percent);
			if (wcscmp(fieldName, L"defend_stiff_duration_value") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_stiff_duration_value);
			if (wcscmp(fieldName, L"cast_duration_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&cast_duration_base_percent);
			if (wcscmp(fieldName, L"cast_duration_value") == 0) return Data::AnyFieldToStringConverter::ToString(&cast_duration_value);
			if (wcscmp(fieldName, L"defend_physical_damage_reduce_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_physical_damage_reduce_percent);
			if (wcscmp(fieldName, L"defend_force_damage_reduce_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_force_damage_reduce_percent);
			if (wcscmp(fieldName, L"attack_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_damage_modify_percent);
			if (wcscmp(fieldName, L"attack_damage_modify_diff") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_damage_modify_diff);
			if (wcscmp(fieldName, L"defend_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_damage_modify_percent);
			if (wcscmp(fieldName, L"defend_damage_modify_diff") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_damage_modify_diff);
			if (wcscmp(fieldName, L"max_hp") == 0) return Data::AnyFieldToStringConverter::ToString(&max_hp);
			if (wcscmp(fieldName, L"max_hp_equip") == 0) return Data::AnyFieldToStringConverter::ToString(&max_hp_equip);
			if (wcscmp(fieldName, L"hp_regen") == 0) return Data::AnyFieldToStringConverter::ToString(&hp_regen);
			if (wcscmp(fieldName, L"hp_regen_equip") == 0) return Data::AnyFieldToStringConverter::ToString(&hp_regen_equip);
			if (wcscmp(fieldName, L"hp_regen_combat") == 0) return Data::AnyFieldToStringConverter::ToString(&hp_regen_combat);
			if (wcscmp(fieldName, L"hp_regen_combat_equip") == 0) return Data::AnyFieldToStringConverter::ToString(&hp_regen_combat_equip);
			if (wcscmp(fieldName, L"max_guard_gauge") == 0) return Data::AnyFieldToStringConverter::ToString(&max_guard_gauge);
			if (wcscmp(fieldName, L"max_guard_gauge_equip") == 0) return Data::AnyFieldToStringConverter::ToString(&max_guard_gauge_equip);
			if (wcscmp(fieldName, L"attack_concentrate_value") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_concentrate_value);
			if (wcscmp(fieldName, L"attack_concentrate_value_equip") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_concentrate_value_equip);
			if (wcscmp(fieldName, L"defend_perfect_parry_reduce_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_perfect_parry_reduce_percent);
			if (wcscmp(fieldName, L"defend_counter_reduce_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_counter_reduce_percent);
			if (wcscmp(fieldName, L"attack_attribute_value") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_attribute_value);
			if (wcscmp(fieldName, L"attack_attribute_value_equip") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_attribute_value_equip);
			if (wcscmp(fieldName, L"attack_attribute_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attack_attribute_base_percent);
			if (wcscmp(fieldName, L"pve_boss_level_npc_attack_power_equip_min") == 0) return Data::AnyFieldToStringConverter::ToString(&pve_boss_level_npc_attack_power_equip_min);
			if (wcscmp(fieldName, L"pve_boss_level_npc_attack_power_equip_max") == 0) return Data::AnyFieldToStringConverter::ToString(&pve_boss_level_npc_attack_power_equip_max);
			if (wcscmp(fieldName, L"pve_boss_level_npc_defend_power_equip_value") == 0) return Data::AnyFieldToStringConverter::ToString(&pve_boss_level_npc_defend_power_equip_value);
			if (wcscmp(fieldName, L"pvp_attack_power_equip_min") == 0) return Data::AnyFieldToStringConverter::ToString(&pvp_attack_power_equip_min);
			if (wcscmp(fieldName, L"pvp_attack_power_equip_max") == 0) return Data::AnyFieldToStringConverter::ToString(&pvp_attack_power_equip_max);
			if (wcscmp(fieldName, L"pvp_defend_power_equip_value") == 0) return Data::AnyFieldToStringConverter::ToString(&pvp_defend_power_equip_value);
			if (wcscmp(fieldName, L"r_attack_stiff_duration_equip_value") == 0) return Data::AnyFieldToStringConverter::ToString(&r_attack_stiff_duration_equip_value);
			if (wcscmp(fieldName, L"r_defend_stiff_duration_equip_value") == 0) return Data::AnyFieldToStringConverter::ToString(&r_defend_stiff_duration_equip_value);
			if (wcscmp(fieldName, L"r_aoe_defend_power_value_equip") == 0) return Data::AnyFieldToStringConverter::ToString(&r_aoe_defend_power_value_equip);
			if (wcscmp(fieldName, L"r_heal_power_equip_value") == 0) return Data::AnyFieldToStringConverter::ToString(&r_heal_power_equip_value);
			if (wcscmp(fieldName, L"r_defend_strength_equip_value") == 0) return Data::AnyFieldToStringConverter::ToString(&r_defend_strength_equip_value);
			if (wcscmp(fieldName, L"r_attack_precise_equip_value") == 0) return Data::AnyFieldToStringConverter::ToString(&r_attack_precise_equip_value);
			if (wcscmp(fieldName, L"r_attack_aoe_pierce_value_equip") == 0) return Data::AnyFieldToStringConverter::ToString(&r_attack_aoe_pierce_value_equip);
			if (wcscmp(fieldName, L"r_attack_abnormal_hit_equip_value") == 0) return Data::AnyFieldToStringConverter::ToString(&r_attack_abnormal_hit_equip_value);
			if (wcscmp(fieldName, L"r_defend_abnormal_dodge_equip_value") == 0) return Data::AnyFieldToStringConverter::ToString(&r_defend_abnormal_dodge_equip_value);
			if (wcscmp(fieldName, L"r_support_power_equip_value") == 0) return Data::AnyFieldToStringConverter::ToString(&r_support_power_equip_value);
			if (wcscmp(fieldName, L"r_hypermove_power_equip_value") == 0) return Data::AnyFieldToStringConverter::ToString(&r_hypermove_power_equip_value);
			if (wcscmp(fieldName, L"defend_difficulty_type_damage_reduce_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_difficulty_type_damage_reduce_percent);
			if (wcscmp(fieldName, L"race_type_1_attack_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&race_type_1_attack_damage_modify_percent);
			if (wcscmp(fieldName, L"race_type_2_attack_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&race_type_2_attack_damage_modify_percent);
			if (wcscmp(fieldName, L"race_type_3_attack_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&race_type_3_attack_damage_modify_percent);
			if (wcscmp(fieldName, L"race_type_4_attack_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&race_type_4_attack_damage_modify_percent);
			if (wcscmp(fieldName, L"race_type_5_attack_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&race_type_5_attack_damage_modify_percent);
			if (wcscmp(fieldName, L"race_type_6_attack_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&race_type_6_attack_damage_modify_percent);
			if (wcscmp(fieldName, L"race_type_7_attack_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&race_type_7_attack_damage_modify_percent);
			if (wcscmp(fieldName, L"race_type_1_defend_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&race_type_1_defend_damage_modify_percent);
			if (wcscmp(fieldName, L"race_type_2_defend_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&race_type_2_defend_damage_modify_percent);
			if (wcscmp(fieldName, L"race_type_3_defend_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&race_type_3_defend_damage_modify_percent);
			if (wcscmp(fieldName, L"race_type_4_defend_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&race_type_4_defend_damage_modify_percent);
			if (wcscmp(fieldName, L"race_type_5_defend_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&race_type_5_defend_damage_modify_percent);
			if (wcscmp(fieldName, L"race_type_6_defend_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&race_type_6_defend_damage_modify_percent);
			if (wcscmp(fieldName, L"race_type_7_defend_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&race_type_7_defend_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_1_attack_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_1_attack_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_2_attack_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_2_attack_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_3_attack_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_3_attack_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_4_attack_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_4_attack_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_5_attack_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_5_attack_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_6_attack_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_6_attack_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_7_attack_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_7_attack_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_8_attack_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_8_attack_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_9_attack_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_9_attack_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_10_attack_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_10_attack_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_11_attack_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_11_attack_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_12_attack_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_12_attack_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_1_defend_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_1_defend_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_2_defend_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_2_defend_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_3_defend_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_3_defend_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_4_defend_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_4_defend_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_5_defend_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_5_defend_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_6_defend_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_6_defend_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_7_defend_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_7_defend_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_8_defend_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_8_defend_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_9_defend_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_9_defend_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_10_defend_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_10_defend_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_11_defend_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_11_defend_damage_modify_percent);
			if (wcscmp(fieldName, L"attribute_type_12_defend_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&attribute_type_12_defend_damage_modify_percent);
			if (wcscmp(fieldName, L"defend_critical_damage_value") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_critical_damage_value);
			if (wcscmp(fieldName, L"defend_critical_damage_value_equip") == 0) return Data::AnyFieldToStringConverter::ToString(&defend_critical_damage_value_equip);
			if (wcscmp(fieldName, L"job_ability_1") == 0) return Data::AnyFieldToStringConverter::ToString(&job_ability_1);
			if (wcscmp(fieldName, L"job_ability_2") == 0) return Data::AnyFieldToStringConverter::ToString(&job_ability_2);
			if (wcscmp(fieldName, L"heal_power_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&heal_power_base_percent);
			if (wcscmp(fieldName, L"heal_power_value") == 0) return Data::AnyFieldToStringConverter::ToString(&heal_power_value);
			if (wcscmp(fieldName, L"heal_power_diff") == 0) return Data::AnyFieldToStringConverter::ToString(&heal_power_diff);
			if (wcscmp(fieldName, L"aoe_defend_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&aoe_defend_base_percent);
			if (wcscmp(fieldName, L"aoe_defend_power_value") == 0) return Data::AnyFieldToStringConverter::ToString(&aoe_defend_power_value);
			if (wcscmp(fieldName, L"abnormal_attack_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&abnormal_attack_base_percent);
			if (wcscmp(fieldName, L"abnormal_attack_power_value") == 0) return Data::AnyFieldToStringConverter::ToString(&abnormal_attack_power_value);
			if (wcscmp(fieldName, L"abnormal_attack_power_value_equip") == 0) return Data::AnyFieldToStringConverter::ToString(&abnormal_attack_power_value_equip);
			if (wcscmp(fieldName, L"abnormal_defend_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&abnormal_defend_base_percent);
			if (wcscmp(fieldName, L"abnormal_defend_power_value") == 0) return Data::AnyFieldToStringConverter::ToString(&abnormal_defend_power_value);
			if (wcscmp(fieldName, L"hate_power_equip_value") == 0) return Data::AnyFieldToStringConverter::ToString(&hate_power_equip_value);
			if (wcscmp(fieldName, L"additional_exp_diff_by_kill") == 0) return Data::AnyFieldToStringConverter::ToString(&additional_exp_diff_by_kill);
			if (wcscmp(fieldName, L"additional_exp_percent_by_kill") == 0) return Data::AnyFieldToStringConverter::ToString(&additional_exp_percent_by_kill);
			if (wcscmp(fieldName, L"potential_attack_power_equip_min") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_attack_power_equip_min);
			if (wcscmp(fieldName, L"potential_attack_power_equip_max") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_attack_power_equip_max);
			if (wcscmp(fieldName, L"potential_defend_power_equip_value") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_defend_power_equip_value);
			if (wcscmp(fieldName, L"potential_defend_resist_power_equip_value") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_defend_resist_power_equip_value);
			if (wcscmp(fieldName, L"potential_attack_hit_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_attack_hit_base_percent);
			if (wcscmp(fieldName, L"potential_attack_hit_value") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_attack_hit_value);
			if (wcscmp(fieldName, L"potential_attack_pierce_value") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_attack_pierce_value);
			if (wcscmp(fieldName, L"potential_attack_critical_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_attack_critical_base_percent);
			if (wcscmp(fieldName, L"potential_attack_critical_damage_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_attack_critical_damage_percent);
			if (wcscmp(fieldName, L"potential_attack_critical_value") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_attack_critical_value);
			if (wcscmp(fieldName, L"potential_defend_critical_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_defend_critical_base_percent);
			if (wcscmp(fieldName, L"potential_defend_critical_value") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_defend_critical_value);
			if (wcscmp(fieldName, L"potential_defend_dodge_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_defend_dodge_base_percent);
			if (wcscmp(fieldName, L"potential_defend_dodge_value") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_defend_dodge_value);
			if (wcscmp(fieldName, L"potential_defend_parry_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_defend_parry_base_percent);
			if (wcscmp(fieldName, L"potential_defend_parry_value") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_defend_parry_value);
			if (wcscmp(fieldName, L"potential_attack_stiff_duration_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_attack_stiff_duration_base_percent);
			if (wcscmp(fieldName, L"potential_attack_stiff_duration_value") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_attack_stiff_duration_value);
			if (wcscmp(fieldName, L"potential_defend_stiff_duration_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_defend_stiff_duration_base_percent);
			if (wcscmp(fieldName, L"potential_defend_stiff_duration_value") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_defend_stiff_duration_value);
			if (wcscmp(fieldName, L"potential_cast_duration_base_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_cast_duration_base_percent);
			if (wcscmp(fieldName, L"potential_cast_duration_value") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_cast_duration_value);
			if (wcscmp(fieldName, L"potential_defend_physical_damage_reduce_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_defend_physical_damage_reduce_percent);
			if (wcscmp(fieldName, L"potential_defend_force_damage_reduce_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_defend_force_damage_reduce_percent);
			if (wcscmp(fieldName, L"potential_attack_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_attack_damage_modify_percent);
			if (wcscmp(fieldName, L"potential_attack_damage_modify_diff") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_attack_damage_modify_diff);
			if (wcscmp(fieldName, L"potential_defend_damage_modify_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_defend_damage_modify_percent);
			if (wcscmp(fieldName, L"potential_defend_damage_modify_diff") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_defend_damage_modify_diff);
			if (wcscmp(fieldName, L"potential_attack_concentrate_value") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_attack_concentrate_value);
			if (wcscmp(fieldName, L"potential_defend_perfect_parry_reduce_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_defend_perfect_parry_reduce_percent);
			if (wcscmp(fieldName, L"potential_defend_counter_reduce_percent") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_defend_counter_reduce_percent);
			if (wcscmp(fieldName, L"potential_max_hp") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_max_hp);
			if (wcscmp(fieldName, L"potential_hp_regen") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_hp_regen);
			if (wcscmp(fieldName, L"potential_hp_regen_combat") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_hp_regen_combat);
			if (wcscmp(fieldName, L"potential_max_guard_gauge") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_max_guard_gauge);
			if (wcscmp(fieldName, L"potential_pve_boss_level_npc_attack_power_equip_min") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_pve_boss_level_npc_attack_power_equip_min);
			if (wcscmp(fieldName, L"potential_pve_boss_level_npc_attack_power_equip_max") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_pve_boss_level_npc_attack_power_equip_max);
			if (wcscmp(fieldName, L"potential_pve_boss_level_npc_defend_power_equip_value") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_pve_boss_level_npc_defend_power_equip_value);
			if (wcscmp(fieldName, L"potential_pvp_attack_power_equip_min") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_pvp_attack_power_equip_min);
			if (wcscmp(fieldName, L"potential_pvp_attack_power_equip_max") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_pvp_attack_power_equip_max);
			if (wcscmp(fieldName, L"potential_pvp_defend_power_equip_value") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_pvp_defend_power_equip_value);
			if (wcscmp(fieldName, L"potential_attack_attribute_value_equip") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_attack_attribute_value_equip);
			if (wcscmp(fieldName, L"potential_abnormal_attack_power_value_equip") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_abnormal_attack_power_value_equip);
			if (wcscmp(fieldName, L"potential_abnormal_defend_power_value") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_abnormal_defend_power_value);
			if (wcscmp(fieldName, L"potential_heal_power_value") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_heal_power_value);
			if (wcscmp(fieldName, L"potential_attack_critical_damage_value_equip") == 0) return Data::AnyFieldToStringConverter::ToString(&potential_attack_critical_damage_value_equip);
			if (wcscmp(fieldName, L"item_sound_move") == 0) return Data::AnyFieldToStringConverter::ToString(&item_sound_move);
			if (wcscmp(fieldName, L"item_sound_dragstart") == 0) return Data::AnyFieldToStringConverter::ToString(&item_sound_dragstart);
			if (wcscmp(fieldName, L"item_sound_itemdrop") == 0) return Data::AnyFieldToStringConverter::ToString(&item_sound_itemdrop);
			if (wcscmp(fieldName, L"main_ability_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(main_ability[0]));
			if (wcscmp(fieldName, L"main_ability_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(main_ability[1]));
			if (wcscmp(fieldName, L"pccafe_ncsoft_korea_only") == 0) return Data::AnyFieldToStringConverter::ToString(&pccafe_ncsoft_korea_only);
			if (wcscmp(fieldName, L"growth_id") == 0) return Data::AnyFieldToStringConverter::ToString(&growth_id);
			if (wcscmp(fieldName, L"growth_level_max") == 0) return Data::AnyFieldToStringConverter::ToString(&growth_level_max);
			if (wcscmp(fieldName, L"growth_step") == 0) return Data::AnyFieldToStringConverter::ToString(&growth_step);
			if (wcscmp(fieldName, L"growth_efficient_level") == 0) return Data::AnyFieldToStringConverter::ToString(&growth_efficient_level);
			if (wcscmp(fieldName, L"growth_exp_scale") == 0) return Data::AnyFieldToStringConverter::ToString(&growth_exp_scale);
			if (wcscmp(fieldName, L"random_option_group_id") == 0) return Data::AnyFieldToStringConverter::ToString(&random_option_group_id);
			if (wcscmp(fieldName, L"has_random_option_group_data_flag") == 0) return Data::AnyFieldToStringConverter::ToString(&has_random_option_group_data_flag);
			if (wcscmp(fieldName, L"growth_recipe_exp_min") == 0) return Data::AnyFieldToStringConverter::ToString(&growth_recipe_exp_min);
			if (wcscmp(fieldName, L"growth_recipe_exp_max") == 0) return Data::AnyFieldToStringConverter::ToString(&growth_recipe_exp_max);
			if (wcscmp(fieldName, L"growth_recipe_exp_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(growth_recipe_exp[0]));
			if (wcscmp(fieldName, L"growth_recipe_exp_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(growth_recipe_exp[1]));
			if (wcscmp(fieldName, L"growth_recipe_exp_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(growth_recipe_exp[2]));
			if (wcscmp(fieldName, L"growth_recipe_exp_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(growth_recipe_exp[3]));
			if (wcscmp(fieldName, L"growth_recipe_cost") == 0) return Data::AnyFieldToStringConverter::ToString(&growth_recipe_cost);
			if (wcscmp(fieldName, L"growth_recipe_material_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(growth_recipe_material[0]));
			if (wcscmp(fieldName, L"growth_recipe_material_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(growth_recipe_material[1]));
			if (wcscmp(fieldName, L"growth_recipe_material_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(growth_recipe_material[2]));
			if (wcscmp(fieldName, L"growth_recipe_material_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(growth_recipe_material[3]));
			if (wcscmp(fieldName, L"growth_recipe_material_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(growth_recipe_material[4]));
			if (wcscmp(fieldName, L"growth_recipe_material_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(growth_recipe_material[5]));
			if (wcscmp(fieldName, L"growth_recipe_material_count_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(growth_recipe_material_count[0]));
			if (wcscmp(fieldName, L"growth_recipe_material_count_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(growth_recipe_material_count[1]));
			if (wcscmp(fieldName, L"growth_recipe_material_count_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(growth_recipe_material_count[2]));
			if (wcscmp(fieldName, L"growth_recipe_material_count_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(growth_recipe_material_count[3]));
			if (wcscmp(fieldName, L"growth_recipe_material_count_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(growth_recipe_material_count[4]));
			if (wcscmp(fieldName, L"growth_recipe_material_count_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(growth_recipe_material_count[5]));
			if (wcscmp(fieldName, L"growth_fail_probability") == 0) return Data::AnyFieldToStringConverter::ToString(&growth_fail_probability);
			if (wcscmp(fieldName, L"awakening_recipe_cost") == 0) return Data::AnyFieldToStringConverter::ToString(&awakening_recipe_cost);
			if (wcscmp(fieldName, L"awakening_recipe_material_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(awakening_recipe_material[0]));
			if (wcscmp(fieldName, L"awakening_recipe_material_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(awakening_recipe_material[1]));
			if (wcscmp(fieldName, L"awakening_recipe_material_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(awakening_recipe_material[2]));
			if (wcscmp(fieldName, L"awakening_recipe_material_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(awakening_recipe_material[3]));
			if (wcscmp(fieldName, L"awakening_recipe_material_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(awakening_recipe_material[4]));
			if (wcscmp(fieldName, L"awakening_recipe_material_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(awakening_recipe_material[5]));
			if (wcscmp(fieldName, L"awakening_recipe_material_count_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(awakening_recipe_material_count[0]));
			if (wcscmp(fieldName, L"awakening_recipe_material_count_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(awakening_recipe_material_count[1]));
			if (wcscmp(fieldName, L"awakening_recipe_material_count_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(awakening_recipe_material_count[2]));
			if (wcscmp(fieldName, L"awakening_recipe_material_count_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(awakening_recipe_material_count[3]));
			if (wcscmp(fieldName, L"awakening_recipe_material_count_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(awakening_recipe_material_count[4]));
			if (wcscmp(fieldName, L"awakening_recipe_material_count_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(awakening_recipe_material_count[5]));
			if (wcscmp(fieldName, L"dispose_awakening_feed_item") == 0) return Data::AnyFieldToStringConverter::ToString(&dispose_awakening_feed_item);
			if (wcscmp(fieldName, L"dispose_awakening_material") == 0) return Data::AnyFieldToStringConverter::ToString(&dispose_awakening_material);
			if (wcscmp(fieldName, L"required_feed_item_brand_for_growth") == 0) return Data::AnyFieldToStringConverter::ToString(&required_feed_item_brand_for_growth);
			if (wcscmp(fieldName, L"required_feed_item_for_growth") == 0) return Data::AnyFieldToStringConverter::ToString(&required_feed_item_for_growth);
			if (wcscmp(fieldName, L"required_seed_item_growth_course") == 0) return Data::AnyFieldToStringConverter::ToString(&required_seed_item_growth_course);
			if (wcscmp(fieldName, L"required_seed_item_condition_type") == 0) return Data::AnyFieldToStringConverter::ToString(&required_seed_item_condition_type);
			if (wcscmp(fieldName, L"required_seed_item_equip_level_min") == 0) return Data::AnyFieldToStringConverter::ToString(&required_seed_item_equip_level_min);
			if (wcscmp(fieldName, L"required_seed_item_equip_level_max") == 0) return Data::AnyFieldToStringConverter::ToString(&required_seed_item_equip_level_max);
			if (wcscmp(fieldName, L"required_feed_item_brand_for_awakening") == 0) return Data::AnyFieldToStringConverter::ToString(&required_feed_item_brand_for_awakening);
			if (wcscmp(fieldName, L"required_feed_item_condition_type") == 0) return Data::AnyFieldToStringConverter::ToString(&required_feed_item_condition_type);
			if (wcscmp(fieldName, L"required_feed_item_level_min") == 0) return Data::AnyFieldToStringConverter::ToString(&required_feed_item_level_min);
			if (wcscmp(fieldName, L"awakening_target_item_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(awakening_target_item[0]));
			if (wcscmp(fieldName, L"awakening_target_item_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(awakening_target_item[1]));
			if (wcscmp(fieldName, L"awakening_target_item_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(awakening_target_item[2]));
			if (wcscmp(fieldName, L"awakening_target_item_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(awakening_target_item[3]));
			if (wcscmp(fieldName, L"awakening_target_item_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(awakening_target_item[4]));
			if (wcscmp(fieldName, L"required_awakening_bm_item_count") == 0) return Data::AnyFieldToStringConverter::ToString(&required_awakening_bm_item_count);
			if (wcscmp(fieldName, L"awakening_probability") == 0) return Data::AnyFieldToStringConverter::ToString(&awakening_probability);
			if (wcscmp(fieldName, L"awakening_fail_effect") == 0) return Data::AnyFieldToStringConverter::ToString(&awakening_fail_effect);
			if (wcscmp(fieldName, L"lock_enable") == 0) return Data::AnyFieldToStringConverter::ToString(&lock_enable);
			if (wcscmp(fieldName, L"time_limit_type") == 0) return Data::AnyFieldToStringConverter::ToString(&time_limit_type);
			if (wcscmp(fieldName, L"usable_duration") == 0) return Data::AnyFieldToStringConverter::ToString(&usable_duration);
			if (wcscmp(fieldName, L"fixed_expiration_time") == 0) return Data::AnyFieldToStringConverter::ToString(&fixed_expiration_time);
			if (wcscmp(fieldName, L"delete_expiration_type") == 0) return Data::AnyFieldToStringConverter::ToString(&delete_expiration_type);
			if (wcscmp(fieldName, L"event_info") == 0) return Data::AnyFieldToStringConverter::ToString(&event_info);
			if (wcscmp(fieldName, L"show_reward_preview") == 0) return Data::AnyFieldToStringConverter::ToString(&show_reward_preview);
			if (wcscmp(fieldName, L"account_post_charge") == 0) return Data::AnyFieldToStringConverter::ToString(&account_post_charge);
			if (wcscmp(fieldName, L"fusion_category_1") == 0) return Data::AnyFieldToStringConverter::ToString(&fusion_category_1);
			if (wcscmp(fieldName, L"fusion_category_2") == 0) return Data::AnyFieldToStringConverter::ToString(&fusion_category_2);
			if (wcscmp(fieldName, L"fusion_score") == 0) return Data::AnyFieldToStringConverter::ToString(&fusion_score);
			if (wcscmp(fieldName, L"boast_event_type") == 0) return Data::AnyFieldToStringConverter::ToString(&boast_event_type);
			if (wcscmp(fieldName, L"improve_id") == 0) return Data::AnyFieldToStringConverter::ToString(&improve_id);
			if (wcscmp(fieldName, L"improve_level") == 0) return Data::AnyFieldToStringConverter::ToString(&improve_level);
			if (wcscmp(fieldName, L"improve_next_item") == 0) return Data::AnyFieldToStringConverter::ToString(&improve_next_item);
			if (wcscmp(fieldName, L"improve_prev_item") == 0) return Data::AnyFieldToStringConverter::ToString(&improve_prev_item);
			if (wcscmp(fieldName, L"job_change_item_exchange_group") == 0) return Data::AnyFieldToStringConverter::ToString(&job_change_item_exchange_group);
			if (wcscmp(fieldName, L"manipulate_zone_env2_list_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(manipulate_zone_env2_list[0]));
			if (wcscmp(fieldName, L"manipulate_zone_env2_list_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(manipulate_zone_env2_list[1]));
			if (wcscmp(fieldName, L"manipulate_zone_env2_list_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(manipulate_zone_env2_list[2]));
			if (wcscmp(fieldName, L"manipulate_zone_env2_list_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(manipulate_zone_env2_list[3]));
			if (wcscmp(fieldName, L"manipulate_zone_env2_list_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(manipulate_zone_env2_list[4]));
			if (wcscmp(fieldName, L"manipulate_zone_env2_list_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(manipulate_zone_env2_list[5]));
			if (wcscmp(fieldName, L"manipulate_zone_env2_list_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(manipulate_zone_env2_list[6]));
			if (wcscmp(fieldName, L"manipulate_zone_env2_list_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(manipulate_zone_env2_list[7]));
			if (wcscmp(fieldName, L"manipulate_zone_env2_list_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(manipulate_zone_env2_list[8]));
			if (wcscmp(fieldName, L"manipulate_zone_env2_list_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(manipulate_zone_env2_list[9]));
			if (wcscmp(fieldName, L"name2") == 0) return Data::AnyFieldToStringConverter::ToString(&name2);
			if (wcscmp(fieldName, L"nickname") == 0) return Data::AnyFieldToStringConverter::ToString(&nickname);
			if (wcscmp(fieldName, L"stage_number") == 0) return Data::AnyFieldToStringConverter::ToString(&stage_number);
			if (wcscmp(fieldName, L"tag_icon") == 0) return Data::AnyFieldToStringConverter::ToString(&tag_icon);
			if (wcscmp(fieldName, L"tag_icon_grade") == 0) return Data::AnyFieldToStringConverter::ToString(&tag_icon_grade);
			if (wcscmp(fieldName, L"icon") == 0) return Data::AnyFieldToStringConverter::ToString(&icon);
			if (wcscmp(fieldName, L"kun_mesh") == 0) return Data::AnyFieldToStringConverter::ToString(&kun_mesh);
			if (wcscmp(fieldName, L"gon_male_mesh") == 0) return Data::AnyFieldToStringConverter::ToString(&gon_male_mesh);
			if (wcscmp(fieldName, L"gon_female_mesh") == 0) return Data::AnyFieldToStringConverter::ToString(&gon_female_mesh);
			if (wcscmp(fieldName, L"lyn_male_mesh") == 0) return Data::AnyFieldToStringConverter::ToString(&lyn_male_mesh);
			if (wcscmp(fieldName, L"lyn_female_mesh") == 0) return Data::AnyFieldToStringConverter::ToString(&lyn_female_mesh);
			if (wcscmp(fieldName, L"jin_male_mesh") == 0) return Data::AnyFieldToStringConverter::ToString(&jin_male_mesh);
			if (wcscmp(fieldName, L"jin_female_mesh") == 0) return Data::AnyFieldToStringConverter::ToString(&jin_female_mesh);
			if (wcscmp(fieldName, L"cat_mesh") == 0) return Data::AnyFieldToStringConverter::ToString(&cat_mesh);
			if (wcscmp(fieldName, L"kun_mesh_col_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(kun_mesh_col[0]));
			if (wcscmp(fieldName, L"kun_mesh_col_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(kun_mesh_col[1]));
			if (wcscmp(fieldName, L"kun_mesh_col_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(kun_mesh_col[2]));
			if (wcscmp(fieldName, L"gon_male_mesh_col_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(gon_male_mesh_col[0]));
			if (wcscmp(fieldName, L"gon_male_mesh_col_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(gon_male_mesh_col[1]));
			if (wcscmp(fieldName, L"gon_male_mesh_col_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(gon_male_mesh_col[2]));
			if (wcscmp(fieldName, L"gon_female_mesh_col_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(gon_female_mesh_col[0]));
			if (wcscmp(fieldName, L"gon_female_mesh_col_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(gon_female_mesh_col[1]));
			if (wcscmp(fieldName, L"gon_female_mesh_col_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(gon_female_mesh_col[2]));
			if (wcscmp(fieldName, L"lyn_male_mesh_col_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(lyn_male_mesh_col[0]));
			if (wcscmp(fieldName, L"lyn_male_mesh_col_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(lyn_male_mesh_col[1]));
			if (wcscmp(fieldName, L"lyn_male_mesh_col_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(lyn_male_mesh_col[2]));
			if (wcscmp(fieldName, L"lyn_female_mesh_col_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(lyn_female_mesh_col[0]));
			if (wcscmp(fieldName, L"lyn_female_mesh_col_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(lyn_female_mesh_col[1]));
			if (wcscmp(fieldName, L"lyn_female_mesh_col_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(lyn_female_mesh_col[2]));
			if (wcscmp(fieldName, L"jin_male_mesh_col_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(jin_male_mesh_col[0]));
			if (wcscmp(fieldName, L"jin_male_mesh_col_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(jin_male_mesh_col[1]));
			if (wcscmp(fieldName, L"jin_male_mesh_col_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(jin_male_mesh_col[2]));
			if (wcscmp(fieldName, L"jin_female_mesh_col_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(jin_female_mesh_col[0]));
			if (wcscmp(fieldName, L"jin_female_mesh_col_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(jin_female_mesh_col[1]));
			if (wcscmp(fieldName, L"jin_female_mesh_col_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(jin_female_mesh_col[2]));
			if (wcscmp(fieldName, L"cat_mesh_col_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(cat_mesh_col[0]));
			if (wcscmp(fieldName, L"cat_mesh_col_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(cat_mesh_col[1]));
			if (wcscmp(fieldName, L"cat_mesh_col_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(cat_mesh_col[2]));
			if (wcscmp(fieldName, L"mesh_id") == 0) return Data::AnyFieldToStringConverter::ToString(&mesh_id);
			if (wcscmp(fieldName, L"mesh_id_2") == 0) return Data::AnyFieldToStringConverter::ToString(&mesh_id_2);
			if (wcscmp(fieldName, L"talk_mesh") == 0) return Data::AnyFieldToStringConverter::ToString(&talk_mesh);
			if (wcscmp(fieldName, L"talk_animset") == 0) return Data::AnyFieldToStringConverter::ToString(&talk_animset);
			if (wcscmp(fieldName, L"mesh_col_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(mesh_col[0]));
			if (wcscmp(fieldName, L"mesh_col_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(mesh_col[1]));
			if (wcscmp(fieldName, L"mesh_col_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(mesh_col[2]));
			if (wcscmp(fieldName, L"mesh_animset") == 0) return Data::AnyFieldToStringConverter::ToString(&mesh_animset);
			if (wcscmp(fieldName, L"mesh_animtree") == 0) return Data::AnyFieldToStringConverter::ToString(&mesh_animtree);
			if (wcscmp(fieldName, L"mesh_attach") == 0) return Data::AnyFieldToStringConverter::ToString(&mesh_attach);
			if (wcscmp(fieldName, L"hide_beard") == 0) return Data::AnyFieldToStringConverter::ToString(&hide_beard);
			if (wcscmp(fieldName, L"hide_name") == 0) return Data::AnyFieldToStringConverter::ToString(&hide_name);
			if (wcscmp(fieldName, L"guild_item") == 0) return Data::AnyFieldToStringConverter::ToString(&guild_item);
			if (wcscmp(fieldName, L"description2") == 0) return Data::AnyFieldToStringConverter::ToString(&description2);
			if (wcscmp(fieldName, L"description4_title") == 0) return Data::AnyFieldToStringConverter::ToString(&description4_title);
			if (wcscmp(fieldName, L"description5_title") == 0) return Data::AnyFieldToStringConverter::ToString(&description5_title);
			if (wcscmp(fieldName, L"description6_title") == 0) return Data::AnyFieldToStringConverter::ToString(&description6_title);
			if (wcscmp(fieldName, L"description4") == 0) return Data::AnyFieldToStringConverter::ToString(&description4);
			if (wcscmp(fieldName, L"description5") == 0) return Data::AnyFieldToStringConverter::ToString(&description5);
			if (wcscmp(fieldName, L"description6") == 0) return Data::AnyFieldToStringConverter::ToString(&description6);
			if (wcscmp(fieldName, L"description7") == 0) return Data::AnyFieldToStringConverter::ToString(&description7);
			if (wcscmp(fieldName, L"main_info") == 0) return Data::AnyFieldToStringConverter::ToString(&main_info);
			if (wcscmp(fieldName, L"sub_info") == 0) return Data::AnyFieldToStringConverter::ToString(&sub_info);
			if (wcscmp(fieldName, L"identify_main_info") == 0) return Data::AnyFieldToStringConverter::ToString(&identify_main_info);
			if (wcscmp(fieldName, L"identify_sub_info") == 0) return Data::AnyFieldToStringConverter::ToString(&identify_sub_info);
			if (wcscmp(fieldName, L"identify_description") == 0) return Data::AnyFieldToStringConverter::ToString(&identify_description);
			if (wcscmp(fieldName, L"legend_transform_title_name") == 0) return Data::AnyFieldToStringConverter::ToString(&legend_transform_title_name);
			if (wcscmp(fieldName, L"ui_icon_state") == 0) return Data::AnyFieldToStringConverter::ToString(&ui_icon_state);
			if (wcscmp(fieldName, L"message_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(message[0]));
			if (wcscmp(fieldName, L"message_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(message[1]));
			if (wcscmp(fieldName, L"message_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(message[2]));
			if (wcscmp(fieldName, L"message_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(message[3]));
			if (wcscmp(fieldName, L"message_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(message[4]));
			if (wcscmp(fieldName, L"message_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(message[5]));
			if (wcscmp(fieldName, L"message_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(message[6]));
			if (wcscmp(fieldName, L"message_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(message[7]));
			if (wcscmp(fieldName, L"message_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(message[8]));
			if (wcscmp(fieldName, L"invoke_fx_msg") == 0) return Data::AnyFieldToStringConverter::ToString(&invoke_fx_msg);
			if (wcscmp(fieldName, L"tooltip_info") == 0) return Data::AnyFieldToStringConverter::ToString(&tooltip_info);
			if (wcscmp(fieldName, L"item_score") == 0) return Data::AnyFieldToStringConverter::ToString(&item_score);
			if (wcscmp(fieldName, L"item_style") == 0) return Data::AnyFieldToStringConverter::ToString(&item_style);

			return L"";
		}
		void AutoCorrectLookupOffsets(const char* lookupDataPtr) {
			if (reinterpret_cast<std::uintptr_t>(alias) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) alias = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(alias));
			else return;
			if (reinterpret_cast<std::uintptr_t>(item_sound_move) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) item_sound_move = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(item_sound_move));
			if (reinterpret_cast<std::uintptr_t>(item_sound_dragstart) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) item_sound_dragstart = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(item_sound_dragstart));
			if (reinterpret_cast<std::uintptr_t>(item_sound_itemdrop) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) item_sound_itemdrop = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(item_sound_itemdrop));
			if (reinterpret_cast<std::uintptr_t>(fixed_expiration_time) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) fixed_expiration_time = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(fixed_expiration_time));
			if (reinterpret_cast<std::uintptr_t>(kun_mesh) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) kun_mesh = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(kun_mesh));
			if (reinterpret_cast<std::uintptr_t>(gon_male_mesh) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) gon_male_mesh = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(gon_male_mesh));
			if (reinterpret_cast<std::uintptr_t>(gon_female_mesh) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) gon_female_mesh = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(gon_female_mesh));
			if (reinterpret_cast<std::uintptr_t>(lyn_male_mesh) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) lyn_male_mesh = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(lyn_male_mesh));
			if (reinterpret_cast<std::uintptr_t>(lyn_female_mesh) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) lyn_female_mesh = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(lyn_female_mesh));
			if (reinterpret_cast<std::uintptr_t>(jin_male_mesh) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) jin_male_mesh = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(jin_male_mesh));
			if (reinterpret_cast<std::uintptr_t>(jin_female_mesh) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) jin_female_mesh = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(jin_female_mesh));
			if (reinterpret_cast<std::uintptr_t>(cat_mesh) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) cat_mesh = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(cat_mesh));
			for (int i = 0; i < 3; i++) {
				if (reinterpret_cast<std::uintptr_t>(kun_mesh_col[i]) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) kun_mesh_col[i] = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(kun_mesh_col[i]));
			}
			for (int i = 0; i < 3; i++) {
				if (reinterpret_cast<std::uintptr_t>(gon_male_mesh_col[i]) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) gon_male_mesh_col[i] = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(gon_male_mesh_col[i]));
			}
			for (int i = 0; i < 3; i++) {
				if (reinterpret_cast<std::uintptr_t>(gon_female_mesh_col[i]) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) gon_female_mesh_col[i] = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(gon_female_mesh_col[i]));
			}
			for (int i = 0; i < 3; i++) {
				if (reinterpret_cast<std::uintptr_t>(lyn_male_mesh_col[i]) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) lyn_male_mesh_col[i] = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(lyn_male_mesh_col[i]));
			}
			for (int i = 0; i < 3; i++) {
				if (reinterpret_cast<std::uintptr_t>(lyn_female_mesh_col[i]) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) lyn_female_mesh_col[i] = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(lyn_female_mesh_col[i]));
			}
			for (int i = 0; i < 3; i++) {
				if (reinterpret_cast<std::uintptr_t>(jin_male_mesh_col[i]) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) jin_male_mesh_col[i] = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(jin_male_mesh_col[i]));
			}
			for (int i = 0; i < 3; i++) {
				if (reinterpret_cast<std::uintptr_t>(jin_female_mesh_col[i]) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) jin_female_mesh_col[i] = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(jin_female_mesh_col[i]));
			}
			for (int i = 0; i < 3; i++) {
				if (reinterpret_cast<std::uintptr_t>(cat_mesh_col[i]) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) cat_mesh_col[i] = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(cat_mesh_col[i]));
			}
			if (reinterpret_cast<std::uintptr_t>(mesh_id) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) mesh_id = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(mesh_id));
			if (reinterpret_cast<std::uintptr_t>(mesh_id_2) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) mesh_id_2 = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(mesh_id_2));
			if (reinterpret_cast<std::uintptr_t>(talk_mesh) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) talk_mesh = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(talk_mesh));
			if (reinterpret_cast<std::uintptr_t>(talk_animset) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) talk_animset = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(talk_animset));
			for (int i = 0; i < 3; i++) {
				if (reinterpret_cast<std::uintptr_t>(mesh_col[i]) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) mesh_col[i] = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(mesh_col[i]));
			}
			if (reinterpret_cast<std::uintptr_t>(mesh_animset) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) mesh_animset = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(mesh_animset));
			if (reinterpret_cast<std::uintptr_t>(mesh_animtree) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) mesh_animtree = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(mesh_animtree));
			if (reinterpret_cast<std::uintptr_t>(tooltip_info) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) tooltip_info = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(tooltip_info));
		}
		union Key
		{
            struct {
                __int32 id;
__int8 level;

            };
			unsigned __int64 key;
		};
		__declspec(align(8)) Key key;
		wchar_t* alias;
Data::TableRef item_combat[10];
int item_combat_tableId(){return 187;};
Data::TableRef brand;
int brand_tableId(){return 183;};
__int32 price;
__int32 base_fee;
__int8 game_category_1;
std::wstring game_category_1_EnumValue() const {return Get_game_category_1_EnumValue(game_category_1);};
__int8 game_category_2;
std::wstring game_category_2_EnumValue() const {return Get_game_category_2_EnumValue(game_category_2);};
__int16 game_category_3;
std::wstring game_category_3_EnumValue() const {return Get_game_category_3_EnumValue(game_category_3);};
__int8 market_category_1;
std::wstring market_category_1_EnumValue() const {return Get_market_category_1_EnumValue(market_category_1);};
__int8 market_category_2;
std::wstring market_category_2_EnumValue() const {return Get_market_category_2_EnumValue(market_category_2);};
__int16 market_category_3;
std::wstring market_category_3_EnumValue() const {return Get_market_category_3_EnumValue(market_category_3);};
bool cannot_dispose;
bool cannot_sell;
bool cannot_trade;
bool cannot_depot;
bool consume_durability;
bool auctionable;
bool seal_renewal_auctionable;
bool party_auction_exclusion;
bool acquire_used;
bool equip_used;
bool account_used;
char Pad0[1];
Data::TableRef filter_equip[4];
int filter_equip_tableId(){return 141;};
Data::TableRef effect_equip[4];
int effect_equip_tableId(){return 111;};
__int32 gear_score;
__int8 equip_level;
__int8 equip_level_max;
__int8 equip_mastery_level;
__int8 equip_job_check[5];
std::wstring equip_job_check_EnumValue(int index) const {return Get_equip_job_check_EnumValue(equip_job_check[index]);};
__int8 equip_sex;
std::wstring equip_sex_EnumValue() const {return Get_equip_sex_EnumValue(equip_sex);};
__int8 equip_race;
std::wstring equip_race_EnumValue() const {return Get_equip_race_EnumValue(equip_race);};
__int8 equip_type;
std::wstring equip_type_EnumValue() const {return Get_equip_type_EnumValue(equip_type);};
__int8 equip_solo_duel_grade;
__int8 equip_team_duel_grade;
__int8 item_grade;
__int8 legend_grade_background_particle_type;
std::wstring legend_grade_background_particle_type_EnumValue() const {return Get_legend_grade_background_particle_type_EnumValue(legend_grade_background_particle_type);};
char Pad1[1];
__int16 init_durability;
__int16 max_durability;
__int32 repair_money_cost;
__int8 use_global_recycle_group;
char Pad2[3];
__int32 use_global_recycle_group_duration;
__int8 use_recycle_group;
std::wstring use_recycle_group_EnumValue() const {return Get_use_recycle_group_EnumValue(use_recycle_group);};
__int8 use_recycle_group_id;
char Pad3[2];
__int32 use_recycle_group_duration;
bool decompose_reward_by_consume_index;
char Pad4[3];
Data::TableRef decompose_reward[7];
int decompose_reward_tableId(){return 313;};
__int8 decompose_reward_total_count;
char Pad5[3];
Data::TableRef decompose_event_reward;
int decompose_event_reward_tableId(){return 313;};
Data::TableRef decompose_job_reward_blade_master;
int decompose_job_reward_blade_master_tableId(){return 313;};
Data::TableRef decompose_job_reward_kung_fu_fighter;
int decompose_job_reward_kung_fu_fighter_tableId(){return 313;};
Data::TableRef decompose_job_reward_force_master;
int decompose_job_reward_force_master_tableId(){return 313;};
Data::TableRef decompose_job_reward_destroyer;
int decompose_job_reward_destroyer_tableId(){return 313;};
Data::TableRef decompose_job_reward_summoner;
int decompose_job_reward_summoner_tableId(){return 313;};
Data::TableRef decompose_job_reward_assassin;
int decompose_job_reward_assassin_tableId(){return 313;};
Data::TableRef decompose_job_reward_sword_master;
int decompose_job_reward_sword_master_tableId(){return 313;};
Data::TableRef decompose_job_reward_warlock;
int decompose_job_reward_warlock_tableId(){return 313;};
Data::TableRef decompose_job_reward_soul_fighter;
int decompose_job_reward_soul_fighter_tableId(){return 313;};
Data::TableRef decompose_job_reward_shooter;
int decompose_job_reward_shooter_tableId(){return 313;};
Data::TableRef decompose_job_reward_warrior;
int decompose_job_reward_warrior_tableId(){return 313;};
Data::TableRef decompose_job_reward_archer;
int decompose_job_reward_archer_tableId(){return 313;};
Data::TableRef decompose_job_reward_spear_master;
int decompose_job_reward_spear_master_tableId(){return 313;};
Data::TableRef decompose_job_reward_thunderer;
int decompose_job_reward_thunderer_tableId(){return 313;};
Data::TableRef decompose_job_reward_dual_blader;
int decompose_job_reward_dual_blader_tableId(){return 313;};
Data::TableRef decompose_job_reward_bard;
int decompose_job_reward_bard_tableId(){return 313;};
__int8 decompose_max;
char Pad6[3];
__int32 decompose_money_cost;
Data::TableRef decompose_by_item2[7];
int decompose_by_item2_tableId(){return 189;};
__int16 decompose_by_item2_stack_count[7];
__int8 decompose_by_item2_total_count;
char Pad7[1];
Data::TableRef job_decompose_by_item2[7];
int job_decompose_by_item2_tableId(){return 189;};
__int16 job_decompose_by_item2_stack_count[7];
__int8 job_decompose_by_item2_total_count;
char Pad8[1];
Data::TableRef set_item;
int set_item_tableId(){return 322;};
Data::TableRef faction;
int faction_tableId(){return 130;};
Data::TableRef equip_faction;
int equip_faction_tableId(){return 130;};
__int16 equip_faction_level;
bool new_product;
bool hot_product;
__int16 pouch_appearance_priority;
__int8 pouch_appearance;
std::wstring pouch_appearance_EnumValue() const {return Get_pouch_appearance_EnumValue(pouch_appearance);};
char Pad9[1];
Data::TableRef seal_consume_item[2];
int seal_consume_item_tableId(){return 189;};
__int16 seal_consume_item_count[2];
Data::TableRef seal_acquire_item;
int seal_acquire_item_tableId(){return 189;};
bool seal_keep_level;
__int8 forwarding_types[64];
std::wstring forwarding_types_EnumValue(int index) const {return Get_forwarding_types_EnumValue(forwarding_types[index]);};
char Pad10[3];
Data::TableRef quests[64];
int quests_tableId(){return 283;};
__int8 missions[64];
__int8 cases[64];
__int16 case_subtypes[64];
__int16 attack_power_equip_min;
__int16 attack_power_equip_max;
__int16 defend_power_equip_value;
__int16 defend_resist_power_equip_value;
__int16 attack_hit_base_percent;
__int16 attack_hit_value;
__int16 attack_hit_value_equip;
__int16 attack_pierce_base_percent;
__int16 attack_parry_pierce_percent;
__int16 attack_pierce_value;
__int16 attack_pierce_value_equip;
__int16 attack_critical_base_percent;
__int16 attack_critical_damage_percent;
__int16 attack_critical_value;
__int16 attack_critical_value_equip;
__int16 attack_critical_damage_value;
__int16 attack_critical_damage_value_equip;
__int16 defend_critical_base_percent;
__int16 defend_critical_damage_percent;
char Pad11[2];
__int32 defend_critical_value;
__int32 defend_critical_value_equip;
__int16 defend_dodge_base_percent;
__int16 defend_dodge_value;
__int16 defend_dodge_value_equip;
__int16 defend_parry_base_percent;
__int16 defend_parry_value;
__int16 defend_parry_value_equip;
__int16 attack_stiff_duration_base_percent;
__int16 attack_stiff_duration_value;
__int16 defend_stiff_duration_base_percent;
__int16 defend_stiff_duration_value;
__int16 cast_duration_base_percent;
__int16 cast_duration_value;
__int16 defend_physical_damage_reduce_percent;
__int16 defend_force_damage_reduce_percent;
__int16 attack_damage_modify_percent;
__int16 attack_damage_modify_diff;
__int16 defend_damage_modify_percent;
__int16 defend_damage_modify_diff;
__int32 max_hp;
__int32 max_hp_equip;
__int32 hp_regen;
__int32 hp_regen_equip;
__int32 hp_regen_combat;
__int32 hp_regen_combat_equip;
__int32 max_guard_gauge;
__int32 max_guard_gauge_equip;
__int16 attack_concentrate_value;
__int16 attack_concentrate_value_equip;
__int16 defend_perfect_parry_reduce_percent;
__int16 defend_counter_reduce_percent;
__int16 attack_attribute_value;
__int16 attack_attribute_value_equip;
__int16 attack_attribute_base_percent;
__int16 pve_boss_level_npc_attack_power_equip_min;
__int16 pve_boss_level_npc_attack_power_equip_max;
__int16 pve_boss_level_npc_defend_power_equip_value;
__int16 pvp_attack_power_equip_min;
__int16 pvp_attack_power_equip_max;
__int16 pvp_defend_power_equip_value;
__int16 r_attack_stiff_duration_equip_value;
__int16 r_defend_stiff_duration_equip_value;
__int16 r_aoe_defend_power_value_equip;
__int16 r_heal_power_equip_value;
char Pad12[2];
__int32 r_defend_strength_equip_value;
__int32 r_attack_precise_equip_value;
__int16 r_attack_aoe_pierce_value_equip;
__int16 r_attack_abnormal_hit_equip_value;
__int16 r_defend_abnormal_dodge_equip_value;
__int16 r_support_power_equip_value;
__int16 r_hypermove_power_equip_value;
__int16 defend_difficulty_type_damage_reduce_percent;
__int16 race_type_1_attack_damage_modify_percent;
__int16 race_type_2_attack_damage_modify_percent;
__int16 race_type_3_attack_damage_modify_percent;
__int16 race_type_4_attack_damage_modify_percent;
__int16 race_type_5_attack_damage_modify_percent;
__int16 race_type_6_attack_damage_modify_percent;
__int16 race_type_7_attack_damage_modify_percent;
__int16 race_type_1_defend_damage_modify_percent;
__int16 race_type_2_defend_damage_modify_percent;
__int16 race_type_3_defend_damage_modify_percent;
__int16 race_type_4_defend_damage_modify_percent;
__int16 race_type_5_defend_damage_modify_percent;
__int16 race_type_6_defend_damage_modify_percent;
__int16 race_type_7_defend_damage_modify_percent;
__int16 attribute_type_1_attack_damage_modify_percent;
__int16 attribute_type_2_attack_damage_modify_percent;
__int16 attribute_type_3_attack_damage_modify_percent;
__int16 attribute_type_4_attack_damage_modify_percent;
__int16 attribute_type_5_attack_damage_modify_percent;
__int16 attribute_type_6_attack_damage_modify_percent;
__int16 attribute_type_7_attack_damage_modify_percent;
__int16 attribute_type_8_attack_damage_modify_percent;
__int16 attribute_type_9_attack_damage_modify_percent;
__int16 attribute_type_10_attack_damage_modify_percent;
__int16 attribute_type_11_attack_damage_modify_percent;
__int16 attribute_type_12_attack_damage_modify_percent;
__int16 attribute_type_1_defend_damage_modify_percent;
__int16 attribute_type_2_defend_damage_modify_percent;
__int16 attribute_type_3_defend_damage_modify_percent;
__int16 attribute_type_4_defend_damage_modify_percent;
__int16 attribute_type_5_defend_damage_modify_percent;
__int16 attribute_type_6_defend_damage_modify_percent;
__int16 attribute_type_7_defend_damage_modify_percent;
__int16 attribute_type_8_defend_damage_modify_percent;
__int16 attribute_type_9_defend_damage_modify_percent;
__int16 attribute_type_10_defend_damage_modify_percent;
__int16 attribute_type_11_defend_damage_modify_percent;
__int16 attribute_type_12_defend_damage_modify_percent;
__int16 defend_critical_damage_value;
__int16 defend_critical_damage_value_equip;
__int32 job_ability_1;
__int16 job_ability_2;
__int16 heal_power_base_percent;
__int16 heal_power_value;
char Pad13[2];
__int32 heal_power_diff;
__int16 aoe_defend_base_percent;
__int16 aoe_defend_power_value;
__int16 abnormal_attack_base_percent;
__int16 abnormal_attack_power_value;
__int16 abnormal_attack_power_value_equip;
__int16 abnormal_defend_base_percent;
__int16 abnormal_defend_power_value;
__int16 hate_power_equip_value;
__int16 additional_exp_diff_by_kill;
__int16 additional_exp_percent_by_kill;
__int16 potential_attack_power_equip_min;
__int16 potential_attack_power_equip_max;
__int16 potential_defend_power_equip_value;
__int16 potential_defend_resist_power_equip_value;
__int16 potential_attack_hit_base_percent;
__int16 potential_attack_hit_value;
__int16 potential_attack_pierce_value;
__int16 potential_attack_critical_base_percent;
__int16 potential_attack_critical_damage_percent;
__int16 potential_attack_critical_value;
__int16 potential_defend_critical_base_percent;
__int16 potential_defend_critical_value;
__int16 potential_defend_dodge_base_percent;
__int16 potential_defend_dodge_value;
__int16 potential_defend_parry_base_percent;
__int16 potential_defend_parry_value;
__int16 potential_attack_stiff_duration_base_percent;
__int16 potential_attack_stiff_duration_value;
__int16 potential_defend_stiff_duration_base_percent;
__int16 potential_defend_stiff_duration_value;
__int16 potential_cast_duration_base_percent;
__int16 potential_cast_duration_value;
__int16 potential_defend_physical_damage_reduce_percent;
__int16 potential_defend_force_damage_reduce_percent;
__int16 potential_attack_damage_modify_percent;
__int16 potential_attack_damage_modify_diff;
__int16 potential_defend_damage_modify_percent;
__int16 potential_defend_damage_modify_diff;
__int16 potential_attack_concentrate_value;
__int16 potential_defend_perfect_parry_reduce_percent;
__int16 potential_defend_counter_reduce_percent;
char Pad14[2];
__int32 potential_max_hp;
__int32 potential_hp_regen;
__int32 potential_hp_regen_combat;
__int32 potential_max_guard_gauge;
__int16 potential_pve_boss_level_npc_attack_power_equip_min;
__int16 potential_pve_boss_level_npc_attack_power_equip_max;
__int16 potential_pve_boss_level_npc_defend_power_equip_value;
__int16 potential_pvp_attack_power_equip_min;
__int16 potential_pvp_attack_power_equip_max;
__int16 potential_pvp_defend_power_equip_value;
__int16 potential_attack_attribute_value_equip;
__int16 potential_abnormal_attack_power_value_equip;
__int16 potential_abnormal_defend_power_value;
__int16 potential_heal_power_value;
__int16 potential_attack_critical_damage_value_equip;
char Pad15[2];
wchar_t* item_sound_move;
wchar_t* item_sound_dragstart;
wchar_t* item_sound_itemdrop;
__int8 main_ability[2];
std::wstring main_ability_EnumValue(int index) const {return Get_main_ability_EnumValue(main_ability[index]);};
bool pccafe_ncsoft_korea_only;
char Pad16[1];
__int32 growth_id;
__int8 growth_level_max;
__int8 growth_step;
__int8 growth_efficient_level;
char Pad17[1];
__int16 growth_exp_scale;
char Pad18[2];
__int32 random_option_group_id;
__int32 has_random_option_group_data_flag;
__int32 growth_recipe_exp_min;
__int32 growth_recipe_exp_max;
__int32 growth_recipe_exp[4];
__int32 growth_recipe_cost;
Data::TableRef growth_recipe_material[6];
int growth_recipe_material_tableId(){return 189;};
__int16 growth_recipe_material_count[6];
__int8 growth_fail_probability;
char Pad19[3];
__int32 awakening_recipe_cost;
Data::TableRef awakening_recipe_material[6];
int awakening_recipe_material_tableId(){return 189;};
__int16 awakening_recipe_material_count[6];
bool dispose_awakening_feed_item;
bool dispose_awakening_material;
char Pad20[2];
Data::TableRef required_feed_item_brand_for_growth;
int required_feed_item_brand_for_growth_tableId(){return 183;};
Data::TableRef required_feed_item_for_growth;
int required_feed_item_for_growth_tableId(){return 189;};
__int8 required_seed_item_growth_course;
std::wstring required_seed_item_growth_course_EnumValue() const {return Get_required_seed_item_growth_course_EnumValue(required_seed_item_growth_course);};
__int8 required_seed_item_condition_type;
std::wstring required_seed_item_condition_type_EnumValue() const {return Get_required_seed_item_condition_type_EnumValue(required_seed_item_condition_type);};
__int8 required_seed_item_equip_level_min;
__int8 required_seed_item_equip_level_max;
Data::TableRef required_feed_item_brand_for_awakening;
int required_feed_item_brand_for_awakening_tableId(){return 183;};
__int8 required_feed_item_condition_type;
std::wstring required_feed_item_condition_type_EnumValue() const {return Get_required_feed_item_condition_type_EnumValue(required_feed_item_condition_type);};
__int8 required_feed_item_level_min;
char Pad21[2];
Data::TableRef awakening_target_item[5];
int awakening_target_item_tableId(){return 189;};
__int16 required_awakening_bm_item_count;
__int8 awakening_probability;
char Pad22[1];
Data::TableRef awakening_fail_effect;
int awakening_fail_effect_tableId(){return 111;};
bool lock_enable;
__int8 time_limit_type;
std::wstring time_limit_type_EnumValue() const {return Get_time_limit_type_EnumValue(time_limit_type);};
char Pad23[2];
__int32 usable_duration;
wchar_t* fixed_expiration_time;
__int8 delete_expiration_type;
std::wstring delete_expiration_type_EnumValue() const {return Get_delete_expiration_type_EnumValue(delete_expiration_type);};
char Pad24[3];
Data::TableRef event_info;
int event_info_tableId(){return 190;};
bool show_reward_preview;
char Pad25[3];
Data::TableRef account_post_charge;
int account_post_charge_tableId(){return 5;};
__int8 fusion_category_1;
std::wstring fusion_category_1_EnumValue() const {return Get_fusion_category_1_EnumValue(fusion_category_1);};
char Pad26[1];
__int16 fusion_category_2;
std::wstring fusion_category_2_EnumValue() const {return Get_fusion_category_2_EnumValue(fusion_category_2);};
__int32 fusion_score;
__int8 boast_event_type;
std::wstring boast_event_type_EnumValue() const {return Get_boast_event_type_EnumValue(boast_event_type);};
char Pad27[3];
__int32 improve_id;
__int8 improve_level;
char Pad28[3];
Data::TableRef improve_next_item;
int improve_next_item_tableId(){return 189;};
Data::TableRef improve_prev_item;
int improve_prev_item_tableId(){return 189;};
Data::TableRef job_change_item_exchange_group;
int job_change_item_exchange_group_tableId(){return 219;};
Data::TableRef manipulate_zone_env2_list[10];
int manipulate_zone_env2_list_tableId(){return 444;};
Data::TableRef name2;
int name2_tableId(){return 405;};
Data::TableRef nickname;
int nickname_tableId(){return 405;};
__int8 stage_number;
char Pad29[3];
Data::IconRef tag_icon;
Data::IconRef tag_icon_grade;
Data::IconRef icon;
wchar_t* kun_mesh;
wchar_t* gon_male_mesh;
wchar_t* gon_female_mesh;
wchar_t* lyn_male_mesh;
wchar_t* lyn_female_mesh;
wchar_t* jin_male_mesh;
wchar_t* jin_female_mesh;
wchar_t* cat_mesh;
wchar_t* kun_mesh_col[3];
wchar_t* gon_male_mesh_col[3];
wchar_t* gon_female_mesh_col[3];
wchar_t* lyn_male_mesh_col[3];
wchar_t* lyn_female_mesh_col[3];
wchar_t* jin_male_mesh_col[3];
wchar_t* jin_female_mesh_col[3];
wchar_t* cat_mesh_col[3];
wchar_t* mesh_id;
wchar_t* mesh_id_2;
wchar_t* talk_mesh;
wchar_t* talk_animset;
wchar_t* mesh_col[3];
wchar_t* mesh_animset;
wchar_t* mesh_animtree;
bool mesh_attach;
bool hide_beard;
bool hide_name;
bool guild_item;
Data::TableRef description2;
int description2_tableId(){return 405;};
Data::TableRef description4_title;
int description4_title_tableId(){return 405;};
Data::TableRef description5_title;
int description5_title_tableId(){return 405;};
Data::TableRef description6_title;
int description6_title_tableId(){return 405;};
Data::TableRef description4;
int description4_tableId(){return 405;};
Data::TableRef description5;
int description5_tableId(){return 405;};
Data::TableRef description6;
int description6_tableId(){return 405;};
Data::TableRef description7;
int description7_tableId(){return 405;};
Data::TableRef main_info;
int main_info_tableId(){return 405;};
Data::TableRef sub_info;
int sub_info_tableId(){return 405;};
Data::TableRef identify_main_info;
int identify_main_info_tableId(){return 405;};
Data::TableRef identify_sub_info;
int identify_sub_info_tableId(){return 405;};
Data::TableRef identify_description;
int identify_description_tableId(){return 405;};
Data::TableRef legend_transform_title_name;
int legend_transform_title_name_tableId(){return 405;};
__int8 ui_icon_state;
std::wstring ui_icon_state_EnumValue() const {return Get_ui_icon_state_EnumValue(ui_icon_state);};
char Pad30[3];
Data::TableRef message[9];
int message_tableId(){return 260;};
bool invoke_fx_msg;
char Pad31[3];
wchar_t* tooltip_info;
__int32 item_score;
__int8 item_style;
std::wstring item_style_EnumValue() const {return Get_item_style_EnumValue(item_style);};

		static TableVersion Version() { return TableVersion(49, 2); }
		static __int16 TableId() { return 189; }
		static __int32 SubType() { return 0; }
	};
#pragma pack(pop)
#pragma pack(push, 1)
	struct __declspec(align(4)) item_RecordPtr // : DrRecordPtr
	{
		item_Record* _record;
		int _cacheChunkIndex;
		//__unaligned __declspec(align(1)) const Data::item_Record* _debug;
		bool _makeCopy;
	};
#pragma pack(pop)
}