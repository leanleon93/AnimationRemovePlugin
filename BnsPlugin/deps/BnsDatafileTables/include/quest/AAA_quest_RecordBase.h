/*
 Generated Code! Do not manually edit this code. Modify the generator instead.
*/
#pragma once
#include "../DrEl.h"
#include "../AnyToStringConverter.h"

namespace Data {

#pragma pack(push, 1)
	struct quest_Record : DrEl
	{
	private:
		static std::wstring Get_category_EnumValue(__int8 value);
		static std::wstring Get_grade_EnumValue(__int8 value);
		static std::wstring Get_day_of_week_EnumValue(__int8 value);
		static std::wstring Get_reset_type_EnumValue(__int8 value);
		static std::wstring Get_reset_by_acquire_time_EnumValue(__int8 value);
		static std::wstring Get_reset_day_of_week_EnumValue(__int8 value);
		static std::wstring Get_production_EnumValue(__int8 value);
		static std::wstring Get_save_type_EnumValue(__int8 value);
		static std::wstring Get_dungeon_type_EnumValue(__int8 value);
		static std::wstring Get_content_type_EnumValue(__int8 value);
	public:
		std::any GetField(const wchar_t* fieldName) const {
			if (wcscmp(fieldName, L"alias") == 0) return alias;
			if (wcscmp(fieldName, L"max_repeat") == 0) return max_repeat;
			if (wcscmp(fieldName, L"name2") == 0) return name2;
			if (wcscmp(fieldName, L"map_group_1") == 0) return map_group_1;
			if (wcscmp(fieldName, L"map_group_1_1") == 0) return map_group_1[0];
			if (wcscmp(fieldName, L"map_group_1_2") == 0) return map_group_1[1];
			if (wcscmp(fieldName, L"group2") == 0) return group2;
			if (wcscmp(fieldName, L"desc") == 0) return desc;
			if (wcscmp(fieldName, L"completed_desc") == 0) return completed_desc;
			if (wcscmp(fieldName, L"category") == 0) return category;
			if (wcscmp(fieldName, L"completed_list") == 0) return completed_list;
			if (wcscmp(fieldName, L"grade") == 0) return grade;
			if (wcscmp(fieldName, L"tutorial") == 0) return tutorial;
			if (wcscmp(fieldName, L"show_tutorial_tag") == 0) return show_tutorial_tag;
			if (wcscmp(fieldName, L"last_mission_step") == 0) return last_mission_step;
			if (wcscmp(fieldName, L"effect_exist") == 0) return effect_exist;
			if (wcscmp(fieldName, L"day_of_week") == 0) return day_of_week;
			if (wcscmp(fieldName, L"reset_type") == 0) return reset_type;
			if (wcscmp(fieldName, L"reset_by_acquire_time") == 0) return reset_by_acquire_time;
			if (wcscmp(fieldName, L"reset_day_of_week") == 0) return reset_day_of_week;
			if (wcscmp(fieldName, L"reset_day_of_month") == 0) return reset_day_of_month;
			if (wcscmp(fieldName, L"main_faction") == 0) return main_faction;
			if (wcscmp(fieldName, L"production") == 0) return production;
			if (wcscmp(fieldName, L"save_type") == 0) return save_type;
			if (wcscmp(fieldName, L"invoke_fx_msg") == 0) return invoke_fx_msg;
			if (wcscmp(fieldName, L"dungeon") == 0) return dungeon;
			if (wcscmp(fieldName, L"dungeon_type") == 0) return dungeon_type;
			if (wcscmp(fieldName, L"content_type") == 0) return content_type;
			if (wcscmp(fieldName, L"retired") == 0) return retired;
			if (wcscmp(fieldName, L"progress_difficulty_type") == 0) return progress_difficulty_type;
			if (wcscmp(fieldName, L"progress_difficulty_type_1") == 0) return progress_difficulty_type[0];
			if (wcscmp(fieldName, L"progress_difficulty_type_2") == 0) return progress_difficulty_type[1];
			if (wcscmp(fieldName, L"progress_difficulty_type_3") == 0) return progress_difficulty_type[2];
			if (wcscmp(fieldName, L"progress_difficulty_type_always") == 0) return progress_difficulty_type_always;
			if (wcscmp(fieldName, L"attraction") == 0) return attraction;
			if (wcscmp(fieldName, L"attraction_1") == 0) return attraction[0];
			if (wcscmp(fieldName, L"attraction_2") == 0) return attraction[1];
			if (wcscmp(fieldName, L"attraction_3") == 0) return attraction[2];
			if (wcscmp(fieldName, L"attraction_4") == 0) return attraction[3];
			if (wcscmp(fieldName, L"attraction_info") == 0) return attraction_info;
			if (wcscmp(fieldName, L"reset_enable") == 0) return reset_enable;
			if (wcscmp(fieldName, L"reset_money") == 0) return reset_money;
			if (wcscmp(fieldName, L"reset_item") == 0) return reset_item;
			if (wcscmp(fieldName, L"reset_item_1") == 0) return reset_item[0];
			if (wcscmp(fieldName, L"reset_item_2") == 0) return reset_item[1];
			if (wcscmp(fieldName, L"reset_item_3") == 0) return reset_item[2];
			if (wcscmp(fieldName, L"reset_item_4") == 0) return reset_item[3];
			if (wcscmp(fieldName, L"reset_item_count") == 0) return reset_item_count;
			if (wcscmp(fieldName, L"reset_item_count_1") == 0) return reset_item_count[0];
			if (wcscmp(fieldName, L"reset_item_count_2") == 0) return reset_item_count[1];
			if (wcscmp(fieldName, L"reset_item_count_3") == 0) return reset_item_count[2];
			if (wcscmp(fieldName, L"reset_item_count_4") == 0) return reset_item_count[3];
			if (wcscmp(fieldName, L"acquire_talksocial") == 0) return acquire_talksocial;
			if (wcscmp(fieldName, L"acquire_talksocial_delay") == 0) return acquire_talksocial_delay;
			if (wcscmp(fieldName, L"complete_talksocial") == 0) return complete_talksocial;
			if (wcscmp(fieldName, L"complete_talksocial_delay") == 0) return complete_talksocial_delay;
			if (wcscmp(fieldName, L"check_vitality") == 0) return check_vitality;
			if (wcscmp(fieldName, L"valid_date_start_year") == 0) return valid_date_start_year;
			if (wcscmp(fieldName, L"valid_date_start_month") == 0) return valid_date_start_month;
			if (wcscmp(fieldName, L"valid_date_start_day") == 0) return valid_date_start_day;
			if (wcscmp(fieldName, L"valid_date_end_year") == 0) return valid_date_end_year;
			if (wcscmp(fieldName, L"valid_date_end_month") == 0) return valid_date_end_month;
			if (wcscmp(fieldName, L"valid_date_end_day") == 0) return valid_date_end_day;
			if (wcscmp(fieldName, L"valid_time_start_hour") == 0) return valid_time_start_hour;
			if (wcscmp(fieldName, L"valid_time_end_hour") == 0) return valid_time_end_hour;
			if (wcscmp(fieldName, L"valid_dayofweek_sun") == 0) return valid_dayofweek_sun;
			if (wcscmp(fieldName, L"valid_dayofweek_mon") == 0) return valid_dayofweek_mon;
			if (wcscmp(fieldName, L"valid_dayofweek_tue") == 0) return valid_dayofweek_tue;
			if (wcscmp(fieldName, L"valid_dayofweek_wed") == 0) return valid_dayofweek_wed;
			if (wcscmp(fieldName, L"valid_dayofweek_thu") == 0) return valid_dayofweek_thu;
			if (wcscmp(fieldName, L"valid_dayofweek_fri") == 0) return valid_dayofweek_fri;
			if (wcscmp(fieldName, L"valid_dayofweek_sat") == 0) return valid_dayofweek_sat;
			if (wcscmp(fieldName, L"replay_check") == 0) return replay_check;
			if (wcscmp(fieldName, L"cinema_check") == 0) return cinema_check;
			if (wcscmp(fieldName, L"dungeon2") == 0) return dungeon2;
			if (wcscmp(fieldName, L"duel_mission_steps") == 0) return duel_mission_steps;
			if (wcscmp(fieldName, L"duel_mission_steps_1") == 0) return duel_mission_steps[0];
			if (wcscmp(fieldName, L"duel_mission_steps_2") == 0) return duel_mission_steps[1];
			if (wcscmp(fieldName, L"duel_mission_steps_3") == 0) return duel_mission_steps[2];
			if (wcscmp(fieldName, L"duel_mission_steps_4") == 0) return duel_mission_steps[3];
			if (wcscmp(fieldName, L"duel_mission_steps_5") == 0) return duel_mission_steps[4];
			if (wcscmp(fieldName, L"duel_mission_steps_6") == 0) return duel_mission_steps[5];
			if (wcscmp(fieldName, L"duel_mission_steps_7") == 0) return duel_mission_steps[6];
			if (wcscmp(fieldName, L"duel_mission_steps_8") == 0) return duel_mission_steps[7];
			if (wcscmp(fieldName, L"duel_mission_steps_9") == 0) return duel_mission_steps[8];
			if (wcscmp(fieldName, L"duel_mission_steps_10") == 0) return duel_mission_steps[9];
			if (wcscmp(fieldName, L"duel_mission_steps_11") == 0) return duel_mission_steps[10];
			if (wcscmp(fieldName, L"duel_mission_steps_12") == 0) return duel_mission_steps[11];
			if (wcscmp(fieldName, L"duel_mission_steps_13") == 0) return duel_mission_steps[12];
			if (wcscmp(fieldName, L"duel_mission_steps_14") == 0) return duel_mission_steps[13];
			if (wcscmp(fieldName, L"duel_mission_steps_15") == 0) return duel_mission_steps[14];
			if (wcscmp(fieldName, L"duel_mission_steps_16") == 0) return duel_mission_steps[15];
			if (wcscmp(fieldName, L"duel_missions") == 0) return duel_missions;
			if (wcscmp(fieldName, L"duel_missions_1") == 0) return duel_missions[0];
			if (wcscmp(fieldName, L"duel_missions_2") == 0) return duel_missions[1];
			if (wcscmp(fieldName, L"duel_missions_3") == 0) return duel_missions[2];
			if (wcscmp(fieldName, L"duel_missions_4") == 0) return duel_missions[3];
			if (wcscmp(fieldName, L"duel_missions_5") == 0) return duel_missions[4];
			if (wcscmp(fieldName, L"duel_missions_6") == 0) return duel_missions[5];
			if (wcscmp(fieldName, L"duel_missions_7") == 0) return duel_missions[6];
			if (wcscmp(fieldName, L"duel_missions_8") == 0) return duel_missions[7];
			if (wcscmp(fieldName, L"duel_missions_9") == 0) return duel_missions[8];
			if (wcscmp(fieldName, L"duel_missions_10") == 0) return duel_missions[9];
			if (wcscmp(fieldName, L"duel_missions_11") == 0) return duel_missions[10];
			if (wcscmp(fieldName, L"duel_missions_12") == 0) return duel_missions[11];
			if (wcscmp(fieldName, L"duel_missions_13") == 0) return duel_missions[12];
			if (wcscmp(fieldName, L"duel_missions_14") == 0) return duel_missions[13];
			if (wcscmp(fieldName, L"duel_missions_15") == 0) return duel_missions[14];
			if (wcscmp(fieldName, L"duel_missions_16") == 0) return duel_missions[15];
			if (wcscmp(fieldName, L"duel_cases") == 0) return duel_cases;
			if (wcscmp(fieldName, L"duel_cases_1") == 0) return duel_cases[0];
			if (wcscmp(fieldName, L"duel_cases_2") == 0) return duel_cases[1];
			if (wcscmp(fieldName, L"duel_cases_3") == 0) return duel_cases[2];
			if (wcscmp(fieldName, L"duel_cases_4") == 0) return duel_cases[3];
			if (wcscmp(fieldName, L"duel_cases_5") == 0) return duel_cases[4];
			if (wcscmp(fieldName, L"duel_cases_6") == 0) return duel_cases[5];
			if (wcscmp(fieldName, L"duel_cases_7") == 0) return duel_cases[6];
			if (wcscmp(fieldName, L"duel_cases_8") == 0) return duel_cases[7];
			if (wcscmp(fieldName, L"duel_cases_9") == 0) return duel_cases[8];
			if (wcscmp(fieldName, L"duel_cases_10") == 0) return duel_cases[9];
			if (wcscmp(fieldName, L"duel_cases_11") == 0) return duel_cases[10];
			if (wcscmp(fieldName, L"duel_cases_12") == 0) return duel_cases[11];
			if (wcscmp(fieldName, L"duel_cases_13") == 0) return duel_cases[12];
			if (wcscmp(fieldName, L"duel_cases_14") == 0) return duel_cases[13];
			if (wcscmp(fieldName, L"duel_cases_15") == 0) return duel_cases[14];
			if (wcscmp(fieldName, L"duel_cases_16") == 0) return duel_cases[15];
			if (wcscmp(fieldName, L"duel_case_subtypes") == 0) return duel_case_subtypes;
			if (wcscmp(fieldName, L"duel_case_subtypes_1") == 0) return duel_case_subtypes[0];
			if (wcscmp(fieldName, L"duel_case_subtypes_2") == 0) return duel_case_subtypes[1];
			if (wcscmp(fieldName, L"duel_case_subtypes_3") == 0) return duel_case_subtypes[2];
			if (wcscmp(fieldName, L"duel_case_subtypes_4") == 0) return duel_case_subtypes[3];
			if (wcscmp(fieldName, L"duel_case_subtypes_5") == 0) return duel_case_subtypes[4];
			if (wcscmp(fieldName, L"duel_case_subtypes_6") == 0) return duel_case_subtypes[5];
			if (wcscmp(fieldName, L"duel_case_subtypes_7") == 0) return duel_case_subtypes[6];
			if (wcscmp(fieldName, L"duel_case_subtypes_8") == 0) return duel_case_subtypes[7];
			if (wcscmp(fieldName, L"duel_case_subtypes_9") == 0) return duel_case_subtypes[8];
			if (wcscmp(fieldName, L"duel_case_subtypes_10") == 0) return duel_case_subtypes[9];
			if (wcscmp(fieldName, L"duel_case_subtypes_11") == 0) return duel_case_subtypes[10];
			if (wcscmp(fieldName, L"duel_case_subtypes_12") == 0) return duel_case_subtypes[11];
			if (wcscmp(fieldName, L"duel_case_subtypes_13") == 0) return duel_case_subtypes[12];
			if (wcscmp(fieldName, L"duel_case_subtypes_14") == 0) return duel_case_subtypes[13];
			if (wcscmp(fieldName, L"duel_case_subtypes_15") == 0) return duel_case_subtypes[14];
			if (wcscmp(fieldName, L"duel_case_subtypes_16") == 0) return duel_case_subtypes[15];
			if (wcscmp(fieldName, L"exceed_level_next_level") == 0) return exceed_level_next_level;
			if (wcscmp(fieldName, L"contents_reset") == 0) return contents_reset;

			return std::any();
		}
		std::wstring GetFieldAsString(const wchar_t* fieldName) {
			if (wcscmp(fieldName, L"alias") == 0) return Data::AnyFieldToStringConverter::ToString(&alias);
			if (wcscmp(fieldName, L"max_repeat") == 0) return Data::AnyFieldToStringConverter::ToString(&max_repeat);
			if (wcscmp(fieldName, L"name2") == 0) return Data::AnyFieldToStringConverter::ToString(&name2);
			if (wcscmp(fieldName, L"map_group_1_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(map_group_1[0]));
			if (wcscmp(fieldName, L"map_group_1_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(map_group_1[1]));
			if (wcscmp(fieldName, L"group2") == 0) return Data::AnyFieldToStringConverter::ToString(&group2);
			if (wcscmp(fieldName, L"desc") == 0) return Data::AnyFieldToStringConverter::ToString(&desc);
			if (wcscmp(fieldName, L"completed_desc") == 0) return Data::AnyFieldToStringConverter::ToString(&completed_desc);
			if (wcscmp(fieldName, L"category") == 0) return Data::AnyFieldToStringConverter::ToString(&category);
			if (wcscmp(fieldName, L"completed_list") == 0) return Data::AnyFieldToStringConverter::ToString(&completed_list);
			if (wcscmp(fieldName, L"grade") == 0) return Data::AnyFieldToStringConverter::ToString(&grade);
			if (wcscmp(fieldName, L"tutorial") == 0) return Data::AnyFieldToStringConverter::ToString(&tutorial);
			if (wcscmp(fieldName, L"show_tutorial_tag") == 0) return Data::AnyFieldToStringConverter::ToString(&show_tutorial_tag);
			if (wcscmp(fieldName, L"last_mission_step") == 0) return Data::AnyFieldToStringConverter::ToString(&last_mission_step);
			if (wcscmp(fieldName, L"effect_exist") == 0) return Data::AnyFieldToStringConverter::ToString(&effect_exist);
			if (wcscmp(fieldName, L"day_of_week") == 0) return Data::AnyFieldToStringConverter::ToString(&day_of_week);
			if (wcscmp(fieldName, L"reset_type") == 0) return Data::AnyFieldToStringConverter::ToString(&reset_type);
			if (wcscmp(fieldName, L"reset_by_acquire_time") == 0) return Data::AnyFieldToStringConverter::ToString(&reset_by_acquire_time);
			if (wcscmp(fieldName, L"reset_day_of_week") == 0) return Data::AnyFieldToStringConverter::ToString(&reset_day_of_week);
			if (wcscmp(fieldName, L"reset_day_of_month") == 0) return Data::AnyFieldToStringConverter::ToString(&reset_day_of_month);
			if (wcscmp(fieldName, L"main_faction") == 0) return Data::AnyFieldToStringConverter::ToString(&main_faction);
			if (wcscmp(fieldName, L"production") == 0) return Data::AnyFieldToStringConverter::ToString(&production);
			if (wcscmp(fieldName, L"save_type") == 0) return Data::AnyFieldToStringConverter::ToString(&save_type);
			if (wcscmp(fieldName, L"invoke_fx_msg") == 0) return Data::AnyFieldToStringConverter::ToString(&invoke_fx_msg);
			if (wcscmp(fieldName, L"dungeon") == 0) return Data::AnyFieldToStringConverter::ToString(&dungeon);
			if (wcscmp(fieldName, L"dungeon_type") == 0) return Data::AnyFieldToStringConverter::ToString(&dungeon_type);
			if (wcscmp(fieldName, L"content_type") == 0) return Data::AnyFieldToStringConverter::ToString(&content_type);
			if (wcscmp(fieldName, L"retired") == 0) return Data::AnyFieldToStringConverter::ToString(&retired);
			if (wcscmp(fieldName, L"progress_difficulty_type_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(progress_difficulty_type[0]));
			if (wcscmp(fieldName, L"progress_difficulty_type_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(progress_difficulty_type[1]));
			if (wcscmp(fieldName, L"progress_difficulty_type_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(progress_difficulty_type[2]));
			if (wcscmp(fieldName, L"progress_difficulty_type_always") == 0) return Data::AnyFieldToStringConverter::ToString(&progress_difficulty_type_always);
			if (wcscmp(fieldName, L"attraction_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction[0]));
			if (wcscmp(fieldName, L"attraction_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction[1]));
			if (wcscmp(fieldName, L"attraction_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction[2]));
			if (wcscmp(fieldName, L"attraction_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction[3]));
			if (wcscmp(fieldName, L"attraction_info") == 0) return Data::AnyFieldToStringConverter::ToString(&attraction_info);
			if (wcscmp(fieldName, L"reset_enable") == 0) return Data::AnyFieldToStringConverter::ToString(&reset_enable);
			if (wcscmp(fieldName, L"reset_money") == 0) return Data::AnyFieldToStringConverter::ToString(&reset_money);
			if (wcscmp(fieldName, L"reset_item_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(reset_item[0]));
			if (wcscmp(fieldName, L"reset_item_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(reset_item[1]));
			if (wcscmp(fieldName, L"reset_item_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(reset_item[2]));
			if (wcscmp(fieldName, L"reset_item_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(reset_item[3]));
			if (wcscmp(fieldName, L"reset_item_count_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(reset_item_count[0]));
			if (wcscmp(fieldName, L"reset_item_count_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(reset_item_count[1]));
			if (wcscmp(fieldName, L"reset_item_count_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(reset_item_count[2]));
			if (wcscmp(fieldName, L"reset_item_count_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(reset_item_count[3]));
			if (wcscmp(fieldName, L"acquire_talksocial") == 0) return Data::AnyFieldToStringConverter::ToString(&acquire_talksocial);
			if (wcscmp(fieldName, L"acquire_talksocial_delay") == 0) return Data::AnyFieldToStringConverter::ToString(&acquire_talksocial_delay);
			if (wcscmp(fieldName, L"complete_talksocial") == 0) return Data::AnyFieldToStringConverter::ToString(&complete_talksocial);
			if (wcscmp(fieldName, L"complete_talksocial_delay") == 0) return Data::AnyFieldToStringConverter::ToString(&complete_talksocial_delay);
			if (wcscmp(fieldName, L"check_vitality") == 0) return Data::AnyFieldToStringConverter::ToString(&check_vitality);
			if (wcscmp(fieldName, L"valid_date_start_year") == 0) return Data::AnyFieldToStringConverter::ToString(&valid_date_start_year);
			if (wcscmp(fieldName, L"valid_date_start_month") == 0) return Data::AnyFieldToStringConverter::ToString(&valid_date_start_month);
			if (wcscmp(fieldName, L"valid_date_start_day") == 0) return Data::AnyFieldToStringConverter::ToString(&valid_date_start_day);
			if (wcscmp(fieldName, L"valid_date_end_year") == 0) return Data::AnyFieldToStringConverter::ToString(&valid_date_end_year);
			if (wcscmp(fieldName, L"valid_date_end_month") == 0) return Data::AnyFieldToStringConverter::ToString(&valid_date_end_month);
			if (wcscmp(fieldName, L"valid_date_end_day") == 0) return Data::AnyFieldToStringConverter::ToString(&valid_date_end_day);
			if (wcscmp(fieldName, L"valid_time_start_hour") == 0) return Data::AnyFieldToStringConverter::ToString(&valid_time_start_hour);
			if (wcscmp(fieldName, L"valid_time_end_hour") == 0) return Data::AnyFieldToStringConverter::ToString(&valid_time_end_hour);
			if (wcscmp(fieldName, L"valid_dayofweek_sun") == 0) return Data::AnyFieldToStringConverter::ToString(&valid_dayofweek_sun);
			if (wcscmp(fieldName, L"valid_dayofweek_mon") == 0) return Data::AnyFieldToStringConverter::ToString(&valid_dayofweek_mon);
			if (wcscmp(fieldName, L"valid_dayofweek_tue") == 0) return Data::AnyFieldToStringConverter::ToString(&valid_dayofweek_tue);
			if (wcscmp(fieldName, L"valid_dayofweek_wed") == 0) return Data::AnyFieldToStringConverter::ToString(&valid_dayofweek_wed);
			if (wcscmp(fieldName, L"valid_dayofweek_thu") == 0) return Data::AnyFieldToStringConverter::ToString(&valid_dayofweek_thu);
			if (wcscmp(fieldName, L"valid_dayofweek_fri") == 0) return Data::AnyFieldToStringConverter::ToString(&valid_dayofweek_fri);
			if (wcscmp(fieldName, L"valid_dayofweek_sat") == 0) return Data::AnyFieldToStringConverter::ToString(&valid_dayofweek_sat);
			if (wcscmp(fieldName, L"replay_check") == 0) return Data::AnyFieldToStringConverter::ToString(&replay_check);
			if (wcscmp(fieldName, L"cinema_check") == 0) return Data::AnyFieldToStringConverter::ToString(&cinema_check);
			if (wcscmp(fieldName, L"dungeon2") == 0) return Data::AnyFieldToStringConverter::ToString(&dungeon2);
			if (wcscmp(fieldName, L"duel_mission_steps_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_mission_steps[0]));
			if (wcscmp(fieldName, L"duel_mission_steps_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_mission_steps[1]));
			if (wcscmp(fieldName, L"duel_mission_steps_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_mission_steps[2]));
			if (wcscmp(fieldName, L"duel_mission_steps_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_mission_steps[3]));
			if (wcscmp(fieldName, L"duel_mission_steps_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_mission_steps[4]));
			if (wcscmp(fieldName, L"duel_mission_steps_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_mission_steps[5]));
			if (wcscmp(fieldName, L"duel_mission_steps_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_mission_steps[6]));
			if (wcscmp(fieldName, L"duel_mission_steps_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_mission_steps[7]));
			if (wcscmp(fieldName, L"duel_mission_steps_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_mission_steps[8]));
			if (wcscmp(fieldName, L"duel_mission_steps_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_mission_steps[9]));
			if (wcscmp(fieldName, L"duel_mission_steps_11") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_mission_steps[10]));
			if (wcscmp(fieldName, L"duel_mission_steps_12") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_mission_steps[11]));
			if (wcscmp(fieldName, L"duel_mission_steps_13") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_mission_steps[12]));
			if (wcscmp(fieldName, L"duel_mission_steps_14") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_mission_steps[13]));
			if (wcscmp(fieldName, L"duel_mission_steps_15") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_mission_steps[14]));
			if (wcscmp(fieldName, L"duel_mission_steps_16") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_mission_steps[15]));
			if (wcscmp(fieldName, L"duel_missions_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_missions[0]));
			if (wcscmp(fieldName, L"duel_missions_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_missions[1]));
			if (wcscmp(fieldName, L"duel_missions_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_missions[2]));
			if (wcscmp(fieldName, L"duel_missions_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_missions[3]));
			if (wcscmp(fieldName, L"duel_missions_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_missions[4]));
			if (wcscmp(fieldName, L"duel_missions_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_missions[5]));
			if (wcscmp(fieldName, L"duel_missions_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_missions[6]));
			if (wcscmp(fieldName, L"duel_missions_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_missions[7]));
			if (wcscmp(fieldName, L"duel_missions_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_missions[8]));
			if (wcscmp(fieldName, L"duel_missions_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_missions[9]));
			if (wcscmp(fieldName, L"duel_missions_11") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_missions[10]));
			if (wcscmp(fieldName, L"duel_missions_12") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_missions[11]));
			if (wcscmp(fieldName, L"duel_missions_13") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_missions[12]));
			if (wcscmp(fieldName, L"duel_missions_14") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_missions[13]));
			if (wcscmp(fieldName, L"duel_missions_15") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_missions[14]));
			if (wcscmp(fieldName, L"duel_missions_16") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_missions[15]));
			if (wcscmp(fieldName, L"duel_cases_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_cases[0]));
			if (wcscmp(fieldName, L"duel_cases_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_cases[1]));
			if (wcscmp(fieldName, L"duel_cases_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_cases[2]));
			if (wcscmp(fieldName, L"duel_cases_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_cases[3]));
			if (wcscmp(fieldName, L"duel_cases_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_cases[4]));
			if (wcscmp(fieldName, L"duel_cases_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_cases[5]));
			if (wcscmp(fieldName, L"duel_cases_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_cases[6]));
			if (wcscmp(fieldName, L"duel_cases_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_cases[7]));
			if (wcscmp(fieldName, L"duel_cases_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_cases[8]));
			if (wcscmp(fieldName, L"duel_cases_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_cases[9]));
			if (wcscmp(fieldName, L"duel_cases_11") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_cases[10]));
			if (wcscmp(fieldName, L"duel_cases_12") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_cases[11]));
			if (wcscmp(fieldName, L"duel_cases_13") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_cases[12]));
			if (wcscmp(fieldName, L"duel_cases_14") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_cases[13]));
			if (wcscmp(fieldName, L"duel_cases_15") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_cases[14]));
			if (wcscmp(fieldName, L"duel_cases_16") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_cases[15]));
			if (wcscmp(fieldName, L"duel_case_subtypes_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_case_subtypes[0]));
			if (wcscmp(fieldName, L"duel_case_subtypes_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_case_subtypes[1]));
			if (wcscmp(fieldName, L"duel_case_subtypes_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_case_subtypes[2]));
			if (wcscmp(fieldName, L"duel_case_subtypes_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_case_subtypes[3]));
			if (wcscmp(fieldName, L"duel_case_subtypes_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_case_subtypes[4]));
			if (wcscmp(fieldName, L"duel_case_subtypes_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_case_subtypes[5]));
			if (wcscmp(fieldName, L"duel_case_subtypes_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_case_subtypes[6]));
			if (wcscmp(fieldName, L"duel_case_subtypes_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_case_subtypes[7]));
			if (wcscmp(fieldName, L"duel_case_subtypes_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_case_subtypes[8]));
			if (wcscmp(fieldName, L"duel_case_subtypes_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_case_subtypes[9]));
			if (wcscmp(fieldName, L"duel_case_subtypes_11") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_case_subtypes[10]));
			if (wcscmp(fieldName, L"duel_case_subtypes_12") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_case_subtypes[11]));
			if (wcscmp(fieldName, L"duel_case_subtypes_13") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_case_subtypes[12]));
			if (wcscmp(fieldName, L"duel_case_subtypes_14") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_case_subtypes[13]));
			if (wcscmp(fieldName, L"duel_case_subtypes_15") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_case_subtypes[14]));
			if (wcscmp(fieldName, L"duel_case_subtypes_16") == 0) return Data::AnyFieldToStringConverter::ToString(&(duel_case_subtypes[15]));
			if (wcscmp(fieldName, L"exceed_level_next_level") == 0) return Data::AnyFieldToStringConverter::ToString(&exceed_level_next_level);
			if (wcscmp(fieldName, L"contents_reset") == 0) return Data::AnyFieldToStringConverter::ToString(&contents_reset);

			return L"";
		}
		void AutoCorrectLookupOffsets(const char* lookupDataPtr) {
			if (reinterpret_cast<std::uintptr_t>(alias) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) alias = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(alias));
		}
		union Key
		{
            struct {
                __int16 id;

            };
			unsigned __int64 key;
		};
		__declspec(align(8)) Key key;
		wchar_t* alias;
__int8 max_repeat;
char Pad0[3];
Data::TableRef name2;
int name2_tableId(){return 405;};
Data::TableRef map_group_1[2];
int map_group_1_tableId(){return 237;};
Data::TableRef group2;
int group2_tableId(){return 405;};
Data::TableRef desc;
int desc_tableId(){return 405;};
Data::TableRef completed_desc;
int completed_desc_tableId(){return 405;};
__int8 category;
std::wstring category_EnumValue() const {return Get_category_EnumValue(category);};
bool completed_list;
__int8 grade;
std::wstring grade_EnumValue() const {return Get_grade_EnumValue(grade);};
bool tutorial;
bool show_tutorial_tag;
__int8 last_mission_step;
bool effect_exist;
__int8 day_of_week;
std::wstring day_of_week_EnumValue() const {return Get_day_of_week_EnumValue(day_of_week);};
__int8 reset_type;
std::wstring reset_type_EnumValue() const {return Get_reset_type_EnumValue(reset_type);};
__int8 reset_by_acquire_time;
std::wstring reset_by_acquire_time_EnumValue() const {return Get_reset_by_acquire_time_EnumValue(reset_by_acquire_time);};
__int8 reset_day_of_week;
std::wstring reset_day_of_week_EnumValue() const {return Get_reset_day_of_week_EnumValue(reset_day_of_week);};
__int8 reset_day_of_month;
Data::TableRef main_faction;
int main_faction_tableId(){return 130;};
__int8 production;
std::wstring production_EnumValue() const {return Get_production_EnumValue(production);};
__int8 save_type;
std::wstring save_type_EnumValue() const {return Get_save_type_EnumValue(save_type);};
bool invoke_fx_msg;
char Pad1[1];
Data::TableRef dungeon;
int dungeon_tableId(){return 110;};
__int8 dungeon_type;
std::wstring dungeon_type_EnumValue() const {return Get_dungeon_type_EnumValue(dungeon_type);};
__int8 content_type;
std::wstring content_type_EnumValue() const {return Get_content_type_EnumValue(content_type);};
bool retired;
bool progress_difficulty_type[3];
bool progress_difficulty_type_always;
char Pad2[1];
Data::ExplicitTableRef attraction[4];
Data::ExplicitTableRef attraction_info;
bool reset_enable;
char Pad3[3];
__int32 reset_money;
Data::TableRef reset_item[4];
int reset_item_tableId(){return 189;};
__int8 reset_item_count[4];
Data::TableRef acquire_talksocial;
int acquire_talksocial_tableId(){return 399;};
float acquire_talksocial_delay;
Data::TableRef complete_talksocial;
int complete_talksocial_tableId(){return 399;};
float complete_talksocial_delay;
bool check_vitality;
char Pad4[1];
__int16 valid_date_start_year;
__int8 valid_date_start_month;
__int8 valid_date_start_day;
__int16 valid_date_end_year;
__int8 valid_date_end_month;
__int8 valid_date_end_day;
__int8 valid_time_start_hour;
__int8 valid_time_end_hour;
bool valid_dayofweek_sun;
bool valid_dayofweek_mon;
bool valid_dayofweek_tue;
bool valid_dayofweek_wed;
bool valid_dayofweek_thu;
bool valid_dayofweek_fri;
bool valid_dayofweek_sat;
bool replay_check;
bool cinema_check;
char Pad5[3];
Data::TableRef dungeon2;
int dungeon2_tableId(){return 110;};
__int8 duel_mission_steps[16];
__int8 duel_missions[16];
__int8 duel_cases[16];
__int16 duel_case_subtypes[16];
__int8 exceed_level_next_level;
char Pad6[3];
Data::TableRef contents_reset;
int contents_reset_tableId(){return 72;};

		static TableVersion Version() { return TableVersion(7, 1); }
		static __int16 TableId() { return 283; }
		static __int32 SubType() { return 0; }
	};
#pragma pack(pop)
#pragma pack(push, 1)
	struct __declspec(align(4)) quest_RecordPtr // : DrRecordPtr
	{
		quest_Record* _record;
		int _cacheChunkIndex;
		//__unaligned __declspec(align(1)) const Data::quest_Record* _debug;
		bool _makeCopy;
	};
#pragma pack(pop)
}