/*
 Generated Code! Do not manually edit this code. Modify the generator instead.
*/
#pragma once
#include "../DrEl.h"
#include "../AnyToStringConverter.h"

namespace Data {
    enum class zoneenv2_RecordSubType : __int32
    {
		zoneenv2_record_sub_button = 0,
		zoneenv2_record_sub_chest = 1,
		zoneenv2_record_sub_pot = 2,
		zoneenv2_record_sub_gate = 3,
		zoneenv2_record_sub_wall = 4,
		zoneenv2_record_sub_refiner = 5,
		zoneenv2_record_sub_control_point = 6,
		zoneenv2_record_sub_portal = 7,
		zoneenv2_record_sub_portal_list = 8,
		zoneenv2_record_sub_foot_switch = 9,
		zoneenv2_record_sub_effect_region = 10,
		zoneenv2_record_sub_airdash = 11,
		zoneenv2_record_sub_airdash_leave = 12,
		zoneenv2_record_sub_oceanic_region = 13,
		zoneenv2_record_sub_fall_death = 14,
		zoneenv2_record_sub_multiple_loop = 15,
		zoneenv2_record_sub_deck = 16,
		zoneenv2_record_sub_fishing_point = 17,
		zoneenv2_record_sub_attraction_popup = 18,
		zoneenv2_record_sub_enter_arena_dungeonlobby = 19,
		zoneenv2_record_sub_count = 20,
    };
#pragma pack(push, 1)
	struct zoneenv2_Record : DrEl
	{
	private:
		static std::wstring Get_category_EnumValue(__int8 value);
		static std::wstring Get_show_confirm_type_EnumValue(__int8 value);
		static std::wstring Get_manipulate_notification_range_EnumValue(__int8 value);
		static std::wstring Get_forwarding_types_EnumValue(__int8 value);
		static std::wstring Get_loot_forwarding_types_EnumValue(__int8 value);
	public:
		std::any GetField(const wchar_t* fieldName) const {
			if (wcscmp(fieldName, L"alias") == 0) return alias;
			if (wcscmp(fieldName, L"init_enable") == 0) return init_enable;
			if (wcscmp(fieldName, L"init_enable_duration") == 0) return init_enable_duration;
			if (wcscmp(fieldName, L"name2") == 0) return name2;
			if (wcscmp(fieldName, L"hide_disable") == 0) return hide_disable;
			if (wcscmp(fieldName, L"category") == 0) return category;
			if (wcscmp(fieldName, L"required_fielditem") == 0) return required_fielditem;
			if (wcscmp(fieldName, L"manipulate_by_item") == 0) return manipulate_by_item;
			if (wcscmp(fieldName, L"manipulate_by_item_count") == 0) return manipulate_by_item_count;
			if (wcscmp(fieldName, L"show_require_manipulate_by_item_message") == 0) return show_require_manipulate_by_item_message;
			if (wcscmp(fieldName, L"consume_item_by_manipulate") == 0) return consume_item_by_manipulate;
			if (wcscmp(fieldName, L"broadcast_manipulate_cinematic") == 0) return broadcast_manipulate_cinematic;
			if (wcscmp(fieldName, L"show_confirm_type") == 0) return show_confirm_type;
			if (wcscmp(fieldName, L"manipulate_notification_range") == 0) return manipulate_notification_range;
			if (wcscmp(fieldName, L"required_faction_score") == 0) return required_faction_score;
			if (wcscmp(fieldName, L"required_faction_score_max") == 0) return required_faction_score_max;
			if (wcscmp(fieldName, L"consume_faction_score") == 0) return consume_faction_score;
			if (wcscmp(fieldName, L"manipulate_duration") == 0) return manipulate_duration;
			if (wcscmp(fieldName, L"manipulated_effect") == 0) return manipulated_effect;
			if (wcscmp(fieldName, L"main_faction_effect") == 0) return main_faction_effect;
			if (wcscmp(fieldName, L"main_faction_effect_distance") == 0) return main_faction_effect_distance;
			if (wcscmp(fieldName, L"cannot_manipulate_effect") == 0) return cannot_manipulate_effect;
			if (wcscmp(fieldName, L"cannot_manipulate_in_combat") == 0) return cannot_manipulate_in_combat;
			if (wcscmp(fieldName, L"cannot_manipulate_in_max_instant_heart_count") == 0) return cannot_manipulate_in_max_instant_heart_count;
			if (wcscmp(fieldName, L"required_joined_main_faction") == 0) return required_joined_main_faction;
			if (wcscmp(fieldName, L"required_activated_main_faction") == 0) return required_activated_main_faction;
			if (wcscmp(fieldName, L"required_activated_faction") == 0) return required_activated_faction;
			if (wcscmp(fieldName, L"respawn_duration") == 0) return respawn_duration;
			if (wcscmp(fieldName, L"rollback") == 0) return rollback;
			if (wcscmp(fieldName, L"max_hp") == 0) return max_hp;
			if (wcscmp(fieldName, L"attack_skill") == 0) return attack_skill;
			if (wcscmp(fieldName, L"attack_skill_1") == 0) return attack_skill[0];
			if (wcscmp(fieldName, L"attack_skill_2") == 0) return attack_skill[1];
			if (wcscmp(fieldName, L"attack_skill_3") == 0) return attack_skill[2];
			if (wcscmp(fieldName, L"attack_skill_4") == 0) return attack_skill[3];
			if (wcscmp(fieldName, L"attack_skill3") == 0) return attack_skill3;
			if (wcscmp(fieldName, L"attack_skill3_1") == 0) return attack_skill3[0];
			if (wcscmp(fieldName, L"attack_skill3_2") == 0) return attack_skill3[1];
			if (wcscmp(fieldName, L"attack_skill3_3") == 0) return attack_skill3[2];
			if (wcscmp(fieldName, L"attack_skill3_4") == 0) return attack_skill3[3];
			if (wcscmp(fieldName, L"dice_result_broadcast") == 0) return dice_result_broadcast;
			if (wcscmp(fieldName, L"save_authorizer") == 0) return save_authorizer;
			if (wcscmp(fieldName, L"occurrence_event_in_respawn") == 0) return occurrence_event_in_respawn;
			if (wcscmp(fieldName, L"reward") == 0) return reward;
			if (wcscmp(fieldName, L"job_reward_blade_master") == 0) return job_reward_blade_master;
			if (wcscmp(fieldName, L"job_reward_kung_fu_fighter") == 0) return job_reward_kung_fu_fighter;
			if (wcscmp(fieldName, L"job_reward_force_master") == 0) return job_reward_force_master;
			if (wcscmp(fieldName, L"job_reward_shooter") == 0) return job_reward_shooter;
			if (wcscmp(fieldName, L"job_reward_destroyer") == 0) return job_reward_destroyer;
			if (wcscmp(fieldName, L"job_reward_summoner") == 0) return job_reward_summoner;
			if (wcscmp(fieldName, L"job_reward_assassin") == 0) return job_reward_assassin;
			if (wcscmp(fieldName, L"job_reward_sword_master") == 0) return job_reward_sword_master;
			if (wcscmp(fieldName, L"job_reward_warlock") == 0) return job_reward_warlock;
			if (wcscmp(fieldName, L"job_reward_soul_fighter") == 0) return job_reward_soul_fighter;
			if (wcscmp(fieldName, L"job_reward_warrior") == 0) return job_reward_warrior;
			if (wcscmp(fieldName, L"job_reward_archer") == 0) return job_reward_archer;
			if (wcscmp(fieldName, L"job_reward_spear_master") == 0) return job_reward_spear_master;
			if (wcscmp(fieldName, L"job_reward_thunderer") == 0) return job_reward_thunderer;
			if (wcscmp(fieldName, L"job_reward_dual_blader") == 0) return job_reward_dual_blader;
			if (wcscmp(fieldName, L"job_reward_bard") == 0) return job_reward_bard;
			if (wcscmp(fieldName, L"broadcast_pickup_reward_to_world") == 0) return broadcast_pickup_reward_to_world;
			if (wcscmp(fieldName, L"acquire_reward_to_inventory") == 0) return acquire_reward_to_inventory;
			if (wcscmp(fieldName, L"reward_faction_score") == 0) return reward_faction_score;
			if (wcscmp(fieldName, L"gain_faction_score_showname") == 0) return gain_faction_score_showname;
			if (wcscmp(fieldName, L"caster_animname") == 0) return caster_animname;
			if (wcscmp(fieldName, L"caster_showname") == 0) return caster_showname;
			if (wcscmp(fieldName, L"caster_picking_animname") == 0) return caster_picking_animname;
			if (wcscmp(fieldName, L"caster_manipulate_finish_showname") == 0) return caster_manipulate_finish_showname;
			if (wcscmp(fieldName, L"env_animname") == 0) return env_animname;
			if (wcscmp(fieldName, L"env_sound_name") == 0) return env_sound_name;
			if (wcscmp(fieldName, L"action_name2") == 0) return action_name2;
			if (wcscmp(fieldName, L"action_desc2") == 0) return action_desc2;
			if (wcscmp(fieldName, L"hide_close") == 0) return hide_close;
			if (wcscmp(fieldName, L"hide_empty") == 0) return hide_empty;
			if (wcscmp(fieldName, L"tooltip_option") == 0) return tooltip_option;
			if (wcscmp(fieldName, L"show_quest_indicator") == 0) return show_quest_indicator;
			if (wcscmp(fieldName, L"default_indicator_image") == 0) return default_indicator_image;
			if (wcscmp(fieldName, L"forwarding_types") == 0) return forwarding_types;
			if (wcscmp(fieldName, L"forwarding_types_1") == 0) return forwarding_types[0];
			if (wcscmp(fieldName, L"forwarding_types_2") == 0) return forwarding_types[1];
			if (wcscmp(fieldName, L"forwarding_types_3") == 0) return forwarding_types[2];
			if (wcscmp(fieldName, L"forwarding_types_4") == 0) return forwarding_types[3];
			if (wcscmp(fieldName, L"forwarding_types_5") == 0) return forwarding_types[4];
			if (wcscmp(fieldName, L"forwarding_types_6") == 0) return forwarding_types[5];
			if (wcscmp(fieldName, L"forwarding_types_7") == 0) return forwarding_types[6];
			if (wcscmp(fieldName, L"forwarding_types_8") == 0) return forwarding_types[7];
			if (wcscmp(fieldName, L"forwarding_types_9") == 0) return forwarding_types[8];
			if (wcscmp(fieldName, L"forwarding_types_10") == 0) return forwarding_types[9];
			if (wcscmp(fieldName, L"forwarding_types_11") == 0) return forwarding_types[10];
			if (wcscmp(fieldName, L"forwarding_types_12") == 0) return forwarding_types[11];
			if (wcscmp(fieldName, L"forwarding_types_13") == 0) return forwarding_types[12];
			if (wcscmp(fieldName, L"forwarding_types_14") == 0) return forwarding_types[13];
			if (wcscmp(fieldName, L"forwarding_types_15") == 0) return forwarding_types[14];
			if (wcscmp(fieldName, L"forwarding_types_16") == 0) return forwarding_types[15];
			if (wcscmp(fieldName, L"forwarding_types_17") == 0) return forwarding_types[16];
			if (wcscmp(fieldName, L"forwarding_types_18") == 0) return forwarding_types[17];
			if (wcscmp(fieldName, L"forwarding_types_19") == 0) return forwarding_types[18];
			if (wcscmp(fieldName, L"forwarding_types_20") == 0) return forwarding_types[19];
			if (wcscmp(fieldName, L"quests") == 0) return quests;
			if (wcscmp(fieldName, L"quests_1") == 0) return quests[0];
			if (wcscmp(fieldName, L"quests_2") == 0) return quests[1];
			if (wcscmp(fieldName, L"quests_3") == 0) return quests[2];
			if (wcscmp(fieldName, L"quests_4") == 0) return quests[3];
			if (wcscmp(fieldName, L"quests_5") == 0) return quests[4];
			if (wcscmp(fieldName, L"quests_6") == 0) return quests[5];
			if (wcscmp(fieldName, L"quests_7") == 0) return quests[6];
			if (wcscmp(fieldName, L"quests_8") == 0) return quests[7];
			if (wcscmp(fieldName, L"quests_9") == 0) return quests[8];
			if (wcscmp(fieldName, L"quests_10") == 0) return quests[9];
			if (wcscmp(fieldName, L"quests_11") == 0) return quests[10];
			if (wcscmp(fieldName, L"quests_12") == 0) return quests[11];
			if (wcscmp(fieldName, L"quests_13") == 0) return quests[12];
			if (wcscmp(fieldName, L"quests_14") == 0) return quests[13];
			if (wcscmp(fieldName, L"quests_15") == 0) return quests[14];
			if (wcscmp(fieldName, L"quests_16") == 0) return quests[15];
			if (wcscmp(fieldName, L"quests_17") == 0) return quests[16];
			if (wcscmp(fieldName, L"quests_18") == 0) return quests[17];
			if (wcscmp(fieldName, L"quests_19") == 0) return quests[18];
			if (wcscmp(fieldName, L"quests_20") == 0) return quests[19];
			if (wcscmp(fieldName, L"missions") == 0) return missions;
			if (wcscmp(fieldName, L"missions_1") == 0) return missions[0];
			if (wcscmp(fieldName, L"missions_2") == 0) return missions[1];
			if (wcscmp(fieldName, L"missions_3") == 0) return missions[2];
			if (wcscmp(fieldName, L"missions_4") == 0) return missions[3];
			if (wcscmp(fieldName, L"missions_5") == 0) return missions[4];
			if (wcscmp(fieldName, L"missions_6") == 0) return missions[5];
			if (wcscmp(fieldName, L"missions_7") == 0) return missions[6];
			if (wcscmp(fieldName, L"missions_8") == 0) return missions[7];
			if (wcscmp(fieldName, L"missions_9") == 0) return missions[8];
			if (wcscmp(fieldName, L"missions_10") == 0) return missions[9];
			if (wcscmp(fieldName, L"missions_11") == 0) return missions[10];
			if (wcscmp(fieldName, L"missions_12") == 0) return missions[11];
			if (wcscmp(fieldName, L"missions_13") == 0) return missions[12];
			if (wcscmp(fieldName, L"missions_14") == 0) return missions[13];
			if (wcscmp(fieldName, L"missions_15") == 0) return missions[14];
			if (wcscmp(fieldName, L"missions_16") == 0) return missions[15];
			if (wcscmp(fieldName, L"missions_17") == 0) return missions[16];
			if (wcscmp(fieldName, L"missions_18") == 0) return missions[17];
			if (wcscmp(fieldName, L"missions_19") == 0) return missions[18];
			if (wcscmp(fieldName, L"missions_20") == 0) return missions[19];
			if (wcscmp(fieldName, L"cases") == 0) return cases;
			if (wcscmp(fieldName, L"cases_1") == 0) return cases[0];
			if (wcscmp(fieldName, L"cases_2") == 0) return cases[1];
			if (wcscmp(fieldName, L"cases_3") == 0) return cases[2];
			if (wcscmp(fieldName, L"cases_4") == 0) return cases[3];
			if (wcscmp(fieldName, L"cases_5") == 0) return cases[4];
			if (wcscmp(fieldName, L"cases_6") == 0) return cases[5];
			if (wcscmp(fieldName, L"cases_7") == 0) return cases[6];
			if (wcscmp(fieldName, L"cases_8") == 0) return cases[7];
			if (wcscmp(fieldName, L"cases_9") == 0) return cases[8];
			if (wcscmp(fieldName, L"cases_10") == 0) return cases[9];
			if (wcscmp(fieldName, L"cases_11") == 0) return cases[10];
			if (wcscmp(fieldName, L"cases_12") == 0) return cases[11];
			if (wcscmp(fieldName, L"cases_13") == 0) return cases[12];
			if (wcscmp(fieldName, L"cases_14") == 0) return cases[13];
			if (wcscmp(fieldName, L"cases_15") == 0) return cases[14];
			if (wcscmp(fieldName, L"cases_16") == 0) return cases[15];
			if (wcscmp(fieldName, L"cases_17") == 0) return cases[16];
			if (wcscmp(fieldName, L"cases_18") == 0) return cases[17];
			if (wcscmp(fieldName, L"cases_19") == 0) return cases[18];
			if (wcscmp(fieldName, L"cases_20") == 0) return cases[19];
			if (wcscmp(fieldName, L"case_subtypes") == 0) return case_subtypes;
			if (wcscmp(fieldName, L"case_subtypes_1") == 0) return case_subtypes[0];
			if (wcscmp(fieldName, L"case_subtypes_2") == 0) return case_subtypes[1];
			if (wcscmp(fieldName, L"case_subtypes_3") == 0) return case_subtypes[2];
			if (wcscmp(fieldName, L"case_subtypes_4") == 0) return case_subtypes[3];
			if (wcscmp(fieldName, L"case_subtypes_5") == 0) return case_subtypes[4];
			if (wcscmp(fieldName, L"case_subtypes_6") == 0) return case_subtypes[5];
			if (wcscmp(fieldName, L"case_subtypes_7") == 0) return case_subtypes[6];
			if (wcscmp(fieldName, L"case_subtypes_8") == 0) return case_subtypes[7];
			if (wcscmp(fieldName, L"case_subtypes_9") == 0) return case_subtypes[8];
			if (wcscmp(fieldName, L"case_subtypes_10") == 0) return case_subtypes[9];
			if (wcscmp(fieldName, L"case_subtypes_11") == 0) return case_subtypes[10];
			if (wcscmp(fieldName, L"case_subtypes_12") == 0) return case_subtypes[11];
			if (wcscmp(fieldName, L"case_subtypes_13") == 0) return case_subtypes[12];
			if (wcscmp(fieldName, L"case_subtypes_14") == 0) return case_subtypes[13];
			if (wcscmp(fieldName, L"case_subtypes_15") == 0) return case_subtypes[14];
			if (wcscmp(fieldName, L"case_subtypes_16") == 0) return case_subtypes[15];
			if (wcscmp(fieldName, L"case_subtypes_17") == 0) return case_subtypes[16];
			if (wcscmp(fieldName, L"case_subtypes_18") == 0) return case_subtypes[17];
			if (wcscmp(fieldName, L"case_subtypes_19") == 0) return case_subtypes[18];
			if (wcscmp(fieldName, L"case_subtypes_20") == 0) return case_subtypes[19];
			if (wcscmp(fieldName, L"loot_forwarding_types") == 0) return loot_forwarding_types;
			if (wcscmp(fieldName, L"loot_forwarding_types_1") == 0) return loot_forwarding_types[0];
			if (wcscmp(fieldName, L"loot_forwarding_types_2") == 0) return loot_forwarding_types[1];
			if (wcscmp(fieldName, L"loot_forwarding_types_3") == 0) return loot_forwarding_types[2];
			if (wcscmp(fieldName, L"loot_forwarding_types_4") == 0) return loot_forwarding_types[3];
			if (wcscmp(fieldName, L"loot_forwarding_types_5") == 0) return loot_forwarding_types[4];
			if (wcscmp(fieldName, L"loot_forwarding_types_6") == 0) return loot_forwarding_types[5];
			if (wcscmp(fieldName, L"loot_forwarding_types_7") == 0) return loot_forwarding_types[6];
			if (wcscmp(fieldName, L"loot_forwarding_types_8") == 0) return loot_forwarding_types[7];
			if (wcscmp(fieldName, L"loot_quests") == 0) return loot_quests;
			if (wcscmp(fieldName, L"loot_quests_1") == 0) return loot_quests[0];
			if (wcscmp(fieldName, L"loot_quests_2") == 0) return loot_quests[1];
			if (wcscmp(fieldName, L"loot_quests_3") == 0) return loot_quests[2];
			if (wcscmp(fieldName, L"loot_quests_4") == 0) return loot_quests[3];
			if (wcscmp(fieldName, L"loot_quests_5") == 0) return loot_quests[4];
			if (wcscmp(fieldName, L"loot_quests_6") == 0) return loot_quests[5];
			if (wcscmp(fieldName, L"loot_quests_7") == 0) return loot_quests[6];
			if (wcscmp(fieldName, L"loot_quests_8") == 0) return loot_quests[7];
			if (wcscmp(fieldName, L"loot_missions") == 0) return loot_missions;
			if (wcscmp(fieldName, L"loot_missions_1") == 0) return loot_missions[0];
			if (wcscmp(fieldName, L"loot_missions_2") == 0) return loot_missions[1];
			if (wcscmp(fieldName, L"loot_missions_3") == 0) return loot_missions[2];
			if (wcscmp(fieldName, L"loot_missions_4") == 0) return loot_missions[3];
			if (wcscmp(fieldName, L"loot_missions_5") == 0) return loot_missions[4];
			if (wcscmp(fieldName, L"loot_missions_6") == 0) return loot_missions[5];
			if (wcscmp(fieldName, L"loot_missions_7") == 0) return loot_missions[6];
			if (wcscmp(fieldName, L"loot_missions_8") == 0) return loot_missions[7];
			if (wcscmp(fieldName, L"loot_cases") == 0) return loot_cases;
			if (wcscmp(fieldName, L"loot_cases_1") == 0) return loot_cases[0];
			if (wcscmp(fieldName, L"loot_cases_2") == 0) return loot_cases[1];
			if (wcscmp(fieldName, L"loot_cases_3") == 0) return loot_cases[2];
			if (wcscmp(fieldName, L"loot_cases_4") == 0) return loot_cases[3];
			if (wcscmp(fieldName, L"loot_cases_5") == 0) return loot_cases[4];
			if (wcscmp(fieldName, L"loot_cases_6") == 0) return loot_cases[5];
			if (wcscmp(fieldName, L"loot_cases_7") == 0) return loot_cases[6];
			if (wcscmp(fieldName, L"loot_cases_8") == 0) return loot_cases[7];
			if (wcscmp(fieldName, L"loot_item") == 0) return loot_item;
			if (wcscmp(fieldName, L"loot_item_1") == 0) return loot_item[0];
			if (wcscmp(fieldName, L"loot_item_2") == 0) return loot_item[1];
			if (wcscmp(fieldName, L"loot_item_3") == 0) return loot_item[2];
			if (wcscmp(fieldName, L"loot_item_4") == 0) return loot_item[3];
			if (wcscmp(fieldName, L"loot_item_5") == 0) return loot_item[4];
			if (wcscmp(fieldName, L"loot_item_6") == 0) return loot_item[5];
			if (wcscmp(fieldName, L"loot_item_7") == 0) return loot_item[6];
			if (wcscmp(fieldName, L"loot_item_8") == 0) return loot_item[7];
			if (wcscmp(fieldName, L"lootable") == 0) return lootable;
			if (wcscmp(fieldName, L"attraction") == 0) return attraction;
			if (wcscmp(fieldName, L"caster_reaction_attach") == 0) return caster_reaction_attach;
			if (wcscmp(fieldName, L"spawn_mesh") == 0) return spawn_mesh;
			if (wcscmp(fieldName, L"spawn_animset") == 0) return spawn_animset;
			if (wcscmp(fieldName, L"image_text") == 0) return image_text;
			if (wcscmp(fieldName, L"mapunit_image_enable_close_true_imageset") == 0) return mapunit_image_enable_close_true_imageset;
			if (wcscmp(fieldName, L"mapunit_image_enable_close_true_over_imageset") == 0) return mapunit_image_enable_close_true_over_imageset;
			if (wcscmp(fieldName, L"mapunit_image_enable_close_true_size_x") == 0) return mapunit_image_enable_close_true_size_x;
			if (wcscmp(fieldName, L"mapunit_image_enable_close_true_size_y") == 0) return mapunit_image_enable_close_true_size_y;
			if (wcscmp(fieldName, L"mapunit_image_enable_close_false_imageset") == 0) return mapunit_image_enable_close_false_imageset;
			if (wcscmp(fieldName, L"mapunit_image_enable_close_false_over_imageset") == 0) return mapunit_image_enable_close_false_over_imageset;
			if (wcscmp(fieldName, L"mapunit_image_enable_close_false_size_x") == 0) return mapunit_image_enable_close_false_size_x;
			if (wcscmp(fieldName, L"mapunit_image_enable_close_false_size_y") == 0) return mapunit_image_enable_close_false_size_y;
			if (wcscmp(fieldName, L"mapunit_image_enable_open_imageset") == 0) return mapunit_image_enable_open_imageset;
			if (wcscmp(fieldName, L"mapunit_image_enable_open_over_imageset") == 0) return mapunit_image_enable_open_over_imageset;
			if (wcscmp(fieldName, L"mapunit_image_enable_open_size_x") == 0) return mapunit_image_enable_open_size_x;
			if (wcscmp(fieldName, L"mapunit_image_enable_open_size_y") == 0) return mapunit_image_enable_open_size_y;
			if (wcscmp(fieldName, L"mapunit_image_disable_imageset") == 0) return mapunit_image_disable_imageset;
			if (wcscmp(fieldName, L"mapunit_image_disable_over_imageset") == 0) return mapunit_image_disable_over_imageset;
			if (wcscmp(fieldName, L"mapunit_image_disable_size_x") == 0) return mapunit_image_disable_size_x;
			if (wcscmp(fieldName, L"mapunit_image_disable_size_y") == 0) return mapunit_image_disable_size_y;
			if (wcscmp(fieldName, L"mapunit_image_unconfirmed_imageset") == 0) return mapunit_image_unconfirmed_imageset;
			if (wcscmp(fieldName, L"mapunit_image_unconfirmed_over_imageset") == 0) return mapunit_image_unconfirmed_over_imageset;
			if (wcscmp(fieldName, L"mapunit_image_unconfirmed_size_x") == 0) return mapunit_image_unconfirmed_size_x;
			if (wcscmp(fieldName, L"mapunit_image_unconfirmed_size_y") == 0) return mapunit_image_unconfirmed_size_y;

			return std::any();
		}
		std::wstring GetFieldAsString(const wchar_t* fieldName) {
			if (wcscmp(fieldName, L"alias") == 0) return Data::AnyFieldToStringConverter::ToString(&alias);
			if (wcscmp(fieldName, L"init_enable") == 0) return Data::AnyFieldToStringConverter::ToString(&init_enable);
			if (wcscmp(fieldName, L"init_enable_duration") == 0) return Data::AnyFieldToStringConverter::ToString(&init_enable_duration);
			if (wcscmp(fieldName, L"name2") == 0) return Data::AnyFieldToStringConverter::ToString(&name2);
			if (wcscmp(fieldName, L"hide_disable") == 0) return Data::AnyFieldToStringConverter::ToString(&hide_disable);
			if (wcscmp(fieldName, L"category") == 0) return Data::AnyFieldToStringConverter::ToString(&category);
			if (wcscmp(fieldName, L"required_fielditem") == 0) return Data::AnyFieldToStringConverter::ToString(&required_fielditem);
			if (wcscmp(fieldName, L"manipulate_by_item") == 0) return Data::AnyFieldToStringConverter::ToString(&manipulate_by_item);
			if (wcscmp(fieldName, L"manipulate_by_item_count") == 0) return Data::AnyFieldToStringConverter::ToString(&manipulate_by_item_count);
			if (wcscmp(fieldName, L"show_require_manipulate_by_item_message") == 0) return Data::AnyFieldToStringConverter::ToString(&show_require_manipulate_by_item_message);
			if (wcscmp(fieldName, L"consume_item_by_manipulate") == 0) return Data::AnyFieldToStringConverter::ToString(&consume_item_by_manipulate);
			if (wcscmp(fieldName, L"broadcast_manipulate_cinematic") == 0) return Data::AnyFieldToStringConverter::ToString(&broadcast_manipulate_cinematic);
			if (wcscmp(fieldName, L"show_confirm_type") == 0) return Data::AnyFieldToStringConverter::ToString(&show_confirm_type);
			if (wcscmp(fieldName, L"manipulate_notification_range") == 0) return Data::AnyFieldToStringConverter::ToString(&manipulate_notification_range);
			if (wcscmp(fieldName, L"required_faction_score") == 0) return Data::AnyFieldToStringConverter::ToString(&required_faction_score);
			if (wcscmp(fieldName, L"required_faction_score_max") == 0) return Data::AnyFieldToStringConverter::ToString(&required_faction_score_max);
			if (wcscmp(fieldName, L"consume_faction_score") == 0) return Data::AnyFieldToStringConverter::ToString(&consume_faction_score);
			if (wcscmp(fieldName, L"manipulate_duration") == 0) return Data::AnyFieldToStringConverter::ToString(&manipulate_duration);
			if (wcscmp(fieldName, L"manipulated_effect") == 0) return Data::AnyFieldToStringConverter::ToString(&manipulated_effect);
			if (wcscmp(fieldName, L"main_faction_effect") == 0) return Data::AnyFieldToStringConverter::ToString(&main_faction_effect);
			if (wcscmp(fieldName, L"main_faction_effect_distance") == 0) return Data::AnyFieldToStringConverter::ToString(&main_faction_effect_distance);
			if (wcscmp(fieldName, L"cannot_manipulate_effect") == 0) return Data::AnyFieldToStringConverter::ToString(&cannot_manipulate_effect);
			if (wcscmp(fieldName, L"cannot_manipulate_in_combat") == 0) return Data::AnyFieldToStringConverter::ToString(&cannot_manipulate_in_combat);
			if (wcscmp(fieldName, L"cannot_manipulate_in_max_instant_heart_count") == 0) return Data::AnyFieldToStringConverter::ToString(&cannot_manipulate_in_max_instant_heart_count);
			if (wcscmp(fieldName, L"required_joined_main_faction") == 0) return Data::AnyFieldToStringConverter::ToString(&required_joined_main_faction);
			if (wcscmp(fieldName, L"required_activated_main_faction") == 0) return Data::AnyFieldToStringConverter::ToString(&required_activated_main_faction);
			if (wcscmp(fieldName, L"required_activated_faction") == 0) return Data::AnyFieldToStringConverter::ToString(&required_activated_faction);
			if (wcscmp(fieldName, L"respawn_duration") == 0) return Data::AnyFieldToStringConverter::ToString(&respawn_duration);
			if (wcscmp(fieldName, L"rollback") == 0) return Data::AnyFieldToStringConverter::ToString(&rollback);
			if (wcscmp(fieldName, L"max_hp") == 0) return Data::AnyFieldToStringConverter::ToString(&max_hp);
			if (wcscmp(fieldName, L"attack_skill_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(attack_skill[0]));
			if (wcscmp(fieldName, L"attack_skill_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(attack_skill[1]));
			if (wcscmp(fieldName, L"attack_skill_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(attack_skill[2]));
			if (wcscmp(fieldName, L"attack_skill_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(attack_skill[3]));
			if (wcscmp(fieldName, L"attack_skill3_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(attack_skill3[0]));
			if (wcscmp(fieldName, L"attack_skill3_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(attack_skill3[1]));
			if (wcscmp(fieldName, L"attack_skill3_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(attack_skill3[2]));
			if (wcscmp(fieldName, L"attack_skill3_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(attack_skill3[3]));
			if (wcscmp(fieldName, L"dice_result_broadcast") == 0) return Data::AnyFieldToStringConverter::ToString(&dice_result_broadcast);
			if (wcscmp(fieldName, L"save_authorizer") == 0) return Data::AnyFieldToStringConverter::ToString(&save_authorizer);
			if (wcscmp(fieldName, L"occurrence_event_in_respawn") == 0) return Data::AnyFieldToStringConverter::ToString(&occurrence_event_in_respawn);
			if (wcscmp(fieldName, L"reward") == 0) return Data::AnyFieldToStringConverter::ToString(&reward);
			if (wcscmp(fieldName, L"job_reward_blade_master") == 0) return Data::AnyFieldToStringConverter::ToString(&job_reward_blade_master);
			if (wcscmp(fieldName, L"job_reward_kung_fu_fighter") == 0) return Data::AnyFieldToStringConverter::ToString(&job_reward_kung_fu_fighter);
			if (wcscmp(fieldName, L"job_reward_force_master") == 0) return Data::AnyFieldToStringConverter::ToString(&job_reward_force_master);
			if (wcscmp(fieldName, L"job_reward_shooter") == 0) return Data::AnyFieldToStringConverter::ToString(&job_reward_shooter);
			if (wcscmp(fieldName, L"job_reward_destroyer") == 0) return Data::AnyFieldToStringConverter::ToString(&job_reward_destroyer);
			if (wcscmp(fieldName, L"job_reward_summoner") == 0) return Data::AnyFieldToStringConverter::ToString(&job_reward_summoner);
			if (wcscmp(fieldName, L"job_reward_assassin") == 0) return Data::AnyFieldToStringConverter::ToString(&job_reward_assassin);
			if (wcscmp(fieldName, L"job_reward_sword_master") == 0) return Data::AnyFieldToStringConverter::ToString(&job_reward_sword_master);
			if (wcscmp(fieldName, L"job_reward_warlock") == 0) return Data::AnyFieldToStringConverter::ToString(&job_reward_warlock);
			if (wcscmp(fieldName, L"job_reward_soul_fighter") == 0) return Data::AnyFieldToStringConverter::ToString(&job_reward_soul_fighter);
			if (wcscmp(fieldName, L"job_reward_warrior") == 0) return Data::AnyFieldToStringConverter::ToString(&job_reward_warrior);
			if (wcscmp(fieldName, L"job_reward_archer") == 0) return Data::AnyFieldToStringConverter::ToString(&job_reward_archer);
			if (wcscmp(fieldName, L"job_reward_spear_master") == 0) return Data::AnyFieldToStringConverter::ToString(&job_reward_spear_master);
			if (wcscmp(fieldName, L"job_reward_thunderer") == 0) return Data::AnyFieldToStringConverter::ToString(&job_reward_thunderer);
			if (wcscmp(fieldName, L"job_reward_dual_blader") == 0) return Data::AnyFieldToStringConverter::ToString(&job_reward_dual_blader);
			if (wcscmp(fieldName, L"job_reward_bard") == 0) return Data::AnyFieldToStringConverter::ToString(&job_reward_bard);
			if (wcscmp(fieldName, L"broadcast_pickup_reward_to_world") == 0) return Data::AnyFieldToStringConverter::ToString(&broadcast_pickup_reward_to_world);
			if (wcscmp(fieldName, L"acquire_reward_to_inventory") == 0) return Data::AnyFieldToStringConverter::ToString(&acquire_reward_to_inventory);
			if (wcscmp(fieldName, L"reward_faction_score") == 0) return Data::AnyFieldToStringConverter::ToString(&reward_faction_score);
			if (wcscmp(fieldName, L"gain_faction_score_showname") == 0) return Data::AnyFieldToStringConverter::ToString(&gain_faction_score_showname);
			if (wcscmp(fieldName, L"caster_animname") == 0) return Data::AnyFieldToStringConverter::ToString(&caster_animname);
			if (wcscmp(fieldName, L"caster_showname") == 0) return Data::AnyFieldToStringConverter::ToString(&caster_showname);
			if (wcscmp(fieldName, L"caster_picking_animname") == 0) return Data::AnyFieldToStringConverter::ToString(&caster_picking_animname);
			if (wcscmp(fieldName, L"caster_manipulate_finish_showname") == 0) return Data::AnyFieldToStringConverter::ToString(&caster_manipulate_finish_showname);
			if (wcscmp(fieldName, L"env_animname") == 0) return Data::AnyFieldToStringConverter::ToString(&env_animname);
			if (wcscmp(fieldName, L"env_sound_name") == 0) return Data::AnyFieldToStringConverter::ToString(&env_sound_name);
			if (wcscmp(fieldName, L"action_name2") == 0) return Data::AnyFieldToStringConverter::ToString(&action_name2);
			if (wcscmp(fieldName, L"action_desc2") == 0) return Data::AnyFieldToStringConverter::ToString(&action_desc2);
			if (wcscmp(fieldName, L"hide_close") == 0) return Data::AnyFieldToStringConverter::ToString(&hide_close);
			if (wcscmp(fieldName, L"hide_empty") == 0) return Data::AnyFieldToStringConverter::ToString(&hide_empty);
			if (wcscmp(fieldName, L"tooltip_option") == 0) return Data::AnyFieldToStringConverter::ToString(&tooltip_option);
			if (wcscmp(fieldName, L"show_quest_indicator") == 0) return Data::AnyFieldToStringConverter::ToString(&show_quest_indicator);
			if (wcscmp(fieldName, L"default_indicator_image") == 0) return Data::AnyFieldToStringConverter::ToString(&default_indicator_image);
			if (wcscmp(fieldName, L"forwarding_types_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[0]));
			if (wcscmp(fieldName, L"forwarding_types_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[1]));
			if (wcscmp(fieldName, L"forwarding_types_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[2]));
			if (wcscmp(fieldName, L"forwarding_types_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[3]));
			if (wcscmp(fieldName, L"forwarding_types_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[4]));
			if (wcscmp(fieldName, L"forwarding_types_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[5]));
			if (wcscmp(fieldName, L"forwarding_types_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[6]));
			if (wcscmp(fieldName, L"forwarding_types_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[7]));
			if (wcscmp(fieldName, L"forwarding_types_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[8]));
			if (wcscmp(fieldName, L"forwarding_types_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[9]));
			if (wcscmp(fieldName, L"forwarding_types_11") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[10]));
			if (wcscmp(fieldName, L"forwarding_types_12") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[11]));
			if (wcscmp(fieldName, L"forwarding_types_13") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[12]));
			if (wcscmp(fieldName, L"forwarding_types_14") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[13]));
			if (wcscmp(fieldName, L"forwarding_types_15") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[14]));
			if (wcscmp(fieldName, L"forwarding_types_16") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[15]));
			if (wcscmp(fieldName, L"forwarding_types_17") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[16]));
			if (wcscmp(fieldName, L"forwarding_types_18") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[17]));
			if (wcscmp(fieldName, L"forwarding_types_19") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[18]));
			if (wcscmp(fieldName, L"forwarding_types_20") == 0) return Data::AnyFieldToStringConverter::ToString(&(forwarding_types[19]));
			if (wcscmp(fieldName, L"quests_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[0]));
			if (wcscmp(fieldName, L"quests_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[1]));
			if (wcscmp(fieldName, L"quests_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[2]));
			if (wcscmp(fieldName, L"quests_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[3]));
			if (wcscmp(fieldName, L"quests_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[4]));
			if (wcscmp(fieldName, L"quests_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[5]));
			if (wcscmp(fieldName, L"quests_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[6]));
			if (wcscmp(fieldName, L"quests_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[7]));
			if (wcscmp(fieldName, L"quests_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[8]));
			if (wcscmp(fieldName, L"quests_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[9]));
			if (wcscmp(fieldName, L"quests_11") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[10]));
			if (wcscmp(fieldName, L"quests_12") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[11]));
			if (wcscmp(fieldName, L"quests_13") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[12]));
			if (wcscmp(fieldName, L"quests_14") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[13]));
			if (wcscmp(fieldName, L"quests_15") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[14]));
			if (wcscmp(fieldName, L"quests_16") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[15]));
			if (wcscmp(fieldName, L"quests_17") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[16]));
			if (wcscmp(fieldName, L"quests_18") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[17]));
			if (wcscmp(fieldName, L"quests_19") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[18]));
			if (wcscmp(fieldName, L"quests_20") == 0) return Data::AnyFieldToStringConverter::ToString(&(quests[19]));
			if (wcscmp(fieldName, L"missions_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[0]));
			if (wcscmp(fieldName, L"missions_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[1]));
			if (wcscmp(fieldName, L"missions_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[2]));
			if (wcscmp(fieldName, L"missions_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[3]));
			if (wcscmp(fieldName, L"missions_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[4]));
			if (wcscmp(fieldName, L"missions_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[5]));
			if (wcscmp(fieldName, L"missions_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[6]));
			if (wcscmp(fieldName, L"missions_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[7]));
			if (wcscmp(fieldName, L"missions_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[8]));
			if (wcscmp(fieldName, L"missions_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[9]));
			if (wcscmp(fieldName, L"missions_11") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[10]));
			if (wcscmp(fieldName, L"missions_12") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[11]));
			if (wcscmp(fieldName, L"missions_13") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[12]));
			if (wcscmp(fieldName, L"missions_14") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[13]));
			if (wcscmp(fieldName, L"missions_15") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[14]));
			if (wcscmp(fieldName, L"missions_16") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[15]));
			if (wcscmp(fieldName, L"missions_17") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[16]));
			if (wcscmp(fieldName, L"missions_18") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[17]));
			if (wcscmp(fieldName, L"missions_19") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[18]));
			if (wcscmp(fieldName, L"missions_20") == 0) return Data::AnyFieldToStringConverter::ToString(&(missions[19]));
			if (wcscmp(fieldName, L"cases_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[0]));
			if (wcscmp(fieldName, L"cases_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[1]));
			if (wcscmp(fieldName, L"cases_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[2]));
			if (wcscmp(fieldName, L"cases_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[3]));
			if (wcscmp(fieldName, L"cases_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[4]));
			if (wcscmp(fieldName, L"cases_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[5]));
			if (wcscmp(fieldName, L"cases_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[6]));
			if (wcscmp(fieldName, L"cases_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[7]));
			if (wcscmp(fieldName, L"cases_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[8]));
			if (wcscmp(fieldName, L"cases_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[9]));
			if (wcscmp(fieldName, L"cases_11") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[10]));
			if (wcscmp(fieldName, L"cases_12") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[11]));
			if (wcscmp(fieldName, L"cases_13") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[12]));
			if (wcscmp(fieldName, L"cases_14") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[13]));
			if (wcscmp(fieldName, L"cases_15") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[14]));
			if (wcscmp(fieldName, L"cases_16") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[15]));
			if (wcscmp(fieldName, L"cases_17") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[16]));
			if (wcscmp(fieldName, L"cases_18") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[17]));
			if (wcscmp(fieldName, L"cases_19") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[18]));
			if (wcscmp(fieldName, L"cases_20") == 0) return Data::AnyFieldToStringConverter::ToString(&(cases[19]));
			if (wcscmp(fieldName, L"case_subtypes_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[0]));
			if (wcscmp(fieldName, L"case_subtypes_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[1]));
			if (wcscmp(fieldName, L"case_subtypes_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[2]));
			if (wcscmp(fieldName, L"case_subtypes_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[3]));
			if (wcscmp(fieldName, L"case_subtypes_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[4]));
			if (wcscmp(fieldName, L"case_subtypes_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[5]));
			if (wcscmp(fieldName, L"case_subtypes_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[6]));
			if (wcscmp(fieldName, L"case_subtypes_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[7]));
			if (wcscmp(fieldName, L"case_subtypes_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[8]));
			if (wcscmp(fieldName, L"case_subtypes_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[9]));
			if (wcscmp(fieldName, L"case_subtypes_11") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[10]));
			if (wcscmp(fieldName, L"case_subtypes_12") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[11]));
			if (wcscmp(fieldName, L"case_subtypes_13") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[12]));
			if (wcscmp(fieldName, L"case_subtypes_14") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[13]));
			if (wcscmp(fieldName, L"case_subtypes_15") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[14]));
			if (wcscmp(fieldName, L"case_subtypes_16") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[15]));
			if (wcscmp(fieldName, L"case_subtypes_17") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[16]));
			if (wcscmp(fieldName, L"case_subtypes_18") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[17]));
			if (wcscmp(fieldName, L"case_subtypes_19") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[18]));
			if (wcscmp(fieldName, L"case_subtypes_20") == 0) return Data::AnyFieldToStringConverter::ToString(&(case_subtypes[19]));
			if (wcscmp(fieldName, L"loot_forwarding_types_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_forwarding_types[0]));
			if (wcscmp(fieldName, L"loot_forwarding_types_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_forwarding_types[1]));
			if (wcscmp(fieldName, L"loot_forwarding_types_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_forwarding_types[2]));
			if (wcscmp(fieldName, L"loot_forwarding_types_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_forwarding_types[3]));
			if (wcscmp(fieldName, L"loot_forwarding_types_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_forwarding_types[4]));
			if (wcscmp(fieldName, L"loot_forwarding_types_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_forwarding_types[5]));
			if (wcscmp(fieldName, L"loot_forwarding_types_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_forwarding_types[6]));
			if (wcscmp(fieldName, L"loot_forwarding_types_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_forwarding_types[7]));
			if (wcscmp(fieldName, L"loot_quests_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_quests[0]));
			if (wcscmp(fieldName, L"loot_quests_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_quests[1]));
			if (wcscmp(fieldName, L"loot_quests_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_quests[2]));
			if (wcscmp(fieldName, L"loot_quests_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_quests[3]));
			if (wcscmp(fieldName, L"loot_quests_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_quests[4]));
			if (wcscmp(fieldName, L"loot_quests_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_quests[5]));
			if (wcscmp(fieldName, L"loot_quests_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_quests[6]));
			if (wcscmp(fieldName, L"loot_quests_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_quests[7]));
			if (wcscmp(fieldName, L"loot_missions_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_missions[0]));
			if (wcscmp(fieldName, L"loot_missions_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_missions[1]));
			if (wcscmp(fieldName, L"loot_missions_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_missions[2]));
			if (wcscmp(fieldName, L"loot_missions_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_missions[3]));
			if (wcscmp(fieldName, L"loot_missions_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_missions[4]));
			if (wcscmp(fieldName, L"loot_missions_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_missions[5]));
			if (wcscmp(fieldName, L"loot_missions_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_missions[6]));
			if (wcscmp(fieldName, L"loot_missions_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_missions[7]));
			if (wcscmp(fieldName, L"loot_cases_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_cases[0]));
			if (wcscmp(fieldName, L"loot_cases_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_cases[1]));
			if (wcscmp(fieldName, L"loot_cases_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_cases[2]));
			if (wcscmp(fieldName, L"loot_cases_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_cases[3]));
			if (wcscmp(fieldName, L"loot_cases_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_cases[4]));
			if (wcscmp(fieldName, L"loot_cases_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_cases[5]));
			if (wcscmp(fieldName, L"loot_cases_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_cases[6]));
			if (wcscmp(fieldName, L"loot_cases_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_cases[7]));
			if (wcscmp(fieldName, L"loot_item_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_item[0]));
			if (wcscmp(fieldName, L"loot_item_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_item[1]));
			if (wcscmp(fieldName, L"loot_item_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_item[2]));
			if (wcscmp(fieldName, L"loot_item_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_item[3]));
			if (wcscmp(fieldName, L"loot_item_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_item[4]));
			if (wcscmp(fieldName, L"loot_item_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_item[5]));
			if (wcscmp(fieldName, L"loot_item_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_item[6]));
			if (wcscmp(fieldName, L"loot_item_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(loot_item[7]));
			if (wcscmp(fieldName, L"lootable") == 0) return Data::AnyFieldToStringConverter::ToString(&lootable);
			if (wcscmp(fieldName, L"attraction") == 0) return Data::AnyFieldToStringConverter::ToString(&attraction);
			if (wcscmp(fieldName, L"caster_reaction_attach") == 0) return Data::AnyFieldToStringConverter::ToString(&caster_reaction_attach);
			if (wcscmp(fieldName, L"spawn_mesh") == 0) return Data::AnyFieldToStringConverter::ToString(&spawn_mesh);
			if (wcscmp(fieldName, L"spawn_animset") == 0) return Data::AnyFieldToStringConverter::ToString(&spawn_animset);
			if (wcscmp(fieldName, L"image_text") == 0) return Data::AnyFieldToStringConverter::ToString(&image_text);
			if (wcscmp(fieldName, L"mapunit_image_enable_close_true_imageset") == 0) return Data::AnyFieldToStringConverter::ToString(&mapunit_image_enable_close_true_imageset);
			if (wcscmp(fieldName, L"mapunit_image_enable_close_true_over_imageset") == 0) return Data::AnyFieldToStringConverter::ToString(&mapunit_image_enable_close_true_over_imageset);
			if (wcscmp(fieldName, L"mapunit_image_enable_close_true_size_x") == 0) return Data::AnyFieldToStringConverter::ToString(&mapunit_image_enable_close_true_size_x);
			if (wcscmp(fieldName, L"mapunit_image_enable_close_true_size_y") == 0) return Data::AnyFieldToStringConverter::ToString(&mapunit_image_enable_close_true_size_y);
			if (wcscmp(fieldName, L"mapunit_image_enable_close_false_imageset") == 0) return Data::AnyFieldToStringConverter::ToString(&mapunit_image_enable_close_false_imageset);
			if (wcscmp(fieldName, L"mapunit_image_enable_close_false_over_imageset") == 0) return Data::AnyFieldToStringConverter::ToString(&mapunit_image_enable_close_false_over_imageset);
			if (wcscmp(fieldName, L"mapunit_image_enable_close_false_size_x") == 0) return Data::AnyFieldToStringConverter::ToString(&mapunit_image_enable_close_false_size_x);
			if (wcscmp(fieldName, L"mapunit_image_enable_close_false_size_y") == 0) return Data::AnyFieldToStringConverter::ToString(&mapunit_image_enable_close_false_size_y);
			if (wcscmp(fieldName, L"mapunit_image_enable_open_imageset") == 0) return Data::AnyFieldToStringConverter::ToString(&mapunit_image_enable_open_imageset);
			if (wcscmp(fieldName, L"mapunit_image_enable_open_over_imageset") == 0) return Data::AnyFieldToStringConverter::ToString(&mapunit_image_enable_open_over_imageset);
			if (wcscmp(fieldName, L"mapunit_image_enable_open_size_x") == 0) return Data::AnyFieldToStringConverter::ToString(&mapunit_image_enable_open_size_x);
			if (wcscmp(fieldName, L"mapunit_image_enable_open_size_y") == 0) return Data::AnyFieldToStringConverter::ToString(&mapunit_image_enable_open_size_y);
			if (wcscmp(fieldName, L"mapunit_image_disable_imageset") == 0) return Data::AnyFieldToStringConverter::ToString(&mapunit_image_disable_imageset);
			if (wcscmp(fieldName, L"mapunit_image_disable_over_imageset") == 0) return Data::AnyFieldToStringConverter::ToString(&mapunit_image_disable_over_imageset);
			if (wcscmp(fieldName, L"mapunit_image_disable_size_x") == 0) return Data::AnyFieldToStringConverter::ToString(&mapunit_image_disable_size_x);
			if (wcscmp(fieldName, L"mapunit_image_disable_size_y") == 0) return Data::AnyFieldToStringConverter::ToString(&mapunit_image_disable_size_y);
			if (wcscmp(fieldName, L"mapunit_image_unconfirmed_imageset") == 0) return Data::AnyFieldToStringConverter::ToString(&mapunit_image_unconfirmed_imageset);
			if (wcscmp(fieldName, L"mapunit_image_unconfirmed_over_imageset") == 0) return Data::AnyFieldToStringConverter::ToString(&mapunit_image_unconfirmed_over_imageset);
			if (wcscmp(fieldName, L"mapunit_image_unconfirmed_size_x") == 0) return Data::AnyFieldToStringConverter::ToString(&mapunit_image_unconfirmed_size_x);
			if (wcscmp(fieldName, L"mapunit_image_unconfirmed_size_y") == 0) return Data::AnyFieldToStringConverter::ToString(&mapunit_image_unconfirmed_size_y);

			return L"";
		}
		void AutoCorrectLookupOffsets(const char* lookupDataPtr) {
			if (reinterpret_cast<std::uintptr_t>(alias) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) alias = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(alias));
			else return;
			if (reinterpret_cast<std::uintptr_t>(gain_faction_score_showname) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) gain_faction_score_showname = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(gain_faction_score_showname));
			if (reinterpret_cast<std::uintptr_t>(caster_animname) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) caster_animname = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(caster_animname));
			if (reinterpret_cast<std::uintptr_t>(caster_showname) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) caster_showname = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(caster_showname));
			if (reinterpret_cast<std::uintptr_t>(caster_picking_animname) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) caster_picking_animname = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(caster_picking_animname));
			if (reinterpret_cast<std::uintptr_t>(caster_manipulate_finish_showname) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) caster_manipulate_finish_showname = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(caster_manipulate_finish_showname));
			if (reinterpret_cast<std::uintptr_t>(env_animname) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) env_animname = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(env_animname));
			if (reinterpret_cast<std::uintptr_t>(env_sound_name) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) env_sound_name = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(env_sound_name));
			if (reinterpret_cast<std::uintptr_t>(default_indicator_image) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) default_indicator_image = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(default_indicator_image));
			if (reinterpret_cast<std::uintptr_t>(caster_reaction_attach) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) caster_reaction_attach = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(caster_reaction_attach));
			if (reinterpret_cast<std::uintptr_t>(spawn_mesh) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) spawn_mesh = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(spawn_mesh));
			if (reinterpret_cast<std::uintptr_t>(spawn_animset) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) spawn_animset = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(spawn_animset));
			if (reinterpret_cast<std::uintptr_t>(mapunit_image_enable_close_true_imageset) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) mapunit_image_enable_close_true_imageset = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(mapunit_image_enable_close_true_imageset));
			if (reinterpret_cast<std::uintptr_t>(mapunit_image_enable_close_true_over_imageset) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) mapunit_image_enable_close_true_over_imageset = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(mapunit_image_enable_close_true_over_imageset));
			if (reinterpret_cast<std::uintptr_t>(mapunit_image_enable_close_false_imageset) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) mapunit_image_enable_close_false_imageset = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(mapunit_image_enable_close_false_imageset));
			if (reinterpret_cast<std::uintptr_t>(mapunit_image_enable_close_false_over_imageset) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) mapunit_image_enable_close_false_over_imageset = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(mapunit_image_enable_close_false_over_imageset));
			if (reinterpret_cast<std::uintptr_t>(mapunit_image_enable_open_imageset) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) mapunit_image_enable_open_imageset = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(mapunit_image_enable_open_imageset));
			if (reinterpret_cast<std::uintptr_t>(mapunit_image_enable_open_over_imageset) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) mapunit_image_enable_open_over_imageset = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(mapunit_image_enable_open_over_imageset));
			if (reinterpret_cast<std::uintptr_t>(mapunit_image_disable_imageset) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) mapunit_image_disable_imageset = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(mapunit_image_disable_imageset));
			if (reinterpret_cast<std::uintptr_t>(mapunit_image_disable_over_imageset) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) mapunit_image_disable_over_imageset = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(mapunit_image_disable_over_imageset));
			if (reinterpret_cast<std::uintptr_t>(mapunit_image_unconfirmed_imageset) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) mapunit_image_unconfirmed_imageset = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(mapunit_image_unconfirmed_imageset));
			if (reinterpret_cast<std::uintptr_t>(mapunit_image_unconfirmed_over_imageset) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) mapunit_image_unconfirmed_over_imageset = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(mapunit_image_unconfirmed_over_imageset));
		}
		union Key
		{
            struct {
                
            };
			unsigned __int64 key;
		};
		__declspec(align(8)) Key key;
		wchar_t* alias;
bool init_enable;
char Pad0[3];
__int32 init_enable_duration;
Data::TableRef name2;
int name2_tableId(){return 405;};
bool hide_disable;
__int8 category;
std::wstring category_EnumValue() const {return Get_category_EnumValue(category);};
char Pad1[2];
Data::TableRef required_fielditem;
int required_fielditem_tableId(){return 137;};
Data::TableRef manipulate_by_item;
int manipulate_by_item_tableId(){return 189;};
__int16 manipulate_by_item_count;
bool show_require_manipulate_by_item_message;
bool consume_item_by_manipulate;
Data::TableRef broadcast_manipulate_cinematic;
int broadcast_manipulate_cinematic_tableId(){return 56;};
__int8 show_confirm_type;
std::wstring show_confirm_type_EnumValue() const {return Get_show_confirm_type_EnumValue(show_confirm_type);};
__int8 manipulate_notification_range;
std::wstring manipulate_notification_range_EnumValue() const {return Get_manipulate_notification_range_EnumValue(manipulate_notification_range);};
char Pad2[2];
__int32 required_faction_score;
__int32 required_faction_score_max;
bool consume_faction_score;
char Pad3[3];
__int32 manipulate_duration;
Data::TableRef manipulated_effect;
int manipulated_effect_tableId(){return 111;};
Data::TableRef main_faction_effect;
int main_faction_effect_tableId(){return 111;};
__int16 main_faction_effect_distance;
char Pad4[2];
Data::TableRef cannot_manipulate_effect;
int cannot_manipulate_effect_tableId(){return 111;};
bool cannot_manipulate_in_combat;
bool cannot_manipulate_in_max_instant_heart_count;
bool required_joined_main_faction;
bool required_activated_main_faction;
Data::TableRef required_activated_faction;
int required_activated_faction_tableId(){return 130;};
__int32 respawn_duration;
bool rollback;
char Pad5[1];
__int16 max_hp;
Data::TableRef attack_skill[4];
int attack_skill_tableId(){return 335;};
Data::TableRef attack_skill3[4];
int attack_skill3_tableId(){return 324;};
bool dice_result_broadcast;
bool save_authorizer;
bool occurrence_event_in_respawn;
char Pad6[1];
Data::TableRef reward;
int reward_tableId(){return 313;};
Data::TableRef job_reward_blade_master;
int job_reward_blade_master_tableId(){return 313;};
Data::TableRef job_reward_kung_fu_fighter;
int job_reward_kung_fu_fighter_tableId(){return 313;};
Data::TableRef job_reward_force_master;
int job_reward_force_master_tableId(){return 313;};
Data::TableRef job_reward_shooter;
int job_reward_shooter_tableId(){return 313;};
Data::TableRef job_reward_destroyer;
int job_reward_destroyer_tableId(){return 313;};
Data::TableRef job_reward_summoner;
int job_reward_summoner_tableId(){return 313;};
Data::TableRef job_reward_assassin;
int job_reward_assassin_tableId(){return 313;};
Data::TableRef job_reward_sword_master;
int job_reward_sword_master_tableId(){return 313;};
Data::TableRef job_reward_warlock;
int job_reward_warlock_tableId(){return 313;};
Data::TableRef job_reward_soul_fighter;
int job_reward_soul_fighter_tableId(){return 313;};
Data::TableRef job_reward_warrior;
int job_reward_warrior_tableId(){return 313;};
Data::TableRef job_reward_archer;
int job_reward_archer_tableId(){return 313;};
Data::TableRef job_reward_spear_master;
int job_reward_spear_master_tableId(){return 313;};
Data::TableRef job_reward_thunderer;
int job_reward_thunderer_tableId(){return 313;};
Data::TableRef job_reward_dual_blader;
int job_reward_dual_blader_tableId(){return 313;};
Data::TableRef job_reward_bard;
int job_reward_bard_tableId(){return 313;};
bool broadcast_pickup_reward_to_world;
bool acquire_reward_to_inventory;
char Pad7[2];
__int32 reward_faction_score;
wchar_t* gain_faction_score_showname;
wchar_t* caster_animname;
wchar_t* caster_showname;
wchar_t* caster_picking_animname;
wchar_t* caster_manipulate_finish_showname;
wchar_t* env_animname;
wchar_t* env_sound_name;
Data::TableRef action_name2;
int action_name2_tableId(){return 405;};
Data::TableRef action_desc2;
int action_desc2_tableId(){return 405;};
bool hide_close;
bool hide_empty;
bool tooltip_option;
bool show_quest_indicator;
wchar_t* default_indicator_image;
__int8 forwarding_types[20];
std::wstring forwarding_types_EnumValue(int index) const {return Get_forwarding_types_EnumValue(forwarding_types[index]);};
Data::TableRef quests[20];
int quests_tableId(){return 283;};
__int8 missions[20];
__int8 cases[20];
__int16 case_subtypes[20];
__int8 loot_forwarding_types[8];
std::wstring loot_forwarding_types_EnumValue(int index) const {return Get_loot_forwarding_types_EnumValue(loot_forwarding_types[index]);};
Data::TableRef loot_quests[8];
int loot_quests_tableId(){return 283;};
__int8 loot_missions[8];
__int8 loot_cases[8];
Data::TableRef loot_item[8];
int loot_item_tableId(){return 189;};
bool lootable;
char Pad8[3];
Data::ExplicitTableRef attraction;
wchar_t* caster_reaction_attach;
wchar_t* spawn_mesh;
wchar_t* spawn_animset;
Data::TableRef image_text;
int image_text_tableId(){return 405;};
wchar_t* mapunit_image_enable_close_true_imageset;
wchar_t* mapunit_image_enable_close_true_over_imageset;
__int16 mapunit_image_enable_close_true_size_x;
__int16 mapunit_image_enable_close_true_size_y;
wchar_t* mapunit_image_enable_close_false_imageset;
wchar_t* mapunit_image_enable_close_false_over_imageset;
__int16 mapunit_image_enable_close_false_size_x;
__int16 mapunit_image_enable_close_false_size_y;
wchar_t* mapunit_image_enable_open_imageset;
wchar_t* mapunit_image_enable_open_over_imageset;
__int16 mapunit_image_enable_open_size_x;
__int16 mapunit_image_enable_open_size_y;
wchar_t* mapunit_image_disable_imageset;
wchar_t* mapunit_image_disable_over_imageset;
__int16 mapunit_image_disable_size_x;
__int16 mapunit_image_disable_size_y;
wchar_t* mapunit_image_unconfirmed_imageset;
wchar_t* mapunit_image_unconfirmed_over_imageset;
__int16 mapunit_image_unconfirmed_size_x;
__int16 mapunit_image_unconfirmed_size_y;

		static TableVersion Version() { return TableVersion(4, 5); }
		static __int16 TableId() { return 444; }
		static __int32 SubType() { return 0; }
	};
#pragma pack(pop)
#pragma pack(push, 1)
	struct __declspec(align(4)) zoneenv2_RecordPtr // : DrRecordPtr
	{
		zoneenv2_Record* _record;
		int _cacheChunkIndex;
		//__unaligned __declspec(align(1)) const Data::zoneenv2_Record* _debug;
		bool _makeCopy;
	};
#pragma pack(pop)
}