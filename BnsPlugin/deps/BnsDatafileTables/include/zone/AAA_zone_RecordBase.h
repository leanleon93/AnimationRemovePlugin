/*
 Generated Code! Do not manually edit this code. Modify the generator instead.
*/
#pragma once
#include "../DrEl.h"
#include "../AnyToStringConverter.h"

namespace Data {

#pragma pack(push, 1)
	struct zone_Record : DrEl
	{
	private:
		static std::wstring Get_zone_type2_EnumValue(__int8 value);
		static std::wstring Get_effect_link_type_EnumValue(__int8 value);
		static std::wstring Get_enable_ghost_mode_EnumValue(__int8 value);
	public:
		std::any GetField(const wchar_t* fieldName) const {
			if (wcscmp(fieldName, L"alias") == 0) return alias;
			if (wcscmp(fieldName, L"deprecated_zone") == 0) return deprecated_zone;
			if (wcscmp(fieldName, L"transfer_pcspawn_by_deprecated") == 0) return transfer_pcspawn_by_deprecated;
			if (wcscmp(fieldName, L"chat_channel") == 0) return chat_channel;
			if (wcscmp(fieldName, L"zone_type2") == 0) return zone_type2;
			if (wcscmp(fieldName, L"attraction") == 0) return attraction;
			if (wcscmp(fieldName, L"district") == 0) return district;
			if (wcscmp(fieldName, L"sector_xmin") == 0) return sector_xmin;
			if (wcscmp(fieldName, L"sector_xmax") == 0) return sector_xmax;
			if (wcscmp(fieldName, L"sector_ymin") == 0) return sector_ymin;
			if (wcscmp(fieldName, L"sector_ymax") == 0) return sector_ymax;
			if (wcscmp(fieldName, L"pc_max") == 0) return pc_max;
			if (wcscmp(fieldName, L"pc_max_by_main_faction") == 0) return pc_max_by_main_faction;
			if (wcscmp(fieldName, L"recommend_pc_count") == 0) return recommend_pc_count;
			if (wcscmp(fieldName, L"npc_max") == 0) return npc_max;
			if (wcscmp(fieldName, L"sight_cube") == 0) return sight_cube;
			if (wcscmp(fieldName, L"terrain") == 0) return terrain;
			if (wcscmp(fieldName, L"region") == 0) return region;
			if (wcscmp(fieldName, L"respawn") == 0) return respawn;
			if (wcscmp(fieldName, L"respawn_by_activated_faction_required_faction") == 0) return respawn_by_activated_faction_required_faction;
			if (wcscmp(fieldName, L"respawn_by_activated_faction_required_faction_1") == 0) return respawn_by_activated_faction_required_faction[0];
			if (wcscmp(fieldName, L"respawn_by_activated_faction_required_faction_2") == 0) return respawn_by_activated_faction_required_faction[1];
			if (wcscmp(fieldName, L"respawn_by_activated_faction") == 0) return respawn_by_activated_faction;
			if (wcscmp(fieldName, L"respawn_by_activated_faction_1") == 0) return respawn_by_activated_faction[0];
			if (wcscmp(fieldName, L"respawn_by_activated_faction_2") == 0) return respawn_by_activated_faction[1];
			if (wcscmp(fieldName, L"basecamp") == 0) return basecamp;
			if (wcscmp(fieldName, L"description2") == 0) return description2;
			if (wcscmp(fieldName, L"kismet_name") == 0) return kismet_name;
			if (wcscmp(fieldName, L"enter_kismet_name") == 0) return enter_kismet_name;
			if (wcscmp(fieldName, L"leave_kismet_name") == 0) return leave_kismet_name;
			if (wcscmp(fieldName, L"aiid") == 0) return aiid;
			if (wcscmp(fieldName, L"reentrance_pcspawn") == 0) return reentrance_pcspawn;
			if (wcscmp(fieldName, L"reentrance_pcspawn_in_arena") == 0) return reentrance_pcspawn_in_arena;
			if (wcscmp(fieldName, L"sealed_dungeon_reentrance_pcspawn_in_arena") == 0) return sealed_dungeon_reentrance_pcspawn_in_arena;
			if (wcscmp(fieldName, L"use_zone_exit") == 0) return use_zone_exit;
			if (wcscmp(fieldName, L"map") == 0) return map;
			if (wcscmp(fieldName, L"area") == 0) return area;
			if (wcscmp(fieldName, L"effect_link_type") == 0) return effect_link_type;
			if (wcscmp(fieldName, L"tutorial") == 0) return tutorial;
			if (wcscmp(fieldName, L"sharable_combatmode") == 0) return sharable_combatmode;
			if (wcscmp(fieldName, L"use_perfmon") == 0) return use_perfmon;
			if (wcscmp(fieldName, L"recharge_exp_boost") == 0) return recharge_exp_boost;
			if (wcscmp(fieldName, L"available_sextet_party") == 0) return available_sextet_party;
			if (wcscmp(fieldName, L"write_equipinfo_log") == 0) return write_equipinfo_log;
			if (wcscmp(fieldName, L"phase_quest_count") == 0) return phase_quest_count;
			if (wcscmp(fieldName, L"phase_quest") == 0) return phase_quest;
			if (wcscmp(fieldName, L"phase_quest_1") == 0) return phase_quest[0];
			if (wcscmp(fieldName, L"phase_quest_2") == 0) return phase_quest[1];
			if (wcscmp(fieldName, L"phase_quest_3") == 0) return phase_quest[2];
			if (wcscmp(fieldName, L"phase_quest_4") == 0) return phase_quest[3];
			if (wcscmp(fieldName, L"phase_quest_5") == 0) return phase_quest[4];
			if (wcscmp(fieldName, L"phase_quest_6") == 0) return phase_quest[5];
			if (wcscmp(fieldName, L"phase_quest_7") == 0) return phase_quest[6];
			if (wcscmp(fieldName, L"phase_quest_8") == 0) return phase_quest[7];
			if (wcscmp(fieldName, L"phase_quest_9") == 0) return phase_quest[8];
			if (wcscmp(fieldName, L"phase_quest_10") == 0) return phase_quest[9];
			if (wcscmp(fieldName, L"phase_quest_11") == 0) return phase_quest[10];
			if (wcscmp(fieldName, L"phase_quest_12") == 0) return phase_quest[11];
			if (wcscmp(fieldName, L"phase_quest_13") == 0) return phase_quest[12];
			if (wcscmp(fieldName, L"phase_quest_14") == 0) return phase_quest[13];
			if (wcscmp(fieldName, L"phase_quest_15") == 0) return phase_quest[14];
			if (wcscmp(fieldName, L"phase_quest_16") == 0) return phase_quest[15];
			if (wcscmp(fieldName, L"phase_quest_17") == 0) return phase_quest[16];
			if (wcscmp(fieldName, L"phase_quest_18") == 0) return phase_quest[17];
			if (wcscmp(fieldName, L"phase_quest_19") == 0) return phase_quest[18];
			if (wcscmp(fieldName, L"phase_quest_20") == 0) return phase_quest[19];
			if (wcscmp(fieldName, L"phase_quest_21") == 0) return phase_quest[20];
			if (wcscmp(fieldName, L"phase_quest_22") == 0) return phase_quest[21];
			if (wcscmp(fieldName, L"phase_quest_23") == 0) return phase_quest[22];
			if (wcscmp(fieldName, L"phase_quest_24") == 0) return phase_quest[23];
			if (wcscmp(fieldName, L"phase_quest_25") == 0) return phase_quest[24];
			if (wcscmp(fieldName, L"phase_quest_26") == 0) return phase_quest[25];
			if (wcscmp(fieldName, L"phase_quest_27") == 0) return phase_quest[26];
			if (wcscmp(fieldName, L"phase_quest_28") == 0) return phase_quest[27];
			if (wcscmp(fieldName, L"phase_quest_29") == 0) return phase_quest[28];
			if (wcscmp(fieldName, L"phase_quest_30") == 0) return phase_quest[29];
			if (wcscmp(fieldName, L"phase_quest_31") == 0) return phase_quest[30];
			if (wcscmp(fieldName, L"phase_quest_32") == 0) return phase_quest[31];
			if (wcscmp(fieldName, L"phase_quest_33") == 0) return phase_quest[32];
			if (wcscmp(fieldName, L"phase_quest_34") == 0) return phase_quest[33];
			if (wcscmp(fieldName, L"phase_quest_35") == 0) return phase_quest[34];
			if (wcscmp(fieldName, L"phase_quest_36") == 0) return phase_quest[35];
			if (wcscmp(fieldName, L"phase_quest_37") == 0) return phase_quest[36];
			if (wcscmp(fieldName, L"phase_quest_38") == 0) return phase_quest[37];
			if (wcscmp(fieldName, L"phase_quest_39") == 0) return phase_quest[38];
			if (wcscmp(fieldName, L"phase_quest_40") == 0) return phase_quest[39];
			if (wcscmp(fieldName, L"phase_id") == 0) return phase_id;
			if (wcscmp(fieldName, L"phase_id_1") == 0) return phase_id[0];
			if (wcscmp(fieldName, L"phase_id_2") == 0) return phase_id[1];
			if (wcscmp(fieldName, L"phase_id_3") == 0) return phase_id[2];
			if (wcscmp(fieldName, L"phase_id_4") == 0) return phase_id[3];
			if (wcscmp(fieldName, L"phase_id_5") == 0) return phase_id[4];
			if (wcscmp(fieldName, L"phase_id_6") == 0) return phase_id[5];
			if (wcscmp(fieldName, L"phase_id_7") == 0) return phase_id[6];
			if (wcscmp(fieldName, L"phase_id_8") == 0) return phase_id[7];
			if (wcscmp(fieldName, L"phase_id_9") == 0) return phase_id[8];
			if (wcscmp(fieldName, L"phase_id_10") == 0) return phase_id[9];
			if (wcscmp(fieldName, L"phase_id_11") == 0) return phase_id[10];
			if (wcscmp(fieldName, L"phase_id_12") == 0) return phase_id[11];
			if (wcscmp(fieldName, L"phase_id_13") == 0) return phase_id[12];
			if (wcscmp(fieldName, L"phase_id_14") == 0) return phase_id[13];
			if (wcscmp(fieldName, L"phase_id_15") == 0) return phase_id[14];
			if (wcscmp(fieldName, L"phase_id_16") == 0) return phase_id[15];
			if (wcscmp(fieldName, L"phase_id_17") == 0) return phase_id[16];
			if (wcscmp(fieldName, L"phase_id_18") == 0) return phase_id[17];
			if (wcscmp(fieldName, L"phase_id_19") == 0) return phase_id[18];
			if (wcscmp(fieldName, L"phase_id_20") == 0) return phase_id[19];
			if (wcscmp(fieldName, L"phase_id_21") == 0) return phase_id[20];
			if (wcscmp(fieldName, L"phase_id_22") == 0) return phase_id[21];
			if (wcscmp(fieldName, L"phase_id_23") == 0) return phase_id[22];
			if (wcscmp(fieldName, L"phase_id_24") == 0) return phase_id[23];
			if (wcscmp(fieldName, L"phase_id_25") == 0) return phase_id[24];
			if (wcscmp(fieldName, L"phase_id_26") == 0) return phase_id[25];
			if (wcscmp(fieldName, L"phase_id_27") == 0) return phase_id[26];
			if (wcscmp(fieldName, L"phase_id_28") == 0) return phase_id[27];
			if (wcscmp(fieldName, L"phase_id_29") == 0) return phase_id[28];
			if (wcscmp(fieldName, L"phase_id_30") == 0) return phase_id[29];
			if (wcscmp(fieldName, L"phase_id_31") == 0) return phase_id[30];
			if (wcscmp(fieldName, L"phase_id_32") == 0) return phase_id[31];
			if (wcscmp(fieldName, L"phase_id_33") == 0) return phase_id[32];
			if (wcscmp(fieldName, L"phase_id_34") == 0) return phase_id[33];
			if (wcscmp(fieldName, L"phase_id_35") == 0) return phase_id[34];
			if (wcscmp(fieldName, L"phase_id_36") == 0) return phase_id[35];
			if (wcscmp(fieldName, L"phase_id_37") == 0) return phase_id[36];
			if (wcscmp(fieldName, L"phase_id_38") == 0) return phase_id[37];
			if (wcscmp(fieldName, L"phase_id_39") == 0) return phase_id[38];
			if (wcscmp(fieldName, L"phase_id_40") == 0) return phase_id[39];
			if (wcscmp(fieldName, L"phase_zone") == 0) return phase_zone;
			if (wcscmp(fieldName, L"phase_zone_1") == 0) return phase_zone[0];
			if (wcscmp(fieldName, L"phase_zone_2") == 0) return phase_zone[1];
			if (wcscmp(fieldName, L"phase_zone_3") == 0) return phase_zone[2];
			if (wcscmp(fieldName, L"phase_zone_4") == 0) return phase_zone[3];
			if (wcscmp(fieldName, L"phase_zone_5") == 0) return phase_zone[4];
			if (wcscmp(fieldName, L"phase_zone_6") == 0) return phase_zone[5];
			if (wcscmp(fieldName, L"phase_zone_7") == 0) return phase_zone[6];
			if (wcscmp(fieldName, L"phase_zone_8") == 0) return phase_zone[7];
			if (wcscmp(fieldName, L"phase_zone_9") == 0) return phase_zone[8];
			if (wcscmp(fieldName, L"phase_zone_10") == 0) return phase_zone[9];
			if (wcscmp(fieldName, L"phase_zone_11") == 0) return phase_zone[10];
			if (wcscmp(fieldName, L"phase_zone_12") == 0) return phase_zone[11];
			if (wcscmp(fieldName, L"phase_zone_13") == 0) return phase_zone[12];
			if (wcscmp(fieldName, L"phase_zone_14") == 0) return phase_zone[13];
			if (wcscmp(fieldName, L"phase_zone_15") == 0) return phase_zone[14];
			if (wcscmp(fieldName, L"phase_zone_16") == 0) return phase_zone[15];
			if (wcscmp(fieldName, L"phase_zone_17") == 0) return phase_zone[16];
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena") == 0) return phase_zone_disable_in_arena;
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_1") == 0) return phase_zone_disable_in_arena[0];
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_2") == 0) return phase_zone_disable_in_arena[1];
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_3") == 0) return phase_zone_disable_in_arena[2];
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_4") == 0) return phase_zone_disable_in_arena[3];
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_5") == 0) return phase_zone_disable_in_arena[4];
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_6") == 0) return phase_zone_disable_in_arena[5];
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_7") == 0) return phase_zone_disable_in_arena[6];
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_8") == 0) return phase_zone_disable_in_arena[7];
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_9") == 0) return phase_zone_disable_in_arena[8];
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_10") == 0) return phase_zone_disable_in_arena[9];
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_11") == 0) return phase_zone_disable_in_arena[10];
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_12") == 0) return phase_zone_disable_in_arena[11];
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_13") == 0) return phase_zone_disable_in_arena[12];
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_14") == 0) return phase_zone_disable_in_arena[13];
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_15") == 0) return phase_zone_disable_in_arena[14];
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_16") == 0) return phase_zone_disable_in_arena[15];
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_17") == 0) return phase_zone_disable_in_arena[16];
			if (wcscmp(fieldName, L"default_phase_zone") == 0) return default_phase_zone;
			if (wcscmp(fieldName, L"phase_main_zone") == 0) return phase_main_zone;
			if (wcscmp(fieldName, L"default_phase_pc_spawn_id") == 0) return default_phase_pc_spawn_id;
			if (wcscmp(fieldName, L"dungeon_step") == 0) return dungeon_step;
			if (wcscmp(fieldName, L"is_arena_entrance") == 0) return is_arena_entrance;
			if (wcscmp(fieldName, L"enable_ghost_mode") == 0) return enable_ghost_mode;
			if (wcscmp(fieldName, L"available_infield_contents") == 0) return available_infield_contents;

			return std::any();
		}
		std::wstring GetFieldAsString(const wchar_t* fieldName) {
			if (wcscmp(fieldName, L"alias") == 0) return Data::AnyFieldToStringConverter::ToString(&alias);
			if (wcscmp(fieldName, L"deprecated_zone") == 0) return Data::AnyFieldToStringConverter::ToString(&deprecated_zone);
			if (wcscmp(fieldName, L"transfer_pcspawn_by_deprecated") == 0) return Data::AnyFieldToStringConverter::ToString(&transfer_pcspawn_by_deprecated);
			if (wcscmp(fieldName, L"chat_channel") == 0) return Data::AnyFieldToStringConverter::ToString(&chat_channel);
			if (wcscmp(fieldName, L"zone_type2") == 0) return Data::AnyFieldToStringConverter::ToString(&zone_type2);
			if (wcscmp(fieldName, L"attraction") == 0) return Data::AnyFieldToStringConverter::ToString(&attraction);
			if (wcscmp(fieldName, L"district") == 0) return Data::AnyFieldToStringConverter::ToString(&district);
			if (wcscmp(fieldName, L"sector_xmin") == 0) return Data::AnyFieldToStringConverter::ToString(&sector_xmin);
			if (wcscmp(fieldName, L"sector_xmax") == 0) return Data::AnyFieldToStringConverter::ToString(&sector_xmax);
			if (wcscmp(fieldName, L"sector_ymin") == 0) return Data::AnyFieldToStringConverter::ToString(&sector_ymin);
			if (wcscmp(fieldName, L"sector_ymax") == 0) return Data::AnyFieldToStringConverter::ToString(&sector_ymax);
			if (wcscmp(fieldName, L"pc_max") == 0) return Data::AnyFieldToStringConverter::ToString(&pc_max);
			if (wcscmp(fieldName, L"pc_max_by_main_faction") == 0) return Data::AnyFieldToStringConverter::ToString(&pc_max_by_main_faction);
			if (wcscmp(fieldName, L"recommend_pc_count") == 0) return Data::AnyFieldToStringConverter::ToString(&recommend_pc_count);
			if (wcscmp(fieldName, L"npc_max") == 0) return Data::AnyFieldToStringConverter::ToString(&npc_max);
			if (wcscmp(fieldName, L"sight_cube") == 0) return Data::AnyFieldToStringConverter::ToString(&sight_cube);
			if (wcscmp(fieldName, L"terrain") == 0) return Data::AnyFieldToStringConverter::ToString(&terrain);
			if (wcscmp(fieldName, L"region") == 0) return Data::AnyFieldToStringConverter::ToString(&region);
			if (wcscmp(fieldName, L"respawn") == 0) return Data::AnyFieldToStringConverter::ToString(&respawn);
			if (wcscmp(fieldName, L"respawn_by_activated_faction_required_faction_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(respawn_by_activated_faction_required_faction[0]));
			if (wcscmp(fieldName, L"respawn_by_activated_faction_required_faction_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(respawn_by_activated_faction_required_faction[1]));
			if (wcscmp(fieldName, L"respawn_by_activated_faction_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(respawn_by_activated_faction[0]));
			if (wcscmp(fieldName, L"respawn_by_activated_faction_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(respawn_by_activated_faction[1]));
			if (wcscmp(fieldName, L"basecamp") == 0) return Data::AnyFieldToStringConverter::ToString(&basecamp);
			if (wcscmp(fieldName, L"description2") == 0) return Data::AnyFieldToStringConverter::ToString(&description2);
			if (wcscmp(fieldName, L"kismet_name") == 0) return Data::AnyFieldToStringConverter::ToString(&kismet_name);
			if (wcscmp(fieldName, L"enter_kismet_name") == 0) return Data::AnyFieldToStringConverter::ToString(&enter_kismet_name);
			if (wcscmp(fieldName, L"leave_kismet_name") == 0) return Data::AnyFieldToStringConverter::ToString(&leave_kismet_name);
			if (wcscmp(fieldName, L"aiid") == 0) return Data::AnyFieldToStringConverter::ToString(&aiid);
			if (wcscmp(fieldName, L"reentrance_pcspawn") == 0) return Data::AnyFieldToStringConverter::ToString(&reentrance_pcspawn);
			if (wcscmp(fieldName, L"reentrance_pcspawn_in_arena") == 0) return Data::AnyFieldToStringConverter::ToString(&reentrance_pcspawn_in_arena);
			if (wcscmp(fieldName, L"sealed_dungeon_reentrance_pcspawn_in_arena") == 0) return Data::AnyFieldToStringConverter::ToString(&sealed_dungeon_reentrance_pcspawn_in_arena);
			if (wcscmp(fieldName, L"use_zone_exit") == 0) return Data::AnyFieldToStringConverter::ToString(&use_zone_exit);
			if (wcscmp(fieldName, L"map") == 0) return Data::AnyFieldToStringConverter::ToString(&map);
			if (wcscmp(fieldName, L"area") == 0) return Data::AnyFieldToStringConverter::ToString(&area);
			if (wcscmp(fieldName, L"effect_link_type") == 0) return Data::AnyFieldToStringConverter::ToString(&effect_link_type);
			if (wcscmp(fieldName, L"tutorial") == 0) return Data::AnyFieldToStringConverter::ToString(&tutorial);
			if (wcscmp(fieldName, L"sharable_combatmode") == 0) return Data::AnyFieldToStringConverter::ToString(&sharable_combatmode);
			if (wcscmp(fieldName, L"use_perfmon") == 0) return Data::AnyFieldToStringConverter::ToString(&use_perfmon);
			if (wcscmp(fieldName, L"recharge_exp_boost") == 0) return Data::AnyFieldToStringConverter::ToString(&recharge_exp_boost);
			if (wcscmp(fieldName, L"available_sextet_party") == 0) return Data::AnyFieldToStringConverter::ToString(&available_sextet_party);
			if (wcscmp(fieldName, L"write_equipinfo_log") == 0) return Data::AnyFieldToStringConverter::ToString(&write_equipinfo_log);
			if (wcscmp(fieldName, L"phase_quest_count") == 0) return Data::AnyFieldToStringConverter::ToString(&phase_quest_count);
			if (wcscmp(fieldName, L"phase_quest_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[0]));
			if (wcscmp(fieldName, L"phase_quest_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[1]));
			if (wcscmp(fieldName, L"phase_quest_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[2]));
			if (wcscmp(fieldName, L"phase_quest_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[3]));
			if (wcscmp(fieldName, L"phase_quest_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[4]));
			if (wcscmp(fieldName, L"phase_quest_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[5]));
			if (wcscmp(fieldName, L"phase_quest_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[6]));
			if (wcscmp(fieldName, L"phase_quest_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[7]));
			if (wcscmp(fieldName, L"phase_quest_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[8]));
			if (wcscmp(fieldName, L"phase_quest_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[9]));
			if (wcscmp(fieldName, L"phase_quest_11") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[10]));
			if (wcscmp(fieldName, L"phase_quest_12") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[11]));
			if (wcscmp(fieldName, L"phase_quest_13") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[12]));
			if (wcscmp(fieldName, L"phase_quest_14") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[13]));
			if (wcscmp(fieldName, L"phase_quest_15") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[14]));
			if (wcscmp(fieldName, L"phase_quest_16") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[15]));
			if (wcscmp(fieldName, L"phase_quest_17") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[16]));
			if (wcscmp(fieldName, L"phase_quest_18") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[17]));
			if (wcscmp(fieldName, L"phase_quest_19") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[18]));
			if (wcscmp(fieldName, L"phase_quest_20") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[19]));
			if (wcscmp(fieldName, L"phase_quest_21") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[20]));
			if (wcscmp(fieldName, L"phase_quest_22") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[21]));
			if (wcscmp(fieldName, L"phase_quest_23") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[22]));
			if (wcscmp(fieldName, L"phase_quest_24") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[23]));
			if (wcscmp(fieldName, L"phase_quest_25") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[24]));
			if (wcscmp(fieldName, L"phase_quest_26") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[25]));
			if (wcscmp(fieldName, L"phase_quest_27") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[26]));
			if (wcscmp(fieldName, L"phase_quest_28") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[27]));
			if (wcscmp(fieldName, L"phase_quest_29") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[28]));
			if (wcscmp(fieldName, L"phase_quest_30") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[29]));
			if (wcscmp(fieldName, L"phase_quest_31") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[30]));
			if (wcscmp(fieldName, L"phase_quest_32") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[31]));
			if (wcscmp(fieldName, L"phase_quest_33") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[32]));
			if (wcscmp(fieldName, L"phase_quest_34") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[33]));
			if (wcscmp(fieldName, L"phase_quest_35") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[34]));
			if (wcscmp(fieldName, L"phase_quest_36") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[35]));
			if (wcscmp(fieldName, L"phase_quest_37") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[36]));
			if (wcscmp(fieldName, L"phase_quest_38") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[37]));
			if (wcscmp(fieldName, L"phase_quest_39") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[38]));
			if (wcscmp(fieldName, L"phase_quest_40") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_quest[39]));
			if (wcscmp(fieldName, L"phase_id_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[0]));
			if (wcscmp(fieldName, L"phase_id_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[1]));
			if (wcscmp(fieldName, L"phase_id_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[2]));
			if (wcscmp(fieldName, L"phase_id_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[3]));
			if (wcscmp(fieldName, L"phase_id_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[4]));
			if (wcscmp(fieldName, L"phase_id_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[5]));
			if (wcscmp(fieldName, L"phase_id_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[6]));
			if (wcscmp(fieldName, L"phase_id_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[7]));
			if (wcscmp(fieldName, L"phase_id_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[8]));
			if (wcscmp(fieldName, L"phase_id_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[9]));
			if (wcscmp(fieldName, L"phase_id_11") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[10]));
			if (wcscmp(fieldName, L"phase_id_12") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[11]));
			if (wcscmp(fieldName, L"phase_id_13") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[12]));
			if (wcscmp(fieldName, L"phase_id_14") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[13]));
			if (wcscmp(fieldName, L"phase_id_15") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[14]));
			if (wcscmp(fieldName, L"phase_id_16") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[15]));
			if (wcscmp(fieldName, L"phase_id_17") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[16]));
			if (wcscmp(fieldName, L"phase_id_18") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[17]));
			if (wcscmp(fieldName, L"phase_id_19") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[18]));
			if (wcscmp(fieldName, L"phase_id_20") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[19]));
			if (wcscmp(fieldName, L"phase_id_21") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[20]));
			if (wcscmp(fieldName, L"phase_id_22") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[21]));
			if (wcscmp(fieldName, L"phase_id_23") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[22]));
			if (wcscmp(fieldName, L"phase_id_24") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[23]));
			if (wcscmp(fieldName, L"phase_id_25") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[24]));
			if (wcscmp(fieldName, L"phase_id_26") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[25]));
			if (wcscmp(fieldName, L"phase_id_27") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[26]));
			if (wcscmp(fieldName, L"phase_id_28") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[27]));
			if (wcscmp(fieldName, L"phase_id_29") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[28]));
			if (wcscmp(fieldName, L"phase_id_30") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[29]));
			if (wcscmp(fieldName, L"phase_id_31") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[30]));
			if (wcscmp(fieldName, L"phase_id_32") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[31]));
			if (wcscmp(fieldName, L"phase_id_33") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[32]));
			if (wcscmp(fieldName, L"phase_id_34") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[33]));
			if (wcscmp(fieldName, L"phase_id_35") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[34]));
			if (wcscmp(fieldName, L"phase_id_36") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[35]));
			if (wcscmp(fieldName, L"phase_id_37") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[36]));
			if (wcscmp(fieldName, L"phase_id_38") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[37]));
			if (wcscmp(fieldName, L"phase_id_39") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[38]));
			if (wcscmp(fieldName, L"phase_id_40") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_id[39]));
			if (wcscmp(fieldName, L"phase_zone_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone[0]));
			if (wcscmp(fieldName, L"phase_zone_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone[1]));
			if (wcscmp(fieldName, L"phase_zone_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone[2]));
			if (wcscmp(fieldName, L"phase_zone_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone[3]));
			if (wcscmp(fieldName, L"phase_zone_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone[4]));
			if (wcscmp(fieldName, L"phase_zone_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone[5]));
			if (wcscmp(fieldName, L"phase_zone_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone[6]));
			if (wcscmp(fieldName, L"phase_zone_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone[7]));
			if (wcscmp(fieldName, L"phase_zone_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone[8]));
			if (wcscmp(fieldName, L"phase_zone_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone[9]));
			if (wcscmp(fieldName, L"phase_zone_11") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone[10]));
			if (wcscmp(fieldName, L"phase_zone_12") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone[11]));
			if (wcscmp(fieldName, L"phase_zone_13") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone[12]));
			if (wcscmp(fieldName, L"phase_zone_14") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone[13]));
			if (wcscmp(fieldName, L"phase_zone_15") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone[14]));
			if (wcscmp(fieldName, L"phase_zone_16") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone[15]));
			if (wcscmp(fieldName, L"phase_zone_17") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone[16]));
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone_disable_in_arena[0]));
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone_disable_in_arena[1]));
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone_disable_in_arena[2]));
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone_disable_in_arena[3]));
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone_disable_in_arena[4]));
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone_disable_in_arena[5]));
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone_disable_in_arena[6]));
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone_disable_in_arena[7]));
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone_disable_in_arena[8]));
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone_disable_in_arena[9]));
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_11") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone_disable_in_arena[10]));
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_12") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone_disable_in_arena[11]));
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_13") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone_disable_in_arena[12]));
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_14") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone_disable_in_arena[13]));
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_15") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone_disable_in_arena[14]));
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_16") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone_disable_in_arena[15]));
			if (wcscmp(fieldName, L"phase_zone_disable_in_arena_17") == 0) return Data::AnyFieldToStringConverter::ToString(&(phase_zone_disable_in_arena[16]));
			if (wcscmp(fieldName, L"default_phase_zone") == 0) return Data::AnyFieldToStringConverter::ToString(&default_phase_zone);
			if (wcscmp(fieldName, L"phase_main_zone") == 0) return Data::AnyFieldToStringConverter::ToString(&phase_main_zone);
			if (wcscmp(fieldName, L"default_phase_pc_spawn_id") == 0) return Data::AnyFieldToStringConverter::ToString(&default_phase_pc_spawn_id);
			if (wcscmp(fieldName, L"dungeon_step") == 0) return Data::AnyFieldToStringConverter::ToString(&dungeon_step);
			if (wcscmp(fieldName, L"is_arena_entrance") == 0) return Data::AnyFieldToStringConverter::ToString(&is_arena_entrance);
			if (wcscmp(fieldName, L"enable_ghost_mode") == 0) return Data::AnyFieldToStringConverter::ToString(&enable_ghost_mode);
			if (wcscmp(fieldName, L"available_infield_contents") == 0) return Data::AnyFieldToStringConverter::ToString(&available_infield_contents);

			return L"";
		}
		void AutoCorrectLookupOffsets(const char* lookupDataPtr) {
			if (reinterpret_cast<std::uintptr_t>(alias) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) alias = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(alias));
			else return;
			if (reinterpret_cast<std::uintptr_t>(kismet_name) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) kismet_name = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(kismet_name));
			if (reinterpret_cast<std::uintptr_t>(enter_kismet_name) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) enter_kismet_name = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(enter_kismet_name));
			if (reinterpret_cast<std::uintptr_t>(leave_kismet_name) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) leave_kismet_name = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(leave_kismet_name));
			if (reinterpret_cast<std::uintptr_t>(aiid) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) aiid = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(aiid));
		}
		union Key
		{
            struct {
                __int32 id;

            };
			unsigned __int64 key;
		};
		__declspec(align(8)) Key key;
		wchar_t* alias;
bool deprecated_zone;
char Pad0[3];
Data::TableRef transfer_pcspawn_by_deprecated;
int transfer_pcspawn_by_deprecated_tableId(){return 452;};
Data::TableRef chat_channel;
int chat_channel_tableId(){return 382;};
__int8 zone_type2;
std::wstring zone_type2_EnumValue() const {return Get_zone_type2_EnumValue(zone_type2);};
char Pad1[3];
Data::ExplicitTableRef attraction;
Data::TableRef district;
int district_tableId(){return 100;};
__int16 sector_xmin;
__int16 sector_xmax;
__int16 sector_ymin;
__int16 sector_ymax;
__int16 pc_max;
__int16 pc_max_by_main_faction;
__int16 recommend_pc_count;
__int16 npc_max;
bool sight_cube;
char Pad2[1];
__int16 terrain;
__int16 region;
char Pad3[2];
Data::TableRef respawn;
int respawn_tableId(){return 453;};
Data::TableRef respawn_by_activated_faction_required_faction[2];
int respawn_by_activated_faction_required_faction_tableId(){return 130;};
Data::TableRef respawn_by_activated_faction[2];
int respawn_by_activated_faction_tableId(){return 453;};
Data::TableRef basecamp;
int basecamp_tableId(){return 439;};
Data::TableRef description2;
int description2_tableId(){return 405;};
wchar_t* kismet_name;
wchar_t* enter_kismet_name;
wchar_t* leave_kismet_name;
wchar_t* aiid;
Data::TableRef reentrance_pcspawn;
int reentrance_pcspawn_tableId(){return 452;};
Data::TableRef reentrance_pcspawn_in_arena;
int reentrance_pcspawn_in_arena_tableId(){return 452;};
Data::TableRef sealed_dungeon_reentrance_pcspawn_in_arena;
int sealed_dungeon_reentrance_pcspawn_in_arena_tableId(){return 452;};
bool use_zone_exit;
char Pad4[3];
Data::TableRef map;
int map_tableId(){return 240;};
Data::TableRef area;
int area_tableId(){return 236;};
__int8 effect_link_type;
std::wstring effect_link_type_EnumValue() const {return Get_effect_link_type_EnumValue(effect_link_type);};
bool tutorial;
bool sharable_combatmode;
bool use_perfmon;
bool recharge_exp_boost;
bool available_sextet_party;
bool write_equipinfo_log;
__int8 phase_quest_count;
Data::TableRef phase_quest[40];
int phase_quest_tableId(){return 283;};
__int8 phase_id[40];
Data::TableRef phase_zone[17];
int phase_zone_tableId(){return 443;};
bool phase_zone_disable_in_arena[17];
bool default_phase_zone;
char Pad5[2];
Data::TableRef phase_main_zone;
int phase_main_zone_tableId(){return 443;};
__int16 default_phase_pc_spawn_id;
__int8 dungeon_step;
bool is_arena_entrance;
__int8 enable_ghost_mode;
std::wstring enable_ghost_mode_EnumValue() const {return Get_enable_ghost_mode_EnumValue(enable_ghost_mode);};
bool available_infield_contents;

		static TableVersion Version() { return TableVersion(7, 1); }
		static __int16 TableId() { return 443; }
		static __int32 SubType() { return 0; }
	};
#pragma pack(pop)
#pragma pack(push, 1)
	struct __declspec(align(4)) zone_RecordPtr // : DrRecordPtr
	{
		zone_Record* _record;
		int _cacheChunkIndex;
		//__unaligned __declspec(align(1)) const Data::zone_Record* _debug;
		bool _makeCopy;
	};
#pragma pack(pop)
}