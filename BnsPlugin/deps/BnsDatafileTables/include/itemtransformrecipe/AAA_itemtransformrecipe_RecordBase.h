/*
 Generated Code! Do not manually edit this code. Modify the generator instead.
*/
#pragma once
#include "../DrEl.h"
#include "../AnyToStringConverter.h"

namespace Data {

#pragma pack(push, 1)
	struct itemtransformrecipe_Record : DrEl
	{
	private:
		static std::wstring Get_main_ingredient_condition_type_EnumValue(__int8 value);
		static std::wstring Get_sub_ingredient_condition_type_EnumValue(__int8 value);
		static std::wstring Get_main_ingredient_weapon_gem_type_EnumValue(__int8 value);
		static std::wstring Get_sub_ingredient_weapon_gem_type_EnumValue(__int8 value);
		static std::wstring Get_upper_category_EnumValue(__int8 value);
		static std::wstring Get_category_EnumValue(__int8 value);
		static std::wstring Get_warning_EnumValue(__int8 value);
		static std::wstring Get_recipe_series_EnumValue(__int8 value);
	public:
		std::any GetField(const wchar_t* fieldName) const {
			if (wcscmp(fieldName, L"alias") == 0) return alias;
			if (wcscmp(fieldName, L"upgrade_grocery") == 0) return upgrade_grocery;
			if (wcscmp(fieldName, L"required_inven_capacity") == 0) return required_inven_capacity;
			if (wcscmp(fieldName, L"money_cost") == 0) return money_cost;
			if (wcscmp(fieldName, L"main_ingredient") == 0) return main_ingredient;
			if (wcscmp(fieldName, L"main_ingredient_condition_type") == 0) return main_ingredient_condition_type;
			if (wcscmp(fieldName, L"main_ingredient_min_level") == 0) return main_ingredient_min_level;
			if (wcscmp(fieldName, L"main_ingredient_stack_count") == 0) return main_ingredient_stack_count;
			if (wcscmp(fieldName, L"main_ingredient_title_name") == 0) return main_ingredient_title_name;
			if (wcscmp(fieldName, L"main_ingredient_title_item") == 0) return main_ingredient_title_item;
			if (wcscmp(fieldName, L"keep_main_ingredient_weapon_gem_slot") == 0) return keep_main_ingredient_weapon_gem_slot;
			if (wcscmp(fieldName, L"keep_main_ingredient_weapon_appearance") == 0) return keep_main_ingredient_weapon_appearance;
			if (wcscmp(fieldName, L"keep_main_ingredient_spirit") == 0) return keep_main_ingredient_spirit;
			if (wcscmp(fieldName, L"consume_main_ingredient") == 0) return consume_main_ingredient;
			if (wcscmp(fieldName, L"sub_ingredient") == 0) return sub_ingredient;
			if (wcscmp(fieldName, L"sub_ingredient_1") == 0) return sub_ingredient[0];
			if (wcscmp(fieldName, L"sub_ingredient_2") == 0) return sub_ingredient[1];
			if (wcscmp(fieldName, L"sub_ingredient_3") == 0) return sub_ingredient[2];
			if (wcscmp(fieldName, L"sub_ingredient_4") == 0) return sub_ingredient[3];
			if (wcscmp(fieldName, L"sub_ingredient_5") == 0) return sub_ingredient[4];
			if (wcscmp(fieldName, L"sub_ingredient_6") == 0) return sub_ingredient[5];
			if (wcscmp(fieldName, L"sub_ingredient_7") == 0) return sub_ingredient[6];
			if (wcscmp(fieldName, L"sub_ingredient_condition_type") == 0) return sub_ingredient_condition_type;
			if (wcscmp(fieldName, L"sub_ingredient_condition_type_1") == 0) return sub_ingredient_condition_type[0];
			if (wcscmp(fieldName, L"sub_ingredient_condition_type_2") == 0) return sub_ingredient_condition_type[1];
			if (wcscmp(fieldName, L"sub_ingredient_condition_type_3") == 0) return sub_ingredient_condition_type[2];
			if (wcscmp(fieldName, L"sub_ingredient_condition_type_4") == 0) return sub_ingredient_condition_type[3];
			if (wcscmp(fieldName, L"sub_ingredient_condition_type_5") == 0) return sub_ingredient_condition_type[4];
			if (wcscmp(fieldName, L"sub_ingredient_condition_type_6") == 0) return sub_ingredient_condition_type[5];
			if (wcscmp(fieldName, L"sub_ingredient_condition_type_7") == 0) return sub_ingredient_condition_type[6];
			if (wcscmp(fieldName, L"sub_ingredient_min_level") == 0) return sub_ingredient_min_level;
			if (wcscmp(fieldName, L"sub_ingredient_min_level_1") == 0) return sub_ingredient_min_level[0];
			if (wcscmp(fieldName, L"sub_ingredient_min_level_2") == 0) return sub_ingredient_min_level[1];
			if (wcscmp(fieldName, L"sub_ingredient_min_level_3") == 0) return sub_ingredient_min_level[2];
			if (wcscmp(fieldName, L"sub_ingredient_min_level_4") == 0) return sub_ingredient_min_level[3];
			if (wcscmp(fieldName, L"sub_ingredient_min_level_5") == 0) return sub_ingredient_min_level[4];
			if (wcscmp(fieldName, L"sub_ingredient_min_level_6") == 0) return sub_ingredient_min_level[5];
			if (wcscmp(fieldName, L"sub_ingredient_min_level_7") == 0) return sub_ingredient_min_level[6];
			if (wcscmp(fieldName, L"sub_ingredient_stack_count") == 0) return sub_ingredient_stack_count;
			if (wcscmp(fieldName, L"sub_ingredient_stack_count_1") == 0) return sub_ingredient_stack_count[0];
			if (wcscmp(fieldName, L"sub_ingredient_stack_count_2") == 0) return sub_ingredient_stack_count[1];
			if (wcscmp(fieldName, L"sub_ingredient_stack_count_3") == 0) return sub_ingredient_stack_count[2];
			if (wcscmp(fieldName, L"sub_ingredient_stack_count_4") == 0) return sub_ingredient_stack_count[3];
			if (wcscmp(fieldName, L"sub_ingredient_stack_count_5") == 0) return sub_ingredient_stack_count[4];
			if (wcscmp(fieldName, L"sub_ingredient_stack_count_6") == 0) return sub_ingredient_stack_count[5];
			if (wcscmp(fieldName, L"sub_ingredient_stack_count_7") == 0) return sub_ingredient_stack_count[6];
			if (wcscmp(fieldName, L"sub_ingredient_title_name") == 0) return sub_ingredient_title_name;
			if (wcscmp(fieldName, L"sub_ingredient_title_name_1") == 0) return sub_ingredient_title_name[0];
			if (wcscmp(fieldName, L"sub_ingredient_title_name_2") == 0) return sub_ingredient_title_name[1];
			if (wcscmp(fieldName, L"sub_ingredient_title_name_3") == 0) return sub_ingredient_title_name[2];
			if (wcscmp(fieldName, L"sub_ingredient_title_name_4") == 0) return sub_ingredient_title_name[3];
			if (wcscmp(fieldName, L"sub_ingredient_title_name_5") == 0) return sub_ingredient_title_name[4];
			if (wcscmp(fieldName, L"sub_ingredient_title_name_6") == 0) return sub_ingredient_title_name[5];
			if (wcscmp(fieldName, L"sub_ingredient_title_name_7") == 0) return sub_ingredient_title_name[6];
			if (wcscmp(fieldName, L"sub_ingredient_title_item") == 0) return sub_ingredient_title_item;
			if (wcscmp(fieldName, L"sub_ingredient_title_item_1") == 0) return sub_ingredient_title_item[0];
			if (wcscmp(fieldName, L"sub_ingredient_title_item_2") == 0) return sub_ingredient_title_item[1];
			if (wcscmp(fieldName, L"sub_ingredient_title_item_3") == 0) return sub_ingredient_title_item[2];
			if (wcscmp(fieldName, L"sub_ingredient_title_item_4") == 0) return sub_ingredient_title_item[3];
			if (wcscmp(fieldName, L"sub_ingredient_title_item_5") == 0) return sub_ingredient_title_item[4];
			if (wcscmp(fieldName, L"sub_ingredient_title_item_6") == 0) return sub_ingredient_title_item[5];
			if (wcscmp(fieldName, L"sub_ingredient_title_item_7") == 0) return sub_ingredient_title_item[6];
			if (wcscmp(fieldName, L"consume_sub_ingredient") == 0) return consume_sub_ingredient;
			if (wcscmp(fieldName, L"fixed_ingredient") == 0) return fixed_ingredient;
			if (wcscmp(fieldName, L"fixed_ingredient_1") == 0) return fixed_ingredient[0];
			if (wcscmp(fieldName, L"fixed_ingredient_2") == 0) return fixed_ingredient[1];
			if (wcscmp(fieldName, L"fixed_ingredient_3") == 0) return fixed_ingredient[2];
			if (wcscmp(fieldName, L"fixed_ingredient_4") == 0) return fixed_ingredient[3];
			if (wcscmp(fieldName, L"fixed_ingredient_5") == 0) return fixed_ingredient[4];
			if (wcscmp(fieldName, L"fixed_ingredient_6") == 0) return fixed_ingredient[5];
			if (wcscmp(fieldName, L"fixed_ingredient_7") == 0) return fixed_ingredient[6];
			if (wcscmp(fieldName, L"fixed_ingredient_8") == 0) return fixed_ingredient[7];
			if (wcscmp(fieldName, L"fixed_ingredient_stack_count") == 0) return fixed_ingredient_stack_count;
			if (wcscmp(fieldName, L"fixed_ingredient_stack_count_1") == 0) return fixed_ingredient_stack_count[0];
			if (wcscmp(fieldName, L"fixed_ingredient_stack_count_2") == 0) return fixed_ingredient_stack_count[1];
			if (wcscmp(fieldName, L"fixed_ingredient_stack_count_3") == 0) return fixed_ingredient_stack_count[2];
			if (wcscmp(fieldName, L"fixed_ingredient_stack_count_4") == 0) return fixed_ingredient_stack_count[3];
			if (wcscmp(fieldName, L"fixed_ingredient_stack_count_5") == 0) return fixed_ingredient_stack_count[4];
			if (wcscmp(fieldName, L"fixed_ingredient_stack_count_6") == 0) return fixed_ingredient_stack_count[5];
			if (wcscmp(fieldName, L"fixed_ingredient_stack_count_7") == 0) return fixed_ingredient_stack_count[6];
			if (wcscmp(fieldName, L"fixed_ingredient_stack_count_8") == 0) return fixed_ingredient_stack_count[7];
			if (wcscmp(fieldName, L"consume_fixed_ingredient") == 0) return consume_fixed_ingredient;
			if (wcscmp(fieldName, L"special_fixed_index") == 0) return special_fixed_index;
			if (wcscmp(fieldName, L"enable_batch_transform") == 0) return enable_batch_transform;
			if (wcscmp(fieldName, L"is_fixed_result_recipe") == 0) return is_fixed_result_recipe;
			if (wcscmp(fieldName, L"rare_item_success_probability") == 0) return rare_item_success_probability;
			if (wcscmp(fieldName, L"rare_item") == 0) return rare_item;
			if (wcscmp(fieldName, L"rare_item_1") == 0) return rare_item[0];
			if (wcscmp(fieldName, L"rare_item_2") == 0) return rare_item[1];
			if (wcscmp(fieldName, L"rare_item_3") == 0) return rare_item[2];
			if (wcscmp(fieldName, L"rare_item_4") == 0) return rare_item[3];
			if (wcscmp(fieldName, L"rare_item_5") == 0) return rare_item[4];
			if (wcscmp(fieldName, L"rare_item_6") == 0) return rare_item[5];
			if (wcscmp(fieldName, L"rare_item_7") == 0) return rare_item[6];
			if (wcscmp(fieldName, L"rare_item_8") == 0) return rare_item[7];
			if (wcscmp(fieldName, L"rare_item_9") == 0) return rare_item[8];
			if (wcscmp(fieldName, L"rare_item_10") == 0) return rare_item[9];
			if (wcscmp(fieldName, L"rare_item_total_count") == 0) return rare_item_total_count;
			if (wcscmp(fieldName, L"rare_item_select_count") == 0) return rare_item_select_count;
			if (wcscmp(fieldName, L"rare_item_stack_count") == 0) return rare_item_stack_count;
			if (wcscmp(fieldName, L"rare_item_stack_count_1") == 0) return rare_item_stack_count[0];
			if (wcscmp(fieldName, L"rare_item_stack_count_2") == 0) return rare_item_stack_count[1];
			if (wcscmp(fieldName, L"rare_item_stack_count_3") == 0) return rare_item_stack_count[2];
			if (wcscmp(fieldName, L"rare_item_stack_count_4") == 0) return rare_item_stack_count[3];
			if (wcscmp(fieldName, L"rare_item_stack_count_5") == 0) return rare_item_stack_count[4];
			if (wcscmp(fieldName, L"rare_item_stack_count_6") == 0) return rare_item_stack_count[5];
			if (wcscmp(fieldName, L"rare_item_stack_count_7") == 0) return rare_item_stack_count[6];
			if (wcscmp(fieldName, L"rare_item_stack_count_8") == 0) return rare_item_stack_count[7];
			if (wcscmp(fieldName, L"rare_item_stack_count_9") == 0) return rare_item_stack_count[8];
			if (wcscmp(fieldName, L"rare_item_stack_count_10") == 0) return rare_item_stack_count[9];
			if (wcscmp(fieldName, L"normal_item_success_probability") == 0) return normal_item_success_probability;
			if (wcscmp(fieldName, L"normal_item") == 0) return normal_item;
			if (wcscmp(fieldName, L"normal_item_1") == 0) return normal_item[0];
			if (wcscmp(fieldName, L"normal_item_2") == 0) return normal_item[1];
			if (wcscmp(fieldName, L"normal_item_3") == 0) return normal_item[2];
			if (wcscmp(fieldName, L"normal_item_4") == 0) return normal_item[3];
			if (wcscmp(fieldName, L"normal_item_5") == 0) return normal_item[4];
			if (wcscmp(fieldName, L"normal_item_6") == 0) return normal_item[5];
			if (wcscmp(fieldName, L"normal_item_7") == 0) return normal_item[6];
			if (wcscmp(fieldName, L"normal_item_8") == 0) return normal_item[7];
			if (wcscmp(fieldName, L"normal_item_9") == 0) return normal_item[8];
			if (wcscmp(fieldName, L"normal_item_10") == 0) return normal_item[9];
			if (wcscmp(fieldName, L"normal_item_total_count") == 0) return normal_item_total_count;
			if (wcscmp(fieldName, L"normal_item_select_count") == 0) return normal_item_select_count;
			if (wcscmp(fieldName, L"normal_item_stack_count") == 0) return normal_item_stack_count;
			if (wcscmp(fieldName, L"normal_item_stack_count_1") == 0) return normal_item_stack_count[0];
			if (wcscmp(fieldName, L"normal_item_stack_count_2") == 0) return normal_item_stack_count[1];
			if (wcscmp(fieldName, L"normal_item_stack_count_3") == 0) return normal_item_stack_count[2];
			if (wcscmp(fieldName, L"normal_item_stack_count_4") == 0) return normal_item_stack_count[3];
			if (wcscmp(fieldName, L"normal_item_stack_count_5") == 0) return normal_item_stack_count[4];
			if (wcscmp(fieldName, L"normal_item_stack_count_6") == 0) return normal_item_stack_count[5];
			if (wcscmp(fieldName, L"normal_item_stack_count_7") == 0) return normal_item_stack_count[6];
			if (wcscmp(fieldName, L"normal_item_stack_count_8") == 0) return normal_item_stack_count[7];
			if (wcscmp(fieldName, L"normal_item_stack_count_9") == 0) return normal_item_stack_count[8];
			if (wcscmp(fieldName, L"normal_item_stack_count_10") == 0) return normal_item_stack_count[9];
			if (wcscmp(fieldName, L"premium_item") == 0) return premium_item;
			if (wcscmp(fieldName, L"premium_item_1") == 0) return premium_item[0];
			if (wcscmp(fieldName, L"premium_item_2") == 0) return premium_item[1];
			if (wcscmp(fieldName, L"premium_item_3") == 0) return premium_item[2];
			if (wcscmp(fieldName, L"premium_item_4") == 0) return premium_item[3];
			if (wcscmp(fieldName, L"premium_item_5") == 0) return premium_item[4];
			if (wcscmp(fieldName, L"premium_item_6") == 0) return premium_item[5];
			if (wcscmp(fieldName, L"premium_item_7") == 0) return premium_item[6];
			if (wcscmp(fieldName, L"premium_item_8") == 0) return premium_item[7];
			if (wcscmp(fieldName, L"premium_item_9") == 0) return premium_item[8];
			if (wcscmp(fieldName, L"premium_item_10") == 0) return premium_item[9];
			if (wcscmp(fieldName, L"premium_item_total_count") == 0) return premium_item_total_count;
			if (wcscmp(fieldName, L"premium_item_select_count") == 0) return premium_item_select_count;
			if (wcscmp(fieldName, L"premium_item_stack_count") == 0) return premium_item_stack_count;
			if (wcscmp(fieldName, L"premium_item_stack_count_1") == 0) return premium_item_stack_count[0];
			if (wcscmp(fieldName, L"premium_item_stack_count_2") == 0) return premium_item_stack_count[1];
			if (wcscmp(fieldName, L"premium_item_stack_count_3") == 0) return premium_item_stack_count[2];
			if (wcscmp(fieldName, L"premium_item_stack_count_4") == 0) return premium_item_stack_count[3];
			if (wcscmp(fieldName, L"premium_item_stack_count_5") == 0) return premium_item_stack_count[4];
			if (wcscmp(fieldName, L"premium_item_stack_count_6") == 0) return premium_item_stack_count[5];
			if (wcscmp(fieldName, L"premium_item_stack_count_7") == 0) return premium_item_stack_count[6];
			if (wcscmp(fieldName, L"premium_item_stack_count_8") == 0) return premium_item_stack_count[7];
			if (wcscmp(fieldName, L"premium_item_stack_count_9") == 0) return premium_item_stack_count[8];
			if (wcscmp(fieldName, L"premium_item_stack_count_10") == 0) return premium_item_stack_count[9];
			if (wcscmp(fieldName, L"random_item_success_probability") == 0) return random_item_success_probability;
			if (wcscmp(fieldName, L"random_item") == 0) return random_item;
			if (wcscmp(fieldName, L"random_item_1") == 0) return random_item[0];
			if (wcscmp(fieldName, L"random_item_2") == 0) return random_item[1];
			if (wcscmp(fieldName, L"random_item_3") == 0) return random_item[2];
			if (wcscmp(fieldName, L"random_item_4") == 0) return random_item[3];
			if (wcscmp(fieldName, L"random_item_5") == 0) return random_item[4];
			if (wcscmp(fieldName, L"random_item_6") == 0) return random_item[5];
			if (wcscmp(fieldName, L"random_item_7") == 0) return random_item[6];
			if (wcscmp(fieldName, L"random_item_8") == 0) return random_item[7];
			if (wcscmp(fieldName, L"random_item_9") == 0) return random_item[8];
			if (wcscmp(fieldName, L"random_item_10") == 0) return random_item[9];
			if (wcscmp(fieldName, L"random_item_total_count") == 0) return random_item_total_count;
			if (wcscmp(fieldName, L"random_item_select_prop_weight") == 0) return random_item_select_prop_weight;
			if (wcscmp(fieldName, L"random_item_select_prop_weight_1") == 0) return random_item_select_prop_weight[0];
			if (wcscmp(fieldName, L"random_item_select_prop_weight_2") == 0) return random_item_select_prop_weight[1];
			if (wcscmp(fieldName, L"random_item_select_prop_weight_3") == 0) return random_item_select_prop_weight[2];
			if (wcscmp(fieldName, L"random_item_select_prop_weight_4") == 0) return random_item_select_prop_weight[3];
			if (wcscmp(fieldName, L"random_item_select_prop_weight_5") == 0) return random_item_select_prop_weight[4];
			if (wcscmp(fieldName, L"random_item_select_prop_weight_6") == 0) return random_item_select_prop_weight[5];
			if (wcscmp(fieldName, L"random_item_select_prop_weight_7") == 0) return random_item_select_prop_weight[6];
			if (wcscmp(fieldName, L"random_item_select_prop_weight_8") == 0) return random_item_select_prop_weight[7];
			if (wcscmp(fieldName, L"random_item_select_prop_weight_9") == 0) return random_item_select_prop_weight[8];
			if (wcscmp(fieldName, L"random_item_select_prop_weight_10") == 0) return random_item_select_prop_weight[9];
			if (wcscmp(fieldName, L"random_failure_mileage_save") == 0) return random_failure_mileage_save;
			if (wcscmp(fieldName, L"random_failure_mileage_influence_recipe") == 0) return random_failure_mileage_influence_recipe;
			if (wcscmp(fieldName, L"random_failure_mileage_influence_recipe_1") == 0) return random_failure_mileage_influence_recipe[0];
			if (wcscmp(fieldName, L"random_failure_mileage_influence_recipe_2") == 0) return random_failure_mileage_influence_recipe[1];
			if (wcscmp(fieldName, L"random_retry_cost") == 0) return random_retry_cost;
			if (wcscmp(fieldName, L"main_ingredient_weapon_gem_type") == 0) return main_ingredient_weapon_gem_type;
			if (wcscmp(fieldName, L"main_ingredient_weapon_gem_level") == 0) return main_ingredient_weapon_gem_level;
			if (wcscmp(fieldName, L"main_ingredient_weapon_gem_grade") == 0) return main_ingredient_weapon_gem_grade;
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_type") == 0) return sub_ingredient_weapon_gem_type;
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_type_1") == 0) return sub_ingredient_weapon_gem_type[0];
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_type_2") == 0) return sub_ingredient_weapon_gem_type[1];
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_type_3") == 0) return sub_ingredient_weapon_gem_type[2];
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_type_4") == 0) return sub_ingredient_weapon_gem_type[3];
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_type_5") == 0) return sub_ingredient_weapon_gem_type[4];
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_type_6") == 0) return sub_ingredient_weapon_gem_type[5];
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_type_7") == 0) return sub_ingredient_weapon_gem_type[6];
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_level") == 0) return sub_ingredient_weapon_gem_level;
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_level_1") == 0) return sub_ingredient_weapon_gem_level[0];
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_level_2") == 0) return sub_ingredient_weapon_gem_level[1];
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_level_3") == 0) return sub_ingredient_weapon_gem_level[2];
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_level_4") == 0) return sub_ingredient_weapon_gem_level[3];
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_level_5") == 0) return sub_ingredient_weapon_gem_level[4];
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_level_6") == 0) return sub_ingredient_weapon_gem_level[5];
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_level_7") == 0) return sub_ingredient_weapon_gem_level[6];
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_grade") == 0) return sub_ingredient_weapon_gem_grade;
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_grade_1") == 0) return sub_ingredient_weapon_gem_grade[0];
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_grade_2") == 0) return sub_ingredient_weapon_gem_grade[1];
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_grade_3") == 0) return sub_ingredient_weapon_gem_grade[2];
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_grade_4") == 0) return sub_ingredient_weapon_gem_grade[3];
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_grade_5") == 0) return sub_ingredient_weapon_gem_grade[4];
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_grade_6") == 0) return sub_ingredient_weapon_gem_grade[5];
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_grade_7") == 0) return sub_ingredient_weapon_gem_grade[6];
			if (wcscmp(fieldName, L"weapon_gem_transform_fail_probability") == 0) return weapon_gem_transform_fail_probability;
			if (wcscmp(fieldName, L"title_item") == 0) return title_item;
			if (wcscmp(fieldName, L"title_name") == 0) return title_name;
			if (wcscmp(fieldName, L"title_reward") == 0) return title_reward;
			if (wcscmp(fieldName, L"upper_category") == 0) return upper_category;
			if (wcscmp(fieldName, L"category") == 0) return category;
			if (wcscmp(fieldName, L"use_random") == 0) return use_random;
			if (wcscmp(fieldName, L"fail_effect") == 0) return fail_effect;
			if (wcscmp(fieldName, L"quest") == 0) return quest;
			if (wcscmp(fieldName, L"bm_ingredient_recipe") == 0) return bm_ingredient_recipe;
			if (wcscmp(fieldName, L"warning") == 0) return warning;
			if (wcscmp(fieldName, L"event_index") == 0) return event_index;
			if (wcscmp(fieldName, L"recipe_score") == 0) return recipe_score;
			if (wcscmp(fieldName, L"recipe_series") == 0) return recipe_series;
			if (wcscmp(fieldName, L"definite_discount_minimum_value") == 0) return definite_discount_minimum_value;

			return std::any();
		}
		std::wstring GetFieldAsString(const wchar_t* fieldName) {
			if (wcscmp(fieldName, L"alias") == 0) return Data::AnyFieldToStringConverter::ToString(&alias);
			if (wcscmp(fieldName, L"upgrade_grocery") == 0) return Data::AnyFieldToStringConverter::ToString(&upgrade_grocery);
			if (wcscmp(fieldName, L"required_inven_capacity") == 0) return Data::AnyFieldToStringConverter::ToString(&required_inven_capacity);
			if (wcscmp(fieldName, L"money_cost") == 0) return Data::AnyFieldToStringConverter::ToString(&money_cost);
			if (wcscmp(fieldName, L"main_ingredient") == 0) return Data::AnyFieldToStringConverter::ToString(&main_ingredient);
			if (wcscmp(fieldName, L"main_ingredient_condition_type") == 0) return Data::AnyFieldToStringConverter::ToString(&main_ingredient_condition_type);
			if (wcscmp(fieldName, L"main_ingredient_min_level") == 0) return Data::AnyFieldToStringConverter::ToString(&main_ingredient_min_level);
			if (wcscmp(fieldName, L"main_ingredient_stack_count") == 0) return Data::AnyFieldToStringConverter::ToString(&main_ingredient_stack_count);
			if (wcscmp(fieldName, L"main_ingredient_title_name") == 0) return Data::AnyFieldToStringConverter::ToString(&main_ingredient_title_name);
			if (wcscmp(fieldName, L"main_ingredient_title_item") == 0) return Data::AnyFieldToStringConverter::ToString(&main_ingredient_title_item);
			if (wcscmp(fieldName, L"keep_main_ingredient_weapon_gem_slot") == 0) return Data::AnyFieldToStringConverter::ToString(&keep_main_ingredient_weapon_gem_slot);
			if (wcscmp(fieldName, L"keep_main_ingredient_weapon_appearance") == 0) return Data::AnyFieldToStringConverter::ToString(&keep_main_ingredient_weapon_appearance);
			if (wcscmp(fieldName, L"keep_main_ingredient_spirit") == 0) return Data::AnyFieldToStringConverter::ToString(&keep_main_ingredient_spirit);
			if (wcscmp(fieldName, L"consume_main_ingredient") == 0) return Data::AnyFieldToStringConverter::ToString(&consume_main_ingredient);
			if (wcscmp(fieldName, L"sub_ingredient_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient[0]));
			if (wcscmp(fieldName, L"sub_ingredient_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient[1]));
			if (wcscmp(fieldName, L"sub_ingredient_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient[2]));
			if (wcscmp(fieldName, L"sub_ingredient_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient[3]));
			if (wcscmp(fieldName, L"sub_ingredient_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient[4]));
			if (wcscmp(fieldName, L"sub_ingredient_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient[5]));
			if (wcscmp(fieldName, L"sub_ingredient_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient[6]));
			if (wcscmp(fieldName, L"sub_ingredient_condition_type_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_condition_type[0]));
			if (wcscmp(fieldName, L"sub_ingredient_condition_type_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_condition_type[1]));
			if (wcscmp(fieldName, L"sub_ingredient_condition_type_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_condition_type[2]));
			if (wcscmp(fieldName, L"sub_ingredient_condition_type_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_condition_type[3]));
			if (wcscmp(fieldName, L"sub_ingredient_condition_type_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_condition_type[4]));
			if (wcscmp(fieldName, L"sub_ingredient_condition_type_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_condition_type[5]));
			if (wcscmp(fieldName, L"sub_ingredient_condition_type_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_condition_type[6]));
			if (wcscmp(fieldName, L"sub_ingredient_min_level_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_min_level[0]));
			if (wcscmp(fieldName, L"sub_ingredient_min_level_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_min_level[1]));
			if (wcscmp(fieldName, L"sub_ingredient_min_level_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_min_level[2]));
			if (wcscmp(fieldName, L"sub_ingredient_min_level_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_min_level[3]));
			if (wcscmp(fieldName, L"sub_ingredient_min_level_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_min_level[4]));
			if (wcscmp(fieldName, L"sub_ingredient_min_level_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_min_level[5]));
			if (wcscmp(fieldName, L"sub_ingredient_min_level_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_min_level[6]));
			if (wcscmp(fieldName, L"sub_ingredient_stack_count_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_stack_count[0]));
			if (wcscmp(fieldName, L"sub_ingredient_stack_count_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_stack_count[1]));
			if (wcscmp(fieldName, L"sub_ingredient_stack_count_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_stack_count[2]));
			if (wcscmp(fieldName, L"sub_ingredient_stack_count_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_stack_count[3]));
			if (wcscmp(fieldName, L"sub_ingredient_stack_count_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_stack_count[4]));
			if (wcscmp(fieldName, L"sub_ingredient_stack_count_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_stack_count[5]));
			if (wcscmp(fieldName, L"sub_ingredient_stack_count_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_stack_count[6]));
			if (wcscmp(fieldName, L"sub_ingredient_title_name_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_title_name[0]));
			if (wcscmp(fieldName, L"sub_ingredient_title_name_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_title_name[1]));
			if (wcscmp(fieldName, L"sub_ingredient_title_name_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_title_name[2]));
			if (wcscmp(fieldName, L"sub_ingredient_title_name_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_title_name[3]));
			if (wcscmp(fieldName, L"sub_ingredient_title_name_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_title_name[4]));
			if (wcscmp(fieldName, L"sub_ingredient_title_name_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_title_name[5]));
			if (wcscmp(fieldName, L"sub_ingredient_title_name_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_title_name[6]));
			if (wcscmp(fieldName, L"sub_ingredient_title_item_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_title_item[0]));
			if (wcscmp(fieldName, L"sub_ingredient_title_item_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_title_item[1]));
			if (wcscmp(fieldName, L"sub_ingredient_title_item_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_title_item[2]));
			if (wcscmp(fieldName, L"sub_ingredient_title_item_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_title_item[3]));
			if (wcscmp(fieldName, L"sub_ingredient_title_item_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_title_item[4]));
			if (wcscmp(fieldName, L"sub_ingredient_title_item_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_title_item[5]));
			if (wcscmp(fieldName, L"sub_ingredient_title_item_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_title_item[6]));
			if (wcscmp(fieldName, L"consume_sub_ingredient") == 0) return Data::AnyFieldToStringConverter::ToString(&consume_sub_ingredient);
			if (wcscmp(fieldName, L"fixed_ingredient_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(fixed_ingredient[0]));
			if (wcscmp(fieldName, L"fixed_ingredient_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(fixed_ingredient[1]));
			if (wcscmp(fieldName, L"fixed_ingredient_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(fixed_ingredient[2]));
			if (wcscmp(fieldName, L"fixed_ingredient_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(fixed_ingredient[3]));
			if (wcscmp(fieldName, L"fixed_ingredient_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(fixed_ingredient[4]));
			if (wcscmp(fieldName, L"fixed_ingredient_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(fixed_ingredient[5]));
			if (wcscmp(fieldName, L"fixed_ingredient_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(fixed_ingredient[6]));
			if (wcscmp(fieldName, L"fixed_ingredient_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(fixed_ingredient[7]));
			if (wcscmp(fieldName, L"fixed_ingredient_stack_count_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(fixed_ingredient_stack_count[0]));
			if (wcscmp(fieldName, L"fixed_ingredient_stack_count_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(fixed_ingredient_stack_count[1]));
			if (wcscmp(fieldName, L"fixed_ingredient_stack_count_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(fixed_ingredient_stack_count[2]));
			if (wcscmp(fieldName, L"fixed_ingredient_stack_count_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(fixed_ingredient_stack_count[3]));
			if (wcscmp(fieldName, L"fixed_ingredient_stack_count_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(fixed_ingredient_stack_count[4]));
			if (wcscmp(fieldName, L"fixed_ingredient_stack_count_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(fixed_ingredient_stack_count[5]));
			if (wcscmp(fieldName, L"fixed_ingredient_stack_count_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(fixed_ingredient_stack_count[6]));
			if (wcscmp(fieldName, L"fixed_ingredient_stack_count_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(fixed_ingredient_stack_count[7]));
			if (wcscmp(fieldName, L"consume_fixed_ingredient") == 0) return Data::AnyFieldToStringConverter::ToString(&consume_fixed_ingredient);
			if (wcscmp(fieldName, L"special_fixed_index") == 0) return Data::AnyFieldToStringConverter::ToString(&special_fixed_index);
			if (wcscmp(fieldName, L"enable_batch_transform") == 0) return Data::AnyFieldToStringConverter::ToString(&enable_batch_transform);
			if (wcscmp(fieldName, L"is_fixed_result_recipe") == 0) return Data::AnyFieldToStringConverter::ToString(&is_fixed_result_recipe);
			if (wcscmp(fieldName, L"rare_item_success_probability") == 0) return Data::AnyFieldToStringConverter::ToString(&rare_item_success_probability);
			if (wcscmp(fieldName, L"rare_item_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(rare_item[0]));
			if (wcscmp(fieldName, L"rare_item_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(rare_item[1]));
			if (wcscmp(fieldName, L"rare_item_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(rare_item[2]));
			if (wcscmp(fieldName, L"rare_item_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(rare_item[3]));
			if (wcscmp(fieldName, L"rare_item_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(rare_item[4]));
			if (wcscmp(fieldName, L"rare_item_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(rare_item[5]));
			if (wcscmp(fieldName, L"rare_item_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(rare_item[6]));
			if (wcscmp(fieldName, L"rare_item_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(rare_item[7]));
			if (wcscmp(fieldName, L"rare_item_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(rare_item[8]));
			if (wcscmp(fieldName, L"rare_item_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(rare_item[9]));
			if (wcscmp(fieldName, L"rare_item_total_count") == 0) return Data::AnyFieldToStringConverter::ToString(&rare_item_total_count);
			if (wcscmp(fieldName, L"rare_item_select_count") == 0) return Data::AnyFieldToStringConverter::ToString(&rare_item_select_count);
			if (wcscmp(fieldName, L"rare_item_stack_count_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(rare_item_stack_count[0]));
			if (wcscmp(fieldName, L"rare_item_stack_count_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(rare_item_stack_count[1]));
			if (wcscmp(fieldName, L"rare_item_stack_count_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(rare_item_stack_count[2]));
			if (wcscmp(fieldName, L"rare_item_stack_count_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(rare_item_stack_count[3]));
			if (wcscmp(fieldName, L"rare_item_stack_count_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(rare_item_stack_count[4]));
			if (wcscmp(fieldName, L"rare_item_stack_count_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(rare_item_stack_count[5]));
			if (wcscmp(fieldName, L"rare_item_stack_count_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(rare_item_stack_count[6]));
			if (wcscmp(fieldName, L"rare_item_stack_count_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(rare_item_stack_count[7]));
			if (wcscmp(fieldName, L"rare_item_stack_count_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(rare_item_stack_count[8]));
			if (wcscmp(fieldName, L"rare_item_stack_count_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(rare_item_stack_count[9]));
			if (wcscmp(fieldName, L"normal_item_success_probability") == 0) return Data::AnyFieldToStringConverter::ToString(&normal_item_success_probability);
			if (wcscmp(fieldName, L"normal_item_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(normal_item[0]));
			if (wcscmp(fieldName, L"normal_item_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(normal_item[1]));
			if (wcscmp(fieldName, L"normal_item_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(normal_item[2]));
			if (wcscmp(fieldName, L"normal_item_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(normal_item[3]));
			if (wcscmp(fieldName, L"normal_item_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(normal_item[4]));
			if (wcscmp(fieldName, L"normal_item_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(normal_item[5]));
			if (wcscmp(fieldName, L"normal_item_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(normal_item[6]));
			if (wcscmp(fieldName, L"normal_item_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(normal_item[7]));
			if (wcscmp(fieldName, L"normal_item_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(normal_item[8]));
			if (wcscmp(fieldName, L"normal_item_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(normal_item[9]));
			if (wcscmp(fieldName, L"normal_item_total_count") == 0) return Data::AnyFieldToStringConverter::ToString(&normal_item_total_count);
			if (wcscmp(fieldName, L"normal_item_select_count") == 0) return Data::AnyFieldToStringConverter::ToString(&normal_item_select_count);
			if (wcscmp(fieldName, L"normal_item_stack_count_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(normal_item_stack_count[0]));
			if (wcscmp(fieldName, L"normal_item_stack_count_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(normal_item_stack_count[1]));
			if (wcscmp(fieldName, L"normal_item_stack_count_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(normal_item_stack_count[2]));
			if (wcscmp(fieldName, L"normal_item_stack_count_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(normal_item_stack_count[3]));
			if (wcscmp(fieldName, L"normal_item_stack_count_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(normal_item_stack_count[4]));
			if (wcscmp(fieldName, L"normal_item_stack_count_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(normal_item_stack_count[5]));
			if (wcscmp(fieldName, L"normal_item_stack_count_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(normal_item_stack_count[6]));
			if (wcscmp(fieldName, L"normal_item_stack_count_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(normal_item_stack_count[7]));
			if (wcscmp(fieldName, L"normal_item_stack_count_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(normal_item_stack_count[8]));
			if (wcscmp(fieldName, L"normal_item_stack_count_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(normal_item_stack_count[9]));
			if (wcscmp(fieldName, L"premium_item_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(premium_item[0]));
			if (wcscmp(fieldName, L"premium_item_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(premium_item[1]));
			if (wcscmp(fieldName, L"premium_item_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(premium_item[2]));
			if (wcscmp(fieldName, L"premium_item_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(premium_item[3]));
			if (wcscmp(fieldName, L"premium_item_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(premium_item[4]));
			if (wcscmp(fieldName, L"premium_item_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(premium_item[5]));
			if (wcscmp(fieldName, L"premium_item_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(premium_item[6]));
			if (wcscmp(fieldName, L"premium_item_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(premium_item[7]));
			if (wcscmp(fieldName, L"premium_item_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(premium_item[8]));
			if (wcscmp(fieldName, L"premium_item_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(premium_item[9]));
			if (wcscmp(fieldName, L"premium_item_total_count") == 0) return Data::AnyFieldToStringConverter::ToString(&premium_item_total_count);
			if (wcscmp(fieldName, L"premium_item_select_count") == 0) return Data::AnyFieldToStringConverter::ToString(&premium_item_select_count);
			if (wcscmp(fieldName, L"premium_item_stack_count_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(premium_item_stack_count[0]));
			if (wcscmp(fieldName, L"premium_item_stack_count_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(premium_item_stack_count[1]));
			if (wcscmp(fieldName, L"premium_item_stack_count_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(premium_item_stack_count[2]));
			if (wcscmp(fieldName, L"premium_item_stack_count_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(premium_item_stack_count[3]));
			if (wcscmp(fieldName, L"premium_item_stack_count_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(premium_item_stack_count[4]));
			if (wcscmp(fieldName, L"premium_item_stack_count_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(premium_item_stack_count[5]));
			if (wcscmp(fieldName, L"premium_item_stack_count_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(premium_item_stack_count[6]));
			if (wcscmp(fieldName, L"premium_item_stack_count_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(premium_item_stack_count[7]));
			if (wcscmp(fieldName, L"premium_item_stack_count_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(premium_item_stack_count[8]));
			if (wcscmp(fieldName, L"premium_item_stack_count_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(premium_item_stack_count[9]));
			if (wcscmp(fieldName, L"random_item_success_probability") == 0) return Data::AnyFieldToStringConverter::ToString(&random_item_success_probability);
			if (wcscmp(fieldName, L"random_item_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(random_item[0]));
			if (wcscmp(fieldName, L"random_item_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(random_item[1]));
			if (wcscmp(fieldName, L"random_item_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(random_item[2]));
			if (wcscmp(fieldName, L"random_item_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(random_item[3]));
			if (wcscmp(fieldName, L"random_item_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(random_item[4]));
			if (wcscmp(fieldName, L"random_item_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(random_item[5]));
			if (wcscmp(fieldName, L"random_item_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(random_item[6]));
			if (wcscmp(fieldName, L"random_item_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(random_item[7]));
			if (wcscmp(fieldName, L"random_item_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(random_item[8]));
			if (wcscmp(fieldName, L"random_item_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(random_item[9]));
			if (wcscmp(fieldName, L"random_item_total_count") == 0) return Data::AnyFieldToStringConverter::ToString(&random_item_total_count);
			if (wcscmp(fieldName, L"random_item_select_prop_weight_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(random_item_select_prop_weight[0]));
			if (wcscmp(fieldName, L"random_item_select_prop_weight_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(random_item_select_prop_weight[1]));
			if (wcscmp(fieldName, L"random_item_select_prop_weight_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(random_item_select_prop_weight[2]));
			if (wcscmp(fieldName, L"random_item_select_prop_weight_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(random_item_select_prop_weight[3]));
			if (wcscmp(fieldName, L"random_item_select_prop_weight_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(random_item_select_prop_weight[4]));
			if (wcscmp(fieldName, L"random_item_select_prop_weight_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(random_item_select_prop_weight[5]));
			if (wcscmp(fieldName, L"random_item_select_prop_weight_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(random_item_select_prop_weight[6]));
			if (wcscmp(fieldName, L"random_item_select_prop_weight_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(random_item_select_prop_weight[7]));
			if (wcscmp(fieldName, L"random_item_select_prop_weight_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(random_item_select_prop_weight[8]));
			if (wcscmp(fieldName, L"random_item_select_prop_weight_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(random_item_select_prop_weight[9]));
			if (wcscmp(fieldName, L"random_failure_mileage_save") == 0) return Data::AnyFieldToStringConverter::ToString(&random_failure_mileage_save);
			if (wcscmp(fieldName, L"random_failure_mileage_influence_recipe_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(random_failure_mileage_influence_recipe[0]));
			if (wcscmp(fieldName, L"random_failure_mileage_influence_recipe_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(random_failure_mileage_influence_recipe[1]));
			if (wcscmp(fieldName, L"random_retry_cost") == 0) return Data::AnyFieldToStringConverter::ToString(&random_retry_cost);
			if (wcscmp(fieldName, L"main_ingredient_weapon_gem_type") == 0) return Data::AnyFieldToStringConverter::ToString(&main_ingredient_weapon_gem_type);
			if (wcscmp(fieldName, L"main_ingredient_weapon_gem_level") == 0) return Data::AnyFieldToStringConverter::ToString(&main_ingredient_weapon_gem_level);
			if (wcscmp(fieldName, L"main_ingredient_weapon_gem_grade") == 0) return Data::AnyFieldToStringConverter::ToString(&main_ingredient_weapon_gem_grade);
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_type_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_weapon_gem_type[0]));
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_type_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_weapon_gem_type[1]));
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_type_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_weapon_gem_type[2]));
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_type_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_weapon_gem_type[3]));
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_type_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_weapon_gem_type[4]));
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_type_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_weapon_gem_type[5]));
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_type_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_weapon_gem_type[6]));
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_level_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_weapon_gem_level[0]));
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_level_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_weapon_gem_level[1]));
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_level_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_weapon_gem_level[2]));
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_level_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_weapon_gem_level[3]));
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_level_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_weapon_gem_level[4]));
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_level_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_weapon_gem_level[5]));
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_level_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_weapon_gem_level[6]));
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_grade_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_weapon_gem_grade[0]));
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_grade_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_weapon_gem_grade[1]));
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_grade_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_weapon_gem_grade[2]));
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_grade_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_weapon_gem_grade[3]));
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_grade_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_weapon_gem_grade[4]));
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_grade_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_weapon_gem_grade[5]));
			if (wcscmp(fieldName, L"sub_ingredient_weapon_gem_grade_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(sub_ingredient_weapon_gem_grade[6]));
			if (wcscmp(fieldName, L"weapon_gem_transform_fail_probability") == 0) return Data::AnyFieldToStringConverter::ToString(&weapon_gem_transform_fail_probability);
			if (wcscmp(fieldName, L"title_item") == 0) return Data::AnyFieldToStringConverter::ToString(&title_item);
			if (wcscmp(fieldName, L"title_name") == 0) return Data::AnyFieldToStringConverter::ToString(&title_name);
			if (wcscmp(fieldName, L"title_reward") == 0) return Data::AnyFieldToStringConverter::ToString(&title_reward);
			if (wcscmp(fieldName, L"upper_category") == 0) return Data::AnyFieldToStringConverter::ToString(&upper_category);
			if (wcscmp(fieldName, L"category") == 0) return Data::AnyFieldToStringConverter::ToString(&category);
			if (wcscmp(fieldName, L"use_random") == 0) return Data::AnyFieldToStringConverter::ToString(&use_random);
			if (wcscmp(fieldName, L"fail_effect") == 0) return Data::AnyFieldToStringConverter::ToString(&fail_effect);
			if (wcscmp(fieldName, L"quest") == 0) return Data::AnyFieldToStringConverter::ToString(&quest);
			if (wcscmp(fieldName, L"bm_ingredient_recipe") == 0) return Data::AnyFieldToStringConverter::ToString(&bm_ingredient_recipe);
			if (wcscmp(fieldName, L"warning") == 0) return Data::AnyFieldToStringConverter::ToString(&warning);
			if (wcscmp(fieldName, L"event_index") == 0) return Data::AnyFieldToStringConverter::ToString(&event_index);
			if (wcscmp(fieldName, L"recipe_score") == 0) return Data::AnyFieldToStringConverter::ToString(&recipe_score);
			if (wcscmp(fieldName, L"recipe_series") == 0) return Data::AnyFieldToStringConverter::ToString(&recipe_series);
			if (wcscmp(fieldName, L"definite_discount_minimum_value") == 0) return Data::AnyFieldToStringConverter::ToString(&definite_discount_minimum_value);

			return L"";
		}
		void AutoCorrectLookupOffsets(const char* lookupDataPtr) {
			if (reinterpret_cast<std::uintptr_t>(alias) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) alias = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(alias));
		}
		union Key
		{
            struct {
                
            };
			unsigned __int64 key;
		};
		__declspec(align(8)) Key key;
		wchar_t* alias;
Data::TableRef upgrade_grocery;
int upgrade_grocery_tableId(){return 214;};
__int8 required_inven_capacity;
char Pad0[3];
__int32 money_cost;
Data::ExplicitTableRef main_ingredient;
__int8 main_ingredient_condition_type;
std::wstring main_ingredient_condition_type_EnumValue() const {return Get_main_ingredient_condition_type_EnumValue(main_ingredient_condition_type);};
__int8 main_ingredient_min_level;
__int16 main_ingredient_stack_count;
Data::TableRef main_ingredient_title_name;
int main_ingredient_title_name_tableId(){return 405;};
Data::TableRef main_ingredient_title_item;
int main_ingredient_title_item_tableId(){return 189;};
bool keep_main_ingredient_weapon_gem_slot;
bool keep_main_ingredient_weapon_appearance;
bool keep_main_ingredient_spirit;
bool consume_main_ingredient;
Data::ExplicitTableRef sub_ingredient[7];
__int8 sub_ingredient_condition_type[7];
std::wstring sub_ingredient_condition_type_EnumValue(int index) const {return Get_sub_ingredient_condition_type_EnumValue(sub_ingredient_condition_type[index]);};
__int8 sub_ingredient_min_level[7];
__int16 sub_ingredient_stack_count[7];
Data::TableRef sub_ingredient_title_name[7];
int sub_ingredient_title_name_tableId(){return 405;};
Data::TableRef sub_ingredient_title_item[7];
int sub_ingredient_title_item_tableId(){return 189;};
bool consume_sub_ingredient;
char Pad1[3];
Data::TableRef fixed_ingredient[8];
int fixed_ingredient_tableId(){return 189;};
__int16 fixed_ingredient_stack_count[8];
bool consume_fixed_ingredient;
__int8 special_fixed_index;
bool enable_batch_transform;
bool is_fixed_result_recipe;
__int16 rare_item_success_probability;
char Pad2[2];
Data::ExplicitTableRef rare_item[10];
__int8 rare_item_total_count;
__int8 rare_item_select_count;
__int16 rare_item_stack_count[10];
__int16 normal_item_success_probability;
Data::ExplicitTableRef normal_item[10];
__int8 normal_item_total_count;
__int8 normal_item_select_count;
__int16 normal_item_stack_count[10];
char Pad3[2];
Data::ExplicitTableRef premium_item[10];
__int8 premium_item_total_count;
__int8 premium_item_select_count;
__int16 premium_item_stack_count[10];
__int16 random_item_success_probability;
Data::ExplicitTableRef random_item[10];
__int8 random_item_total_count;
char Pad4[1];
__int16 random_item_select_prop_weight[10];
bool random_failure_mileage_save;
char Pad5[1];
Data::TableRef random_failure_mileage_influence_recipe[2];
int random_failure_mileage_influence_recipe_tableId(){return 212;};
Data::TableRef random_retry_cost;
int random_retry_cost_tableId(){return 213;};
__int8 main_ingredient_weapon_gem_type;
std::wstring main_ingredient_weapon_gem_type_EnumValue() const {return Get_main_ingredient_weapon_gem_type_EnumValue(main_ingredient_weapon_gem_type);};
char Pad6[1];
__int16 main_ingredient_weapon_gem_level;
__int8 main_ingredient_weapon_gem_grade;
__int8 sub_ingredient_weapon_gem_type[7];
std::wstring sub_ingredient_weapon_gem_type_EnumValue(int index) const {return Get_sub_ingredient_weapon_gem_type_EnumValue(sub_ingredient_weapon_gem_type[index]);};
__int16 sub_ingredient_weapon_gem_level[7];
__int8 sub_ingredient_weapon_gem_grade[7];
char Pad7[1];
__int16 weapon_gem_transform_fail_probability;
Data::TableRef title_item;
int title_item_tableId(){return 189;};
Data::TableRef title_name;
int title_name_tableId(){return 405;};
Data::TableRef title_reward;
int title_reward_tableId(){return 290;};
__int8 upper_category;
std::wstring upper_category_EnumValue() const {return Get_upper_category_EnumValue(upper_category);};
__int8 category;
std::wstring category_EnumValue() const {return Get_category_EnumValue(category);};
bool use_random;
char Pad8[1];
Data::TableRef fail_effect;
int fail_effect_tableId(){return 111;};
Data::TableRef quest;
int quest_tableId(){return 283;};
bool bm_ingredient_recipe;
__int8 warning;
std::wstring warning_EnumValue() const {return Get_warning_EnumValue(warning);};
__int8 event_index;
char Pad9[1];
__int32 recipe_score;
__int8 recipe_series;
std::wstring recipe_series_EnumValue() const {return Get_recipe_series_EnumValue(recipe_series);};
__int8 definite_discount_minimum_value;

		static TableVersion Version() { return TableVersion(5, 0); }
		static __int16 TableId() { return 212; }
		static __int32 SubType() { return 0; }
	};
#pragma pack(pop)
#pragma pack(push, 1)
	struct __declspec(align(4)) itemtransformrecipe_RecordPtr // : DrRecordPtr
	{
		itemtransformrecipe_Record* _record;
		int _cacheChunkIndex;
		//__unaligned __declspec(align(1)) const Data::itemtransformrecipe_Record* _debug;
		bool _makeCopy;
	};
#pragma pack(pop)
}