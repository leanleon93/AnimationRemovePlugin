/*
 Generated Code! Do not manually edit this code. Modify the generator instead.
*/
#pragma once
#include "../DrEl.h"
#include "../AnyToStringConverter.h"

namespace Data {

#pragma pack(push, 1)
	struct raid_dungeon_Record : DrEl
	{
	private:
		static std::wstring Get_dungeon_type_EnumValue(__int8 value);
		static std::wstring Get_personal_binding_slot_EnumValue(__int8 value);
		static std::wstring Get_required_preceding_quest_check_EnumValue(__int8 value);
	public:
		std::any GetField(const wchar_t* fieldName) const {
			if (wcscmp(fieldName, L"alias") == 0) return alias;
			if (wcscmp(fieldName, L"name2") == 0) return name2;
			if (wcscmp(fieldName, L"dungeon_type") == 0) return dungeon_type;
			if (wcscmp(fieldName, L"group") == 0) return group;
			if (wcscmp(fieldName, L"max_unbind_count") == 0) return max_unbind_count;
			if (wcscmp(fieldName, L"reset_money") == 0) return reset_money;
			if (wcscmp(fieldName, L"reset_item") == 0) return reset_item;
			if (wcscmp(fieldName, L"reset_item_1") == 0) return reset_item[0];
			if (wcscmp(fieldName, L"reset_item_2") == 0) return reset_item[1];
			if (wcscmp(fieldName, L"reset_item_3") == 0) return reset_item[2];
			if (wcscmp(fieldName, L"reset_item_4") == 0) return reset_item[3];
			if (wcscmp(fieldName, L"reset_item_count") == 0) return reset_item_count;
			if (wcscmp(fieldName, L"reset_item_count_1") == 0) return reset_item_count[0];
			if (wcscmp(fieldName, L"reset_item_count_2") == 0) return reset_item_count[1];
			if (wcscmp(fieldName, L"reset_item_count_3") == 0) return reset_item_count[2];
			if (wcscmp(fieldName, L"reset_item_count_4") == 0) return reset_item_count[3];
			if (wcscmp(fieldName, L"use_personal_binding") == 0) return use_personal_binding;
			if (wcscmp(fieldName, L"personal_binding_slot") == 0) return personal_binding_slot;
			if (wcscmp(fieldName, L"pc_max") == 0) return pc_max;
			if (wcscmp(fieldName, L"required_level") == 0) return required_level;
			if (wcscmp(fieldName, L"required_mastery_level") == 0) return required_mastery_level;
			if (wcscmp(fieldName, L"required_preceding_quest") == 0) return required_preceding_quest;
			if (wcscmp(fieldName, L"required_preceding_quest_1") == 0) return required_preceding_quest[0];
			if (wcscmp(fieldName, L"required_preceding_quest_2") == 0) return required_preceding_quest[1];
			if (wcscmp(fieldName, L"required_preceding_quest_3") == 0) return required_preceding_quest[2];
			if (wcscmp(fieldName, L"required_preceding_quest_check") == 0) return required_preceding_quest_check;
			if (wcscmp(fieldName, L"attraction_quest") == 0) return attraction_quest;
			if (wcscmp(fieldName, L"attraction_quest_1") == 0) return attraction_quest[0];
			if (wcscmp(fieldName, L"attraction_quest_2") == 0) return attraction_quest[1];
			if (wcscmp(fieldName, L"attraction_quest_3") == 0) return attraction_quest[2];
			if (wcscmp(fieldName, L"attraction_quest_4") == 0) return attraction_quest[3];
			if (wcscmp(fieldName, L"attraction_quest_5") == 0) return attraction_quest[4];
			if (wcscmp(fieldName, L"attraction_quest_6") == 0) return attraction_quest[5];
			if (wcscmp(fieldName, L"attraction_quest_7") == 0) return attraction_quest[6];
			if (wcscmp(fieldName, L"attraction_quest_8") == 0) return attraction_quest[7];
			if (wcscmp(fieldName, L"attraction_quest_9") == 0) return attraction_quest[8];
			if (wcscmp(fieldName, L"attraction_quest_10") == 0) return attraction_quest[9];
			if (wcscmp(fieldName, L"enable_heart_count") == 0) return enable_heart_count;
			if (wcscmp(fieldName, L"max_instant_heart_count") == 0) return max_instant_heart_count;
			if (wcscmp(fieldName, L"effect") == 0) return effect;
			if (wcscmp(fieldName, L"effect_1") == 0) return effect[0];
			if (wcscmp(fieldName, L"effect_2") == 0) return effect[1];
			if (wcscmp(fieldName, L"effect_3") == 0) return effect[2];
			if (wcscmp(fieldName, L"step_count") == 0) return step_count;
			if (wcscmp(fieldName, L"zone") == 0) return zone;
			if (wcscmp(fieldName, L"zone_1") == 0) return zone[0];
			if (wcscmp(fieldName, L"zone_2") == 0) return zone[1];
			if (wcscmp(fieldName, L"zone_3") == 0) return zone[2];
			if (wcscmp(fieldName, L"zone_4") == 0) return zone[3];
			if (wcscmp(fieldName, L"zone_5") == 0) return zone[4];
			if (wcscmp(fieldName, L"zone_6") == 0) return zone[5];
			if (wcscmp(fieldName, L"zone_7") == 0) return zone[6];
			if (wcscmp(fieldName, L"zone_8") == 0) return zone[7];
			if (wcscmp(fieldName, L"zone_9") == 0) return zone[8];
			if (wcscmp(fieldName, L"boss_npc") == 0) return boss_npc;
			if (wcscmp(fieldName, L"boss_npc_1") == 0) return boss_npc[0];
			if (wcscmp(fieldName, L"boss_npc_2") == 0) return boss_npc[1];
			if (wcscmp(fieldName, L"boss_npc_3") == 0) return boss_npc[2];
			if (wcscmp(fieldName, L"boss_npc_4") == 0) return boss_npc[3];
			if (wcscmp(fieldName, L"boss_npc_5") == 0) return boss_npc[4];
			if (wcscmp(fieldName, L"boss_npc_6") == 0) return boss_npc[5];
			if (wcscmp(fieldName, L"boss_npc_7") == 0) return boss_npc[6];
			if (wcscmp(fieldName, L"boss_npc_8") == 0) return boss_npc[7];
			if (wcscmp(fieldName, L"boss_npc_9") == 0) return boss_npc[8];
			if (wcscmp(fieldName, L"zone_index") == 0) return zone_index;
			if (wcscmp(fieldName, L"zone_index_1") == 0) return zone_index[0];
			if (wcscmp(fieldName, L"zone_index_2") == 0) return zone_index[1];
			if (wcscmp(fieldName, L"zone_index_3") == 0) return zone_index[2];
			if (wcscmp(fieldName, L"zone_index_4") == 0) return zone_index[3];
			if (wcscmp(fieldName, L"zone_index_5") == 0) return zone_index[4];
			if (wcscmp(fieldName, L"zone_index_6") == 0) return zone_index[5];
			if (wcscmp(fieldName, L"zone_index_7") == 0) return zone_index[6];
			if (wcscmp(fieldName, L"zone_index_8") == 0) return zone_index[7];
			if (wcscmp(fieldName, L"zone_index_9") == 0) return zone_index[8];
			if (wcscmp(fieldName, L"dungeon_tap_name2") == 0) return dungeon_tap_name2;
			if (wcscmp(fieldName, L"step_name2") == 0) return step_name2;
			if (wcscmp(fieldName, L"step_name2_1") == 0) return step_name2[0];
			if (wcscmp(fieldName, L"step_name2_2") == 0) return step_name2[1];
			if (wcscmp(fieldName, L"step_name2_3") == 0) return step_name2[2];
			if (wcscmp(fieldName, L"step_name2_4") == 0) return step_name2[3];
			if (wcscmp(fieldName, L"step_name2_5") == 0) return step_name2[4];
			if (wcscmp(fieldName, L"step_name2_6") == 0) return step_name2[5];
			if (wcscmp(fieldName, L"step_name2_7") == 0) return step_name2[6];
			if (wcscmp(fieldName, L"step_name2_8") == 0) return step_name2[7];
			if (wcscmp(fieldName, L"step_name2_9") == 0) return step_name2[8];
			if (wcscmp(fieldName, L"step_image") == 0) return step_image;
			if (wcscmp(fieldName, L"step_image_1") == 0) return step_image[0];
			if (wcscmp(fieldName, L"step_image_2") == 0) return step_image[1];
			if (wcscmp(fieldName, L"step_image_3") == 0) return step_image[2];
			if (wcscmp(fieldName, L"step_image_4") == 0) return step_image[3];
			if (wcscmp(fieldName, L"step_image_5") == 0) return step_image[4];
			if (wcscmp(fieldName, L"step_image_6") == 0) return step_image[5];
			if (wcscmp(fieldName, L"step_image_7") == 0) return step_image[6];
			if (wcscmp(fieldName, L"step_image_8") == 0) return step_image[7];
			if (wcscmp(fieldName, L"step_image_9") == 0) return step_image[8];
			if (wcscmp(fieldName, L"arena_minimap") == 0) return arena_minimap;
			if (wcscmp(fieldName, L"raid_dungeon_desc") == 0) return raid_dungeon_desc;
			if (wcscmp(fieldName, L"ui_text_grade") == 0) return ui_text_grade;
			if (wcscmp(fieldName, L"reward_summary") == 0) return reward_summary;
			if (wcscmp(fieldName, L"recommand_level_min") == 0) return recommand_level_min;
			if (wcscmp(fieldName, L"recommand_level_max") == 0) return recommand_level_max;
			if (wcscmp(fieldName, L"recommand_mastery_level_min") == 0) return recommand_mastery_level_min;
			if (wcscmp(fieldName, L"recommand_mastery_level_max") == 0) return recommand_mastery_level_max;
			if (wcscmp(fieldName, L"recommend_attack_power") == 0) return recommend_attack_power;
			if (wcscmp(fieldName, L"standard_gear_weapon") == 0) return standard_gear_weapon;
			if (wcscmp(fieldName, L"display_quests") == 0) return display_quests;
			if (wcscmp(fieldName, L"display_quests_1") == 0) return display_quests[0];
			if (wcscmp(fieldName, L"display_quests_2") == 0) return display_quests[1];
			if (wcscmp(fieldName, L"display_quests_3") == 0) return display_quests[2];
			if (wcscmp(fieldName, L"display_quests_4") == 0) return display_quests[3];
			if (wcscmp(fieldName, L"display_quests_5") == 0) return display_quests[4];
			if (wcscmp(fieldName, L"display_quests_6") == 0) return display_quests[5];
			if (wcscmp(fieldName, L"display_quests_7") == 0) return display_quests[6];
			if (wcscmp(fieldName, L"display_quests_8") == 0) return display_quests[7];
			if (wcscmp(fieldName, L"display_quests_9") == 0) return display_quests[8];
			if (wcscmp(fieldName, L"display_quests_10") == 0) return display_quests[9];
			if (wcscmp(fieldName, L"display_quests_11") == 0) return display_quests[10];
			if (wcscmp(fieldName, L"display_quests_12") == 0) return display_quests[11];
			if (wcscmp(fieldName, L"tactic") == 0) return tactic;
			if (wcscmp(fieldName, L"recommend_alias") == 0) return recommend_alias;
			if (wcscmp(fieldName, L"contents_reset") == 0) return contents_reset;
			if (wcscmp(fieldName, L"boss_npc_alias") == 0) return boss_npc_alias;
			if (wcscmp(fieldName, L"boss_npc_alias_1") == 0) return boss_npc_alias[0];
			if (wcscmp(fieldName, L"boss_npc_alias_2") == 0) return boss_npc_alias[1];
			if (wcscmp(fieldName, L"boss_npc_alias_3") == 0) return boss_npc_alias[2];
			if (wcscmp(fieldName, L"boss_npc_alias_4") == 0) return boss_npc_alias[3];
			if (wcscmp(fieldName, L"boss_npc_alias_5") == 0) return boss_npc_alias[4];
			if (wcscmp(fieldName, L"boss_npc_alias_6") == 0) return boss_npc_alias[5];
			if (wcscmp(fieldName, L"boss_npc_alias_7") == 0) return boss_npc_alias[6];
			if (wcscmp(fieldName, L"boss_npc_alias_8") == 0) return boss_npc_alias[7];
			if (wcscmp(fieldName, L"boss_npc_section") == 0) return boss_npc_section;
			if (wcscmp(fieldName, L"boss_npc_section_1") == 0) return boss_npc_section[0];
			if (wcscmp(fieldName, L"boss_npc_section_2") == 0) return boss_npc_section[1];
			if (wcscmp(fieldName, L"boss_npc_section_3") == 0) return boss_npc_section[2];
			if (wcscmp(fieldName, L"boss_npc_section_4") == 0) return boss_npc_section[3];
			if (wcscmp(fieldName, L"boss_npc_section_5") == 0) return boss_npc_section[4];
			if (wcscmp(fieldName, L"boss_npc_section_6") == 0) return boss_npc_section[5];
			if (wcscmp(fieldName, L"boss_npc_section_7") == 0) return boss_npc_section[6];
			if (wcscmp(fieldName, L"boss_npc_section_8") == 0) return boss_npc_section[7];

			return std::any();
		}
		std::wstring GetFieldAsString(const wchar_t* fieldName) {
			if (wcscmp(fieldName, L"alias") == 0) return Data::AnyFieldToStringConverter::ToString(&alias);
			if (wcscmp(fieldName, L"name2") == 0) return Data::AnyFieldToStringConverter::ToString(&name2);
			if (wcscmp(fieldName, L"dungeon_type") == 0) return Data::AnyFieldToStringConverter::ToString(&dungeon_type);
			if (wcscmp(fieldName, L"group") == 0) return Data::AnyFieldToStringConverter::ToString(&group);
			if (wcscmp(fieldName, L"max_unbind_count") == 0) return Data::AnyFieldToStringConverter::ToString(&max_unbind_count);
			if (wcscmp(fieldName, L"reset_money") == 0) return Data::AnyFieldToStringConverter::ToString(&reset_money);
			if (wcscmp(fieldName, L"reset_item_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(reset_item[0]));
			if (wcscmp(fieldName, L"reset_item_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(reset_item[1]));
			if (wcscmp(fieldName, L"reset_item_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(reset_item[2]));
			if (wcscmp(fieldName, L"reset_item_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(reset_item[3]));
			if (wcscmp(fieldName, L"reset_item_count_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(reset_item_count[0]));
			if (wcscmp(fieldName, L"reset_item_count_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(reset_item_count[1]));
			if (wcscmp(fieldName, L"reset_item_count_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(reset_item_count[2]));
			if (wcscmp(fieldName, L"reset_item_count_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(reset_item_count[3]));
			if (wcscmp(fieldName, L"use_personal_binding") == 0) return Data::AnyFieldToStringConverter::ToString(&use_personal_binding);
			if (wcscmp(fieldName, L"personal_binding_slot") == 0) return Data::AnyFieldToStringConverter::ToString(&personal_binding_slot);
			if (wcscmp(fieldName, L"pc_max") == 0) return Data::AnyFieldToStringConverter::ToString(&pc_max);
			if (wcscmp(fieldName, L"required_level") == 0) return Data::AnyFieldToStringConverter::ToString(&required_level);
			if (wcscmp(fieldName, L"required_mastery_level") == 0) return Data::AnyFieldToStringConverter::ToString(&required_mastery_level);
			if (wcscmp(fieldName, L"required_preceding_quest_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(required_preceding_quest[0]));
			if (wcscmp(fieldName, L"required_preceding_quest_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(required_preceding_quest[1]));
			if (wcscmp(fieldName, L"required_preceding_quest_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(required_preceding_quest[2]));
			if (wcscmp(fieldName, L"required_preceding_quest_check") == 0) return Data::AnyFieldToStringConverter::ToString(&required_preceding_quest_check);
			if (wcscmp(fieldName, L"attraction_quest_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction_quest[0]));
			if (wcscmp(fieldName, L"attraction_quest_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction_quest[1]));
			if (wcscmp(fieldName, L"attraction_quest_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction_quest[2]));
			if (wcscmp(fieldName, L"attraction_quest_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction_quest[3]));
			if (wcscmp(fieldName, L"attraction_quest_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction_quest[4]));
			if (wcscmp(fieldName, L"attraction_quest_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction_quest[5]));
			if (wcscmp(fieldName, L"attraction_quest_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction_quest[6]));
			if (wcscmp(fieldName, L"attraction_quest_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction_quest[7]));
			if (wcscmp(fieldName, L"attraction_quest_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction_quest[8]));
			if (wcscmp(fieldName, L"attraction_quest_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(attraction_quest[9]));
			if (wcscmp(fieldName, L"enable_heart_count") == 0) return Data::AnyFieldToStringConverter::ToString(&enable_heart_count);
			if (wcscmp(fieldName, L"max_instant_heart_count") == 0) return Data::AnyFieldToStringConverter::ToString(&max_instant_heart_count);
			if (wcscmp(fieldName, L"effect_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(effect[0]));
			if (wcscmp(fieldName, L"effect_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(effect[1]));
			if (wcscmp(fieldName, L"effect_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(effect[2]));
			if (wcscmp(fieldName, L"step_count") == 0) return Data::AnyFieldToStringConverter::ToString(&step_count);
			if (wcscmp(fieldName, L"zone_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone[0]));
			if (wcscmp(fieldName, L"zone_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone[1]));
			if (wcscmp(fieldName, L"zone_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone[2]));
			if (wcscmp(fieldName, L"zone_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone[3]));
			if (wcscmp(fieldName, L"zone_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone[4]));
			if (wcscmp(fieldName, L"zone_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone[5]));
			if (wcscmp(fieldName, L"zone_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone[6]));
			if (wcscmp(fieldName, L"zone_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone[7]));
			if (wcscmp(fieldName, L"zone_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone[8]));
			if (wcscmp(fieldName, L"boss_npc_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc[0]));
			if (wcscmp(fieldName, L"boss_npc_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc[1]));
			if (wcscmp(fieldName, L"boss_npc_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc[2]));
			if (wcscmp(fieldName, L"boss_npc_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc[3]));
			if (wcscmp(fieldName, L"boss_npc_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc[4]));
			if (wcscmp(fieldName, L"boss_npc_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc[5]));
			if (wcscmp(fieldName, L"boss_npc_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc[6]));
			if (wcscmp(fieldName, L"boss_npc_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc[7]));
			if (wcscmp(fieldName, L"boss_npc_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc[8]));
			if (wcscmp(fieldName, L"zone_index_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone_index[0]));
			if (wcscmp(fieldName, L"zone_index_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone_index[1]));
			if (wcscmp(fieldName, L"zone_index_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone_index[2]));
			if (wcscmp(fieldName, L"zone_index_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone_index[3]));
			if (wcscmp(fieldName, L"zone_index_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone_index[4]));
			if (wcscmp(fieldName, L"zone_index_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone_index[5]));
			if (wcscmp(fieldName, L"zone_index_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone_index[6]));
			if (wcscmp(fieldName, L"zone_index_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone_index[7]));
			if (wcscmp(fieldName, L"zone_index_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(zone_index[8]));
			if (wcscmp(fieldName, L"dungeon_tap_name2") == 0) return Data::AnyFieldToStringConverter::ToString(&dungeon_tap_name2);
			if (wcscmp(fieldName, L"step_name2_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(step_name2[0]));
			if (wcscmp(fieldName, L"step_name2_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(step_name2[1]));
			if (wcscmp(fieldName, L"step_name2_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(step_name2[2]));
			if (wcscmp(fieldName, L"step_name2_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(step_name2[3]));
			if (wcscmp(fieldName, L"step_name2_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(step_name2[4]));
			if (wcscmp(fieldName, L"step_name2_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(step_name2[5]));
			if (wcscmp(fieldName, L"step_name2_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(step_name2[6]));
			if (wcscmp(fieldName, L"step_name2_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(step_name2[7]));
			if (wcscmp(fieldName, L"step_name2_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(step_name2[8]));
			if (wcscmp(fieldName, L"step_image_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(step_image[0]));
			if (wcscmp(fieldName, L"step_image_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(step_image[1]));
			if (wcscmp(fieldName, L"step_image_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(step_image[2]));
			if (wcscmp(fieldName, L"step_image_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(step_image[3]));
			if (wcscmp(fieldName, L"step_image_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(step_image[4]));
			if (wcscmp(fieldName, L"step_image_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(step_image[5]));
			if (wcscmp(fieldName, L"step_image_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(step_image[6]));
			if (wcscmp(fieldName, L"step_image_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(step_image[7]));
			if (wcscmp(fieldName, L"step_image_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(step_image[8]));
			if (wcscmp(fieldName, L"arena_minimap") == 0) return Data::AnyFieldToStringConverter::ToString(&arena_minimap);
			if (wcscmp(fieldName, L"raid_dungeon_desc") == 0) return Data::AnyFieldToStringConverter::ToString(&raid_dungeon_desc);
			if (wcscmp(fieldName, L"ui_text_grade") == 0) return Data::AnyFieldToStringConverter::ToString(&ui_text_grade);
			if (wcscmp(fieldName, L"reward_summary") == 0) return Data::AnyFieldToStringConverter::ToString(&reward_summary);
			if (wcscmp(fieldName, L"recommand_level_min") == 0) return Data::AnyFieldToStringConverter::ToString(&recommand_level_min);
			if (wcscmp(fieldName, L"recommand_level_max") == 0) return Data::AnyFieldToStringConverter::ToString(&recommand_level_max);
			if (wcscmp(fieldName, L"recommand_mastery_level_min") == 0) return Data::AnyFieldToStringConverter::ToString(&recommand_mastery_level_min);
			if (wcscmp(fieldName, L"recommand_mastery_level_max") == 0) return Data::AnyFieldToStringConverter::ToString(&recommand_mastery_level_max);
			if (wcscmp(fieldName, L"recommend_attack_power") == 0) return Data::AnyFieldToStringConverter::ToString(&recommend_attack_power);
			if (wcscmp(fieldName, L"standard_gear_weapon") == 0) return Data::AnyFieldToStringConverter::ToString(&standard_gear_weapon);
			if (wcscmp(fieldName, L"display_quests_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[0]));
			if (wcscmp(fieldName, L"display_quests_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[1]));
			if (wcscmp(fieldName, L"display_quests_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[2]));
			if (wcscmp(fieldName, L"display_quests_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[3]));
			if (wcscmp(fieldName, L"display_quests_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[4]));
			if (wcscmp(fieldName, L"display_quests_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[5]));
			if (wcscmp(fieldName, L"display_quests_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[6]));
			if (wcscmp(fieldName, L"display_quests_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[7]));
			if (wcscmp(fieldName, L"display_quests_9") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[8]));
			if (wcscmp(fieldName, L"display_quests_10") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[9]));
			if (wcscmp(fieldName, L"display_quests_11") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[10]));
			if (wcscmp(fieldName, L"display_quests_12") == 0) return Data::AnyFieldToStringConverter::ToString(&(display_quests[11]));
			if (wcscmp(fieldName, L"tactic") == 0) return Data::AnyFieldToStringConverter::ToString(&tactic);
			if (wcscmp(fieldName, L"recommend_alias") == 0) return Data::AnyFieldToStringConverter::ToString(&recommend_alias);
			if (wcscmp(fieldName, L"contents_reset") == 0) return Data::AnyFieldToStringConverter::ToString(&contents_reset);
			if (wcscmp(fieldName, L"boss_npc_alias_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_alias[0]));
			if (wcscmp(fieldName, L"boss_npc_alias_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_alias[1]));
			if (wcscmp(fieldName, L"boss_npc_alias_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_alias[2]));
			if (wcscmp(fieldName, L"boss_npc_alias_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_alias[3]));
			if (wcscmp(fieldName, L"boss_npc_alias_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_alias[4]));
			if (wcscmp(fieldName, L"boss_npc_alias_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_alias[5]));
			if (wcscmp(fieldName, L"boss_npc_alias_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_alias[6]));
			if (wcscmp(fieldName, L"boss_npc_alias_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_alias[7]));
			if (wcscmp(fieldName, L"boss_npc_section_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_section[0]));
			if (wcscmp(fieldName, L"boss_npc_section_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_section[1]));
			if (wcscmp(fieldName, L"boss_npc_section_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_section[2]));
			if (wcscmp(fieldName, L"boss_npc_section_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_section[3]));
			if (wcscmp(fieldName, L"boss_npc_section_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_section[4]));
			if (wcscmp(fieldName, L"boss_npc_section_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_section[5]));
			if (wcscmp(fieldName, L"boss_npc_section_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_section[6]));
			if (wcscmp(fieldName, L"boss_npc_section_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_npc_section[7]));

			return L"";
		}
		void AutoCorrectLookupOffsets(const char* lookupDataPtr) {
			if (reinterpret_cast<std::uintptr_t>(alias) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) alias = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(alias));
			else return;
			for (int i = 0; i < 9; i++) {
				if (reinterpret_cast<std::uintptr_t>(step_image[i]) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) step_image[i] = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(step_image[i]));
			}
			if (reinterpret_cast<std::uintptr_t>(arena_minimap) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) arena_minimap = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(arena_minimap));
		}
		union Key
		{
            struct {
                __int32 id;

            };
			unsigned __int64 key;
		};
		__declspec(align(8)) Key key;
		wchar_t* alias;
Data::TableRef name2;
int name2_tableId(){return 405;};
__int8 dungeon_type;
std::wstring dungeon_type_EnumValue() const {return Get_dungeon_type_EnumValue(dungeon_type);};
char Pad0[3];
Data::TableRef group;
int group_tableId(){return 16;};
__int8 max_unbind_count;
char Pad1[3];
__int32 reset_money;
Data::TableRef reset_item[4];
int reset_item_tableId(){return 189;};
__int8 reset_item_count[4];
bool use_personal_binding;
__int8 personal_binding_slot;
std::wstring personal_binding_slot_EnumValue() const {return Get_personal_binding_slot_EnumValue(personal_binding_slot);};
__int16 pc_max;
__int8 required_level;
__int8 required_mastery_level;
char Pad2[2];
Data::TableRef required_preceding_quest[3];
int required_preceding_quest_tableId(){return 283;};
__int8 required_preceding_quest_check;
std::wstring required_preceding_quest_check_EnumValue() const {return Get_required_preceding_quest_check_EnumValue(required_preceding_quest_check);};
char Pad3[3];
Data::TableRef attraction_quest[10];
int attraction_quest_tableId(){return 283;};
bool enable_heart_count;
__int8 max_instant_heart_count;
char Pad4[2];
Data::TableRef effect[3];
int effect_tableId(){return 111;};
__int8 step_count;
char Pad5[3];
Data::TableRef zone[9];
int zone_tableId(){return 443;};
Data::TableRef boss_npc[9];
int boss_npc_tableId(){return 255;};
__int8 zone_index[9];
char Pad6[3];
Data::TableRef dungeon_tap_name2;
int dungeon_tap_name2_tableId(){return 405;};
Data::TableRef step_name2[9];
int step_name2_tableId(){return 405;};
wchar_t* step_image[9];
wchar_t* arena_minimap;
Data::TableRef raid_dungeon_desc;
int raid_dungeon_desc_tableId(){return 405;};
__int8 ui_text_grade;
char Pad7[3];
Data::TableRef reward_summary;
int reward_summary_tableId(){return 18;};
__int8 recommand_level_min;
__int8 recommand_level_max;
__int8 recommand_mastery_level_min;
__int8 recommand_mastery_level_max;
__int16 recommend_attack_power;
char Pad8[2];
Data::TableRef standard_gear_weapon;
int standard_gear_weapon_tableId(){return 189;};
Data::TableRef display_quests[12];
int display_quests_tableId(){return 283;};
Data::TableRef tactic;
int tactic_tableId(){return 405;};
Data::TableRef recommend_alias;
int recommend_alias_tableId(){return 71;};
Data::TableRef contents_reset;
int contents_reset_tableId(){return 72;};
Data::TableRef boss_npc_alias[8];
int boss_npc_alias_tableId(){return 255;};
Data::TableRef boss_npc_section[8];
int boss_npc_section_tableId(){return 405;};

		static TableVersion Version() { return TableVersion(6, 12); }
		static __int16 TableId() { return 289; }
		static __int32 SubType() { return 0; }
	};
#pragma pack(pop)
#pragma pack(push, 1)
	struct __declspec(align(4)) raid_dungeon_RecordPtr // : DrRecordPtr
	{
		raid_dungeon_Record* _record;
		int _cacheChunkIndex;
		//__unaligned __declspec(align(1)) const Data::raid_dungeon_Record* _debug;
		bool _makeCopy;
	};
#pragma pack(pop)
}