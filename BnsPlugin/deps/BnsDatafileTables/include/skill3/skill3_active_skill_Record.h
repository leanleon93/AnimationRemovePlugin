/*
 Generated Code! Do not manually edit this code. Modify the generator instead.
*/
#pragma once
#include "AAA_skill3_RecordBase.h"

namespace Data {
#pragma pack(push, 1)
	struct skill3_active_skill_Record : skill3_Record
	{
	private:
		static std::wstring Get_attribute_EnumValue(__int8 value);
		static std::wstring Get_category_EnumValue(__int8 value);
		static std::wstring Get_flowtype_EnumValue(__int8 value);
		static std::wstring Get_skill_type_EnumValue(__int8 value);
		static std::wstring Get_hostile_type_EnumValue(__int8 value);
		static std::wstring Get_toggle_EnumValue(__int8 value);
		static std::wstring Get_skill_result_rule_EnumValue(__int8 value);
		static std::wstring Get_auto_skill_result_EnumValue(__int8 value);
		static std::wstring Get_cancel_by_override_skill_EnumValue(__int8 value);
		static std::wstring Get_recycle_group_EnumValue(__int8 value);
		static std::wstring Get_bound_recycle_group_EnumValue(__int8 value);
		static std::wstring Get_consume_hp_type_EnumValue(__int8 value);
		static std::wstring Get_consume_sp_type_EnumValue(__int8 value);
		static std::wstring Get_consume_summoned_hp_type_EnumValue(__int8 value);
		static std::wstring Get_replace_target_EnumValue(__int8 value);
		static std::wstring Get_exec_caster_effect_skill_result_1_EnumValue(__int8 value);
		static std::wstring Get_exec_caster_effect_skill_result_2_EnumValue(__int8 value);
		static std::wstring Get_exec_caster_effect_skill_result_3_EnumValue(__int8 value);
		static std::wstring Get_exec_caster_effect_skill_result_4_EnumValue(__int8 value);
		static std::wstring Get_exec_caster_effect_skill_result_5_EnumValue(__int8 value);
		static std::wstring Get_exec_caster_effect_skill_result_trigger_EnumValue(__int8 value);
		static std::wstring Get_perfect_dodge_EnumValue(__int8 value);
		static std::wstring Get_exec_gather_type_1_EnumValue(__int8 value);
		static std::wstring Get_exec_gather_type_2_EnumValue(__int8 value);
		static std::wstring Get_exec_gather_type_3_EnumValue(__int8 value);
		static std::wstring Get_exec_gather_type_4_EnumValue(__int8 value);
		static std::wstring Get_exec_gather_type_5_EnumValue(__int8 value);
		static std::wstring Get_trigger_gather_type_EnumValue(__int8 value);
		static std::wstring Get_simultaneous_group_EnumValue(__int8 value);
		static std::wstring Get_boss_resistible_skill_type_EnumValue(__int8 value);
		static std::wstring Get_boss_resistance_skill_cast_EnumValue(__int8 value);
		static std::wstring Get_boss_resistance_skill_exec_EnumValue(__int8 value);
		static std::wstring Get_boss_resistance_skill_finish_EnumValue(__int8 value);
		static std::wstring Get_resistance_skill_type_EnumValue(__int8 value);
		static std::wstring Get_auto_combat_npc_resistible_skill_type_EnumValue(__int8 value);
		static std::wstring Get_auto_combat_npc_resistance_skill_exec_EnumValue(__int8 value);
		static std::wstring Get_auto_combat_resistance_skill_type_EnumValue(__int8 value);
		static std::wstring Get_phantom_end_type_EnumValue(__int8 value);
		static std::wstring Get_summoned_weapon_type_EnumValue(__int8 value);
		static std::wstring Get_ground_type_EnumValue(__int8 value);
		static std::wstring Get_ui_sp_heal_type_EnumValue(__int8 value);
		static std::wstring Get_casting_target_EnumValue(__int8 value);
		static std::wstring Get_attach_bone_type_EnumValue(__int8 value);
	public:
		std::any GetField(const wchar_t* fieldName) const {
			auto baseResult = skill3_Record::GetField(fieldName);
			if (baseResult.has_value()) {
				return baseResult;
			}
			if (wcscmp(fieldName, L"attribute") == 0) return attribute;
			if (wcscmp(fieldName, L"attribute_1") == 0) return attribute[0];
			if (wcscmp(fieldName, L"attribute_2") == 0) return attribute[1];
			if (wcscmp(fieldName, L"attribute_3") == 0) return attribute[2];
			if (wcscmp(fieldName, L"attribute_4") == 0) return attribute[3];
			if (wcscmp(fieldName, L"category") == 0) return category;
			if (wcscmp(fieldName, L"flowtype") == 0) return flowtype;
			if (wcscmp(fieldName, L"skill_type") == 0) return skill_type;
			if (wcscmp(fieldName, L"campfire") == 0) return campfire;
			if (wcscmp(fieldName, L"dash_attribute") == 0) return dash_attribute;
			if (wcscmp(fieldName, L"sit_down") == 0) return sit_down;
			if (wcscmp(fieldName, L"hostile_type") == 0) return hostile_type;
			if (wcscmp(fieldName, L"target_filter") == 0) return target_filter;
			if (wcscmp(fieldName, L"gather_range") == 0) return gather_range;
			if (wcscmp(fieldName, L"hate") == 0) return hate;
			if (wcscmp(fieldName, L"toggle") == 0) return toggle;
			if (wcscmp(fieldName, L"switch_off_id") == 0) return switch_off_id;
			if (wcscmp(fieldName, L"passive_effect") == 0) return passive_effect;
			if (wcscmp(fieldName, L"passive_effect_1") == 0) return passive_effect[0];
			if (wcscmp(fieldName, L"passive_effect_2") == 0) return passive_effect[1];
			if (wcscmp(fieldName, L"passive_effect_3") == 0) return passive_effect[2];
			if (wcscmp(fieldName, L"passive_effect_4") == 0) return passive_effect[3];
			if (wcscmp(fieldName, L"passive_effect_5") == 0) return passive_effect[4];
			if (wcscmp(fieldName, L"passive_effect_6") == 0) return passive_effect[5];
			if (wcscmp(fieldName, L"passive_effect_7") == 0) return passive_effect[6];
			if (wcscmp(fieldName, L"passive_effect_8") == 0) return passive_effect[7];
			if (wcscmp(fieldName, L"result_controll") == 0) return result_controll;
			if (wcscmp(fieldName, L"skill_result_rule") == 0) return skill_result_rule;
			if (wcscmp(fieldName, L"auto_skill_result") == 0) return auto_skill_result;
			if (wcscmp(fieldName, L"cancel_by_override_skill") == 0) return cancel_by_override_skill;
			if (wcscmp(fieldName, L"combo_duration") == 0) return combo_duration;
			if (wcscmp(fieldName, L"save_combo") == 0) return save_combo;
			if (wcscmp(fieldName, L"children_skill") == 0) return children_skill;
			if (wcscmp(fieldName, L"children_skill_1") == 0) return children_skill[0];
			if (wcscmp(fieldName, L"children_skill_2") == 0) return children_skill[1];
			if (wcscmp(fieldName, L"children_skill_3") == 0) return children_skill[2];
			if (wcscmp(fieldName, L"children_skill_4") == 0) return children_skill[3];
			if (wcscmp(fieldName, L"children_skill_yaw_plus_angle") == 0) return children_skill_yaw_plus_angle;
			if (wcscmp(fieldName, L"children_skill_yaw_plus_angle_1") == 0) return children_skill_yaw_plus_angle[0];
			if (wcscmp(fieldName, L"children_skill_yaw_plus_angle_2") == 0) return children_skill_yaw_plus_angle[1];
			if (wcscmp(fieldName, L"children_skill_yaw_plus_angle_3") == 0) return children_skill_yaw_plus_angle[2];
			if (wcscmp(fieldName, L"children_skill_yaw_plus_angle_4") == 0) return children_skill_yaw_plus_angle[3];
			if (wcscmp(fieldName, L"cast_condition") == 0) return cast_condition;
			if (wcscmp(fieldName, L"cast_duration") == 0) return cast_duration;
			if (wcscmp(fieldName, L"cast_effect") == 0) return cast_effect;
			if (wcscmp(fieldName, L"cast_effect_1") == 0) return cast_effect[0];
			if (wcscmp(fieldName, L"cast_effect_2") == 0) return cast_effect[1];
			if (wcscmp(fieldName, L"cast_effect_3") == 0) return cast_effect[2];
			if (wcscmp(fieldName, L"cast_effect_4") == 0) return cast_effect[3];
			if (wcscmp(fieldName, L"cast_effect_5") == 0) return cast_effect[4];
			if (wcscmp(fieldName, L"cast_effect_6") == 0) return cast_effect[5];
			if (wcscmp(fieldName, L"cast_effect_to_my_summoned_summoner") == 0) return cast_effect_to_my_summoned_summoner;
			if (wcscmp(fieldName, L"cast_effect_to_my_summoned_summoner_1") == 0) return cast_effect_to_my_summoned_summoner[0];
			if (wcscmp(fieldName, L"cast_effect_to_my_summoned_summoner_2") == 0) return cast_effect_to_my_summoned_summoner[1];
			if (wcscmp(fieldName, L"cast_effect_to_my_summoned_summoner_3") == 0) return cast_effect_to_my_summoned_summoner[2];
			if (wcscmp(fieldName, L"cast_effect_to_my_summoned_summoner_4") == 0) return cast_effect_to_my_summoned_summoner[3];
			if (wcscmp(fieldName, L"throw_link_target") == 0) return throw_link_target;
			if (wcscmp(fieldName, L"casting_delay") == 0) return casting_delay;
			if (wcscmp(fieldName, L"fire_miss") == 0) return fire_miss;
			if (wcscmp(fieldName, L"is_condition_event_skill") == 0) return is_condition_event_skill;
			if (wcscmp(fieldName, L"global_recycle_group") == 0) return global_recycle_group;
			if (wcscmp(fieldName, L"global_recycle_group_duration") == 0) return global_recycle_group_duration;
			if (wcscmp(fieldName, L"recycle_group") == 0) return recycle_group;
			if (wcscmp(fieldName, L"recycle_group_id") == 0) return recycle_group_id;
			if (wcscmp(fieldName, L"recycle_group_duration") == 0) return recycle_group_duration;
			if (wcscmp(fieldName, L"bound_recycle_group") == 0) return bound_recycle_group;
			if (wcscmp(fieldName, L"bound_recycle_group_id") == 0) return bound_recycle_group_id;
			if (wcscmp(fieldName, L"consume_hp_value") == 0) return consume_hp_value;
			if (wcscmp(fieldName, L"consume_hp_type") == 0) return consume_hp_type;
			if (wcscmp(fieldName, L"consume_sp_value") == 0) return consume_sp_value;
			if (wcscmp(fieldName, L"consume_sp_value_1") == 0) return consume_sp_value[0];
			if (wcscmp(fieldName, L"consume_sp_value_2") == 0) return consume_sp_value[1];
			if (wcscmp(fieldName, L"consume_sp_type") == 0) return consume_sp_type;
			if (wcscmp(fieldName, L"consume_sp_type_1") == 0) return consume_sp_type[0];
			if (wcscmp(fieldName, L"consume_sp_type_2") == 0) return consume_sp_type[1];
			if (wcscmp(fieldName, L"consume_summoned_hp_value") == 0) return consume_summoned_hp_value;
			if (wcscmp(fieldName, L"consume_summoned_hp_type") == 0) return consume_summoned_hp_type;
			if (wcscmp(fieldName, L"target_kill_effect") == 0) return target_kill_effect;
			if (wcscmp(fieldName, L"target_kill_effect_1") == 0) return target_kill_effect[0];
			if (wcscmp(fieldName, L"target_kill_effect_2") == 0) return target_kill_effect[1];
			if (wcscmp(fieldName, L"target_kill_effect_3") == 0) return target_kill_effect[2];
			if (wcscmp(fieldName, L"target_kill_effect_4") == 0) return target_kill_effect[3];
			if (wcscmp(fieldName, L"gain_style_score") == 0) return gain_style_score;
			if (wcscmp(fieldName, L"max_style_score") == 0) return max_style_score;
			if (wcscmp(fieldName, L"style_duration") == 0) return style_duration;
			if (wcscmp(fieldName, L"clear_style_score") == 0) return clear_style_score;
			if (wcscmp(fieldName, L"replace_target") == 0) return replace_target;
			if (wcscmp(fieldName, L"flow_repeat") == 0) return flow_repeat;
			if (wcscmp(fieldName, L"expanded_flow_repeat_count") == 0) return expanded_flow_repeat_count;
			if (wcscmp(fieldName, L"expanded_flow_repeat_start_flow_step") == 0) return expanded_flow_repeat_start_flow_step;
			if (wcscmp(fieldName, L"cancel_flow_repeat_next_skill") == 0) return cancel_flow_repeat_next_skill;
			if (wcscmp(fieldName, L"occurrence_event_in_exec") == 0) return occurrence_event_in_exec;
			if (wcscmp(fieldName, L"occurrence_event_in_exec_1") == 0) return occurrence_event_in_exec[0];
			if (wcscmp(fieldName, L"occurrence_event_in_exec_2") == 0) return occurrence_event_in_exec[1];
			if (wcscmp(fieldName, L"occurrence_event_in_exec_3") == 0) return occurrence_event_in_exec[2];
			if (wcscmp(fieldName, L"occurrence_event_in_exec_4") == 0) return occurrence_event_in_exec[3];
			if (wcscmp(fieldName, L"occurrence_event_in_exec_5") == 0) return occurrence_event_in_exec[4];
			if (wcscmp(fieldName, L"occurrence_event_in_triggered") == 0) return occurrence_event_in_triggered;
			if (wcscmp(fieldName, L"occurrence_ui_skill_combo_event_in_exec") == 0) return occurrence_ui_skill_combo_event_in_exec;
			if (wcscmp(fieldName, L"occurrence_ui_skill_combo_event_in_exec_1") == 0) return occurrence_ui_skill_combo_event_in_exec[0];
			if (wcscmp(fieldName, L"occurrence_ui_skill_combo_event_in_exec_2") == 0) return occurrence_ui_skill_combo_event_in_exec[1];
			if (wcscmp(fieldName, L"occurrence_ui_skill_combo_event_in_exec_3") == 0) return occurrence_ui_skill_combo_event_in_exec[2];
			if (wcscmp(fieldName, L"occurrence_ui_skill_combo_event_in_exec_4") == 0) return occurrence_ui_skill_combo_event_in_exec[3];
			if (wcscmp(fieldName, L"occurrence_ui_skill_combo_event_in_exec_5") == 0) return occurrence_ui_skill_combo_event_in_exec[4];
			if (wcscmp(fieldName, L"swing_caster_effect_1") == 0) return swing_caster_effect_1;
			if (wcscmp(fieldName, L"swing_caster_effect_1_1") == 0) return swing_caster_effect_1[0];
			if (wcscmp(fieldName, L"swing_caster_effect_1_2") == 0) return swing_caster_effect_1[1];
			if (wcscmp(fieldName, L"swing_caster_effect_1_3") == 0) return swing_caster_effect_1[2];
			if (wcscmp(fieldName, L"swing_caster_effect_1_4") == 0) return swing_caster_effect_1[3];
			if (wcscmp(fieldName, L"swing_caster_effect_2") == 0) return swing_caster_effect_2;
			if (wcscmp(fieldName, L"swing_caster_effect_2_1") == 0) return swing_caster_effect_2[0];
			if (wcscmp(fieldName, L"swing_caster_effect_2_2") == 0) return swing_caster_effect_2[1];
			if (wcscmp(fieldName, L"swing_caster_effect_2_3") == 0) return swing_caster_effect_2[2];
			if (wcscmp(fieldName, L"swing_caster_effect_2_4") == 0) return swing_caster_effect_2[3];
			if (wcscmp(fieldName, L"swing_caster_effect_3") == 0) return swing_caster_effect_3;
			if (wcscmp(fieldName, L"swing_caster_effect_3_1") == 0) return swing_caster_effect_3[0];
			if (wcscmp(fieldName, L"swing_caster_effect_3_2") == 0) return swing_caster_effect_3[1];
			if (wcscmp(fieldName, L"swing_caster_effect_3_3") == 0) return swing_caster_effect_3[2];
			if (wcscmp(fieldName, L"swing_caster_effect_3_4") == 0) return swing_caster_effect_3[3];
			if (wcscmp(fieldName, L"swing_caster_effect_4") == 0) return swing_caster_effect_4;
			if (wcscmp(fieldName, L"swing_caster_effect_4_1") == 0) return swing_caster_effect_4[0];
			if (wcscmp(fieldName, L"swing_caster_effect_4_2") == 0) return swing_caster_effect_4[1];
			if (wcscmp(fieldName, L"swing_caster_effect_4_3") == 0) return swing_caster_effect_4[2];
			if (wcscmp(fieldName, L"swing_caster_effect_4_4") == 0) return swing_caster_effect_4[3];
			if (wcscmp(fieldName, L"swing_caster_effect_5") == 0) return swing_caster_effect_5;
			if (wcscmp(fieldName, L"swing_caster_effect_5_1") == 0) return swing_caster_effect_5[0];
			if (wcscmp(fieldName, L"swing_caster_effect_5_2") == 0) return swing_caster_effect_5[1];
			if (wcscmp(fieldName, L"swing_caster_effect_5_3") == 0) return swing_caster_effect_5[2];
			if (wcscmp(fieldName, L"swing_caster_effect_5_4") == 0) return swing_caster_effect_5[3];
			if (wcscmp(fieldName, L"exec_caster_effect_1") == 0) return exec_caster_effect_1;
			if (wcscmp(fieldName, L"exec_caster_effect_1_1") == 0) return exec_caster_effect_1[0];
			if (wcscmp(fieldName, L"exec_caster_effect_1_2") == 0) return exec_caster_effect_1[1];
			if (wcscmp(fieldName, L"exec_caster_effect_1_3") == 0) return exec_caster_effect_1[2];
			if (wcscmp(fieldName, L"exec_caster_effect_1_4") == 0) return exec_caster_effect_1[3];
			if (wcscmp(fieldName, L"exec_caster_effect_2") == 0) return exec_caster_effect_2;
			if (wcscmp(fieldName, L"exec_caster_effect_2_1") == 0) return exec_caster_effect_2[0];
			if (wcscmp(fieldName, L"exec_caster_effect_2_2") == 0) return exec_caster_effect_2[1];
			if (wcscmp(fieldName, L"exec_caster_effect_2_3") == 0) return exec_caster_effect_2[2];
			if (wcscmp(fieldName, L"exec_caster_effect_2_4") == 0) return exec_caster_effect_2[3];
			if (wcscmp(fieldName, L"exec_caster_effect_3") == 0) return exec_caster_effect_3;
			if (wcscmp(fieldName, L"exec_caster_effect_3_1") == 0) return exec_caster_effect_3[0];
			if (wcscmp(fieldName, L"exec_caster_effect_3_2") == 0) return exec_caster_effect_3[1];
			if (wcscmp(fieldName, L"exec_caster_effect_3_3") == 0) return exec_caster_effect_3[2];
			if (wcscmp(fieldName, L"exec_caster_effect_3_4") == 0) return exec_caster_effect_3[3];
			if (wcscmp(fieldName, L"exec_caster_effect_4") == 0) return exec_caster_effect_4;
			if (wcscmp(fieldName, L"exec_caster_effect_4_1") == 0) return exec_caster_effect_4[0];
			if (wcscmp(fieldName, L"exec_caster_effect_4_2") == 0) return exec_caster_effect_4[1];
			if (wcscmp(fieldName, L"exec_caster_effect_4_3") == 0) return exec_caster_effect_4[2];
			if (wcscmp(fieldName, L"exec_caster_effect_4_4") == 0) return exec_caster_effect_4[3];
			if (wcscmp(fieldName, L"exec_caster_effect_5") == 0) return exec_caster_effect_5;
			if (wcscmp(fieldName, L"exec_caster_effect_5_1") == 0) return exec_caster_effect_5[0];
			if (wcscmp(fieldName, L"exec_caster_effect_5_2") == 0) return exec_caster_effect_5[1];
			if (wcscmp(fieldName, L"exec_caster_effect_5_3") == 0) return exec_caster_effect_5[2];
			if (wcscmp(fieldName, L"exec_caster_effect_5_4") == 0) return exec_caster_effect_5[3];
			if (wcscmp(fieldName, L"exec_caster_effect_trigger") == 0) return exec_caster_effect_trigger;
			if (wcscmp(fieldName, L"exec_caster_effect_trigger_1") == 0) return exec_caster_effect_trigger[0];
			if (wcscmp(fieldName, L"exec_caster_effect_trigger_2") == 0) return exec_caster_effect_trigger[1];
			if (wcscmp(fieldName, L"exec_caster_effect_trigger_3") == 0) return exec_caster_effect_trigger[2];
			if (wcscmp(fieldName, L"exec_caster_effect_trigger_4") == 0) return exec_caster_effect_trigger[3];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_1") == 0) return exec_caster_effect_skill_result_1;
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_1_1") == 0) return exec_caster_effect_skill_result_1[0];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_1_2") == 0) return exec_caster_effect_skill_result_1[1];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_1_3") == 0) return exec_caster_effect_skill_result_1[2];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_1_4") == 0) return exec_caster_effect_skill_result_1[3];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_2") == 0) return exec_caster_effect_skill_result_2;
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_2_1") == 0) return exec_caster_effect_skill_result_2[0];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_2_2") == 0) return exec_caster_effect_skill_result_2[1];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_2_3") == 0) return exec_caster_effect_skill_result_2[2];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_2_4") == 0) return exec_caster_effect_skill_result_2[3];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_3") == 0) return exec_caster_effect_skill_result_3;
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_3_1") == 0) return exec_caster_effect_skill_result_3[0];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_3_2") == 0) return exec_caster_effect_skill_result_3[1];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_3_3") == 0) return exec_caster_effect_skill_result_3[2];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_3_4") == 0) return exec_caster_effect_skill_result_3[3];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_4") == 0) return exec_caster_effect_skill_result_4;
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_4_1") == 0) return exec_caster_effect_skill_result_4[0];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_4_2") == 0) return exec_caster_effect_skill_result_4[1];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_4_3") == 0) return exec_caster_effect_skill_result_4[2];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_4_4") == 0) return exec_caster_effect_skill_result_4[3];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_5") == 0) return exec_caster_effect_skill_result_5;
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_5_1") == 0) return exec_caster_effect_skill_result_5[0];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_5_2") == 0) return exec_caster_effect_skill_result_5[1];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_5_3") == 0) return exec_caster_effect_skill_result_5[2];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_5_4") == 0) return exec_caster_effect_skill_result_5[3];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_trigger") == 0) return exec_caster_effect_skill_result_trigger;
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_trigger_1") == 0) return exec_caster_effect_skill_result_trigger[0];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_trigger_2") == 0) return exec_caster_effect_skill_result_trigger[1];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_trigger_3") == 0) return exec_caster_effect_skill_result_trigger[2];
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_trigger_4") == 0) return exec_caster_effect_skill_result_trigger[3];
			if (wcscmp(fieldName, L"stop_skill_event_on_result") == 0) return stop_skill_event_on_result;
			if (wcscmp(fieldName, L"stop_skill_result_critical_hit") == 0) return stop_skill_result_critical_hit;
			if (wcscmp(fieldName, L"stop_next_skill_critical_hit") == 0) return stop_next_skill_critical_hit;
			if (wcscmp(fieldName, L"stop_skill_result_hit") == 0) return stop_skill_result_hit;
			if (wcscmp(fieldName, L"stop_next_skill_hit") == 0) return stop_next_skill_hit;
			if (wcscmp(fieldName, L"stop_skill_result_parry") == 0) return stop_skill_result_parry;
			if (wcscmp(fieldName, L"stop_next_skill_parry") == 0) return stop_next_skill_parry;
			if (wcscmp(fieldName, L"stop_skill_result_perfect_parry") == 0) return stop_skill_result_perfect_parry;
			if (wcscmp(fieldName, L"stop_next_skill_perfect_parry") == 0) return stop_next_skill_perfect_parry;
			if (wcscmp(fieldName, L"stop_skill_result_counter") == 0) return stop_skill_result_counter;
			if (wcscmp(fieldName, L"stop_next_skill_counter") == 0) return stop_next_skill_counter;
			if (wcscmp(fieldName, L"stop_skill_result_bounce") == 0) return stop_skill_result_bounce;
			if (wcscmp(fieldName, L"stop_next_skill_bounce") == 0) return stop_next_skill_bounce;
			if (wcscmp(fieldName, L"stop_skill_result_miss") == 0) return stop_skill_result_miss;
			if (wcscmp(fieldName, L"stop_next_skill_miss") == 0) return stop_next_skill_miss;
			if (wcscmp(fieldName, L"stop_skill_result_dodge") == 0) return stop_skill_result_dodge;
			if (wcscmp(fieldName, L"stop_next_skill_dodge") == 0) return stop_next_skill_dodge;
			if (wcscmp(fieldName, L"perfect_dodge") == 0) return perfect_dodge;
			if (wcscmp(fieldName, L"perfect_dodge_gather_range") == 0) return perfect_dodge_gather_range;
			if (wcscmp(fieldName, L"perfect_dodge_valid_duration") == 0) return perfect_dodge_valid_duration;
			if (wcscmp(fieldName, L"perfect_dodge_valid_duration_1") == 0) return perfect_dodge_valid_duration[0];
			if (wcscmp(fieldName, L"perfect_dodge_valid_duration_2") == 0) return perfect_dodge_valid_duration[1];
			if (wcscmp(fieldName, L"perfect_dodge_valid_duration_3") == 0) return perfect_dodge_valid_duration[2];
			if (wcscmp(fieldName, L"perfect_dodge_valid_duration_4") == 0) return perfect_dodge_valid_duration[3];
			if (wcscmp(fieldName, L"perfect_dodge_valid_duration_5") == 0) return perfect_dodge_valid_duration[4];
			if (wcscmp(fieldName, L"perfect_dodge_success_effect") == 0) return perfect_dodge_success_effect;
			if (wcscmp(fieldName, L"swing_duration_1") == 0) return swing_duration_1;
			if (wcscmp(fieldName, L"fly_speed_1") == 0) return fly_speed_1;
			if (wcscmp(fieldName, L"exec_duration_1") == 0) return exec_duration_1;
			if (wcscmp(fieldName, L"exec_gather_type_1") == 0) return exec_gather_type_1;
			if (wcscmp(fieldName, L"exec_negation_dir_gather_1") == 0) return exec_negation_dir_gather_1;
			if (wcscmp(fieldName, L"exec_target_angle_1") == 0) return exec_target_angle_1;
			if (wcscmp(fieldName, L"exec_target_offset_angle_1") == 0) return exec_target_offset_angle_1;
			if (wcscmp(fieldName, L"exec_target_offset_distance_1") == 0) return exec_target_offset_distance_1;
			if (wcscmp(fieldName, L"exec_effect_1") == 0) return exec_effect_1;
			if (wcscmp(fieldName, L"exec_effect_1_1") == 0) return exec_effect_1[0];
			if (wcscmp(fieldName, L"exec_effect_1_2") == 0) return exec_effect_1[1];
			if (wcscmp(fieldName, L"exec_effect_1_3") == 0) return exec_effect_1[2];
			if (wcscmp(fieldName, L"exec_effect_1_4") == 0) return exec_effect_1[3];
			if (wcscmp(fieldName, L"exec_effect_1_5") == 0) return exec_effect_1[4];
			if (wcscmp(fieldName, L"exec_effect_1_6") == 0) return exec_effect_1[5];
			if (wcscmp(fieldName, L"exec_effect_1_7") == 0) return exec_effect_1[6];
			if (wcscmp(fieldName, L"exec_effect_1_8") == 0) return exec_effect_1[7];
			if (wcscmp(fieldName, L"return_speed_1") == 0) return return_speed_1;
			if (wcscmp(fieldName, L"return_duration_1") == 0) return return_duration_1;
			if (wcscmp(fieldName, L"swing_duration_2") == 0) return swing_duration_2;
			if (wcscmp(fieldName, L"fly_speed_2") == 0) return fly_speed_2;
			if (wcscmp(fieldName, L"exec_duration_2") == 0) return exec_duration_2;
			if (wcscmp(fieldName, L"exec_gather_type_2") == 0) return exec_gather_type_2;
			if (wcscmp(fieldName, L"exec_negation_dir_gather_2") == 0) return exec_negation_dir_gather_2;
			if (wcscmp(fieldName, L"exec_target_angle_2") == 0) return exec_target_angle_2;
			if (wcscmp(fieldName, L"exec_target_offset_angle_2") == 0) return exec_target_offset_angle_2;
			if (wcscmp(fieldName, L"exec_target_offset_distance_2") == 0) return exec_target_offset_distance_2;
			if (wcscmp(fieldName, L"exec_effect_2") == 0) return exec_effect_2;
			if (wcscmp(fieldName, L"exec_effect_2_1") == 0) return exec_effect_2[0];
			if (wcscmp(fieldName, L"exec_effect_2_2") == 0) return exec_effect_2[1];
			if (wcscmp(fieldName, L"exec_effect_2_3") == 0) return exec_effect_2[2];
			if (wcscmp(fieldName, L"exec_effect_2_4") == 0) return exec_effect_2[3];
			if (wcscmp(fieldName, L"exec_effect_2_5") == 0) return exec_effect_2[4];
			if (wcscmp(fieldName, L"exec_effect_2_6") == 0) return exec_effect_2[5];
			if (wcscmp(fieldName, L"exec_effect_2_7") == 0) return exec_effect_2[6];
			if (wcscmp(fieldName, L"exec_effect_2_8") == 0) return exec_effect_2[7];
			if (wcscmp(fieldName, L"return_speed_2") == 0) return return_speed_2;
			if (wcscmp(fieldName, L"return_duration_2") == 0) return return_duration_2;
			if (wcscmp(fieldName, L"swing_duration_3") == 0) return swing_duration_3;
			if (wcscmp(fieldName, L"fly_speed_3") == 0) return fly_speed_3;
			if (wcscmp(fieldName, L"exec_duration_3") == 0) return exec_duration_3;
			if (wcscmp(fieldName, L"exec_gather_type_3") == 0) return exec_gather_type_3;
			if (wcscmp(fieldName, L"exec_negation_dir_gather_3") == 0) return exec_negation_dir_gather_3;
			if (wcscmp(fieldName, L"exec_target_angle_3") == 0) return exec_target_angle_3;
			if (wcscmp(fieldName, L"exec_target_offset_angle_3") == 0) return exec_target_offset_angle_3;
			if (wcscmp(fieldName, L"exec_target_offset_distance_3") == 0) return exec_target_offset_distance_3;
			if (wcscmp(fieldName, L"exec_effect_3") == 0) return exec_effect_3;
			if (wcscmp(fieldName, L"exec_effect_3_1") == 0) return exec_effect_3[0];
			if (wcscmp(fieldName, L"exec_effect_3_2") == 0) return exec_effect_3[1];
			if (wcscmp(fieldName, L"exec_effect_3_3") == 0) return exec_effect_3[2];
			if (wcscmp(fieldName, L"exec_effect_3_4") == 0) return exec_effect_3[3];
			if (wcscmp(fieldName, L"exec_effect_3_5") == 0) return exec_effect_3[4];
			if (wcscmp(fieldName, L"exec_effect_3_6") == 0) return exec_effect_3[5];
			if (wcscmp(fieldName, L"exec_effect_3_7") == 0) return exec_effect_3[6];
			if (wcscmp(fieldName, L"exec_effect_3_8") == 0) return exec_effect_3[7];
			if (wcscmp(fieldName, L"return_speed_3") == 0) return return_speed_3;
			if (wcscmp(fieldName, L"return_duration_3") == 0) return return_duration_3;
			if (wcscmp(fieldName, L"swing_duration_4") == 0) return swing_duration_4;
			if (wcscmp(fieldName, L"fly_speed_4") == 0) return fly_speed_4;
			if (wcscmp(fieldName, L"exec_duration_4") == 0) return exec_duration_4;
			if (wcscmp(fieldName, L"exec_gather_type_4") == 0) return exec_gather_type_4;
			if (wcscmp(fieldName, L"exec_negation_dir_gather_4") == 0) return exec_negation_dir_gather_4;
			if (wcscmp(fieldName, L"exec_target_angle_4") == 0) return exec_target_angle_4;
			if (wcscmp(fieldName, L"exec_target_offset_angle_4") == 0) return exec_target_offset_angle_4;
			if (wcscmp(fieldName, L"exec_target_offset_distance_4") == 0) return exec_target_offset_distance_4;
			if (wcscmp(fieldName, L"exec_effect_4") == 0) return exec_effect_4;
			if (wcscmp(fieldName, L"exec_effect_4_1") == 0) return exec_effect_4[0];
			if (wcscmp(fieldName, L"exec_effect_4_2") == 0) return exec_effect_4[1];
			if (wcscmp(fieldName, L"exec_effect_4_3") == 0) return exec_effect_4[2];
			if (wcscmp(fieldName, L"exec_effect_4_4") == 0) return exec_effect_4[3];
			if (wcscmp(fieldName, L"exec_effect_4_5") == 0) return exec_effect_4[4];
			if (wcscmp(fieldName, L"exec_effect_4_6") == 0) return exec_effect_4[5];
			if (wcscmp(fieldName, L"exec_effect_4_7") == 0) return exec_effect_4[6];
			if (wcscmp(fieldName, L"exec_effect_4_8") == 0) return exec_effect_4[7];
			if (wcscmp(fieldName, L"return_speed_4") == 0) return return_speed_4;
			if (wcscmp(fieldName, L"return_duration_4") == 0) return return_duration_4;
			if (wcscmp(fieldName, L"swing_duration_5") == 0) return swing_duration_5;
			if (wcscmp(fieldName, L"fly_speed_5") == 0) return fly_speed_5;
			if (wcscmp(fieldName, L"exec_duration_5") == 0) return exec_duration_5;
			if (wcscmp(fieldName, L"exec_gather_type_5") == 0) return exec_gather_type_5;
			if (wcscmp(fieldName, L"exec_negation_dir_gather_5") == 0) return exec_negation_dir_gather_5;
			if (wcscmp(fieldName, L"exec_target_angle_5") == 0) return exec_target_angle_5;
			if (wcscmp(fieldName, L"exec_target_offset_angle_5") == 0) return exec_target_offset_angle_5;
			if (wcscmp(fieldName, L"exec_target_offset_distance_5") == 0) return exec_target_offset_distance_5;
			if (wcscmp(fieldName, L"exec_effect_5") == 0) return exec_effect_5;
			if (wcscmp(fieldName, L"exec_effect_5_1") == 0) return exec_effect_5[0];
			if (wcscmp(fieldName, L"exec_effect_5_2") == 0) return exec_effect_5[1];
			if (wcscmp(fieldName, L"exec_effect_5_3") == 0) return exec_effect_5[2];
			if (wcscmp(fieldName, L"exec_effect_5_4") == 0) return exec_effect_5[3];
			if (wcscmp(fieldName, L"exec_effect_5_5") == 0) return exec_effect_5[4];
			if (wcscmp(fieldName, L"exec_effect_5_6") == 0) return exec_effect_5[5];
			if (wcscmp(fieldName, L"exec_effect_5_7") == 0) return exec_effect_5[6];
			if (wcscmp(fieldName, L"exec_effect_5_8") == 0) return exec_effect_5[7];
			if (wcscmp(fieldName, L"return_speed_5") == 0) return return_speed_5;
			if (wcscmp(fieldName, L"return_duration_5") == 0) return return_duration_5;
			if (wcscmp(fieldName, L"trigger_gather_type") == 0) return trigger_gather_type;
			if (wcscmp(fieldName, L"trigger_negation_dir_gather") == 0) return trigger_negation_dir_gather;
			if (wcscmp(fieldName, L"trigger_effect") == 0) return trigger_effect;
			if (wcscmp(fieldName, L"trigger_effect_1") == 0) return trigger_effect[0];
			if (wcscmp(fieldName, L"trigger_effect_2") == 0) return trigger_effect[1];
			if (wcscmp(fieldName, L"trigger_effect_3") == 0) return trigger_effect[2];
			if (wcscmp(fieldName, L"trigger_effect_4") == 0) return trigger_effect[3];
			if (wcscmp(fieldName, L"trigger_effect_5") == 0) return trigger_effect[4];
			if (wcscmp(fieldName, L"trigger_effect_6") == 0) return trigger_effect[5];
			if (wcscmp(fieldName, L"trigger_effect_7") == 0) return trigger_effect[6];
			if (wcscmp(fieldName, L"trigger_effect_8") == 0) return trigger_effect[7];
			if (wcscmp(fieldName, L"trigger_prev_skill") == 0) return trigger_prev_skill;
			if (wcscmp(fieldName, L"trigger_prev_skill_id") == 0) return trigger_prev_skill_id;
			if (wcscmp(fieldName, L"succession_prev_skill") == 0) return succession_prev_skill;
			if (wcscmp(fieldName, L"succession_prev_skill_id") == 0) return succession_prev_skill_id;
			if (wcscmp(fieldName, L"apply_sealed_dungeon_skill_duration") == 0) return apply_sealed_dungeon_skill_duration;
			if (wcscmp(fieldName, L"simultaneous_group") == 0) return simultaneous_group;
			if (wcscmp(fieldName, L"unnecessary_acquired") == 0) return unnecessary_acquired;
			if (wcscmp(fieldName, L"gather_view_index") == 0) return gather_view_index;
			if (wcscmp(fieldName, L"recommend_priority") == 0) return recommend_priority;
			if (wcscmp(fieldName, L"recommend_distance") == 0) return recommend_distance;
			if (wcscmp(fieldName, L"recommend_distance_min") == 0) return recommend_distance_min;
			if (wcscmp(fieldName, L"recommend_distance_max") == 0) return recommend_distance_max;
			if (wcscmp(fieldName, L"boss_resistible_skill_type") == 0) return boss_resistible_skill_type;
			if (wcscmp(fieldName, L"boss_resistible_skill_type_1") == 0) return boss_resistible_skill_type[0];
			if (wcscmp(fieldName, L"boss_resistible_skill_type_2") == 0) return boss_resistible_skill_type[1];
			if (wcscmp(fieldName, L"boss_resistible_skill_type_3") == 0) return boss_resistible_skill_type[2];
			if (wcscmp(fieldName, L"boss_resistible_skill_type_4") == 0) return boss_resistible_skill_type[3];
			if (wcscmp(fieldName, L"boss_resistible_skill_type_5") == 0) return boss_resistible_skill_type[4];
			if (wcscmp(fieldName, L"boss_resistible_skill_message") == 0) return boss_resistible_skill_message;
			if (wcscmp(fieldName, L"boss_resistance_skill_cast") == 0) return boss_resistance_skill_cast;
			if (wcscmp(fieldName, L"boss_resistance_skill_exec") == 0) return boss_resistance_skill_exec;
			if (wcscmp(fieldName, L"boss_resistance_skill_finish") == 0) return boss_resistance_skill_finish;
			if (wcscmp(fieldName, L"boss_resistance_skill_time_offset") == 0) return boss_resistance_skill_time_offset;
			if (wcscmp(fieldName, L"reset_boss_resistance_skill") == 0) return reset_boss_resistance_skill;
			if (wcscmp(fieldName, L"resistance_skill_type") == 0) return resistance_skill_type;
			if (wcscmp(fieldName, L"resistance_skill_priority") == 0) return resistance_skill_priority;
			if (wcscmp(fieldName, L"auto_combat_approach_skill") == 0) return auto_combat_approach_skill;
			if (wcscmp(fieldName, L"auto_combat_cannot_override") == 0) return auto_combat_cannot_override;
			if (wcscmp(fieldName, L"auto_combat_npc_resistible_skill_type") == 0) return auto_combat_npc_resistible_skill_type;
			if (wcscmp(fieldName, L"auto_combat_npc_resistible_skill_type_1") == 0) return auto_combat_npc_resistible_skill_type[0];
			if (wcscmp(fieldName, L"auto_combat_npc_resistible_skill_type_2") == 0) return auto_combat_npc_resistible_skill_type[1];
			if (wcscmp(fieldName, L"auto_combat_npc_resistible_skill_type_3") == 0) return auto_combat_npc_resistible_skill_type[2];
			if (wcscmp(fieldName, L"auto_combat_npc_resistible_skill_type_4") == 0) return auto_combat_npc_resistible_skill_type[3];
			if (wcscmp(fieldName, L"auto_combat_npc_resistible_skill_type_5") == 0) return auto_combat_npc_resistible_skill_type[4];
			if (wcscmp(fieldName, L"auto_combat_npc_resistance_skill_exec") == 0) return auto_combat_npc_resistance_skill_exec;
			if (wcscmp(fieldName, L"auto_combat_npc_resistance_skill_time_offset") == 0) return auto_combat_npc_resistance_skill_time_offset;
			if (wcscmp(fieldName, L"auto_combat_resistance_skill_type") == 0) return auto_combat_resistance_skill_type;
			if (wcscmp(fieldName, L"auto_combat_resistance_skill_priority") == 0) return auto_combat_resistance_skill_priority;
			if (wcscmp(fieldName, L"deactive_on_skill_fail") == 0) return deactive_on_skill_fail;
			if (wcscmp(fieldName, L"deactive_on_skill_fail_duration") == 0) return deactive_on_skill_fail_duration;
			if (wcscmp(fieldName, L"skip_damage_split") == 0) return skip_damage_split;
			if (wcscmp(fieldName, L"catch_casting_target_anim") == 0) return catch_casting_target_anim;
			if (wcscmp(fieldName, L"catch_attach_caster_anim") == 0) return catch_attach_caster_anim;
			if (wcscmp(fieldName, L"catch_attach_target_anim") == 0) return catch_attach_target_anim;
			if (wcscmp(fieldName, L"catch_detach_caster_anim") == 0) return catch_detach_caster_anim;
			if (wcscmp(fieldName, L"catch_detach_target_anim") == 0) return catch_detach_target_anim;
			if (wcscmp(fieldName, L"catch_detach_target_landing_anim") == 0) return catch_detach_target_landing_anim;
			if (wcscmp(fieldName, L"phantom_end_type") == 0) return phantom_end_type;
			if (wcscmp(fieldName, L"summoned_weapon_type") == 0) return summoned_weapon_type;
			if (wcscmp(fieldName, L"override_skill") == 0) return override_skill;
			if (wcscmp(fieldName, L"ground_type") == 0) return ground_type;
			if (wcscmp(fieldName, L"ui_show_force_instant_recycle") == 0) return ui_show_force_instant_recycle;
			if (wcscmp(fieldName, L"ui_show_recycle") == 0) return ui_show_recycle;
			if (wcscmp(fieldName, L"ui_show_recycle_simple_context_mode") == 0) return ui_show_recycle_simple_context_mode;
			if (wcscmp(fieldName, L"ui_recycle_icon") == 0) return ui_recycle_icon;
			if (wcscmp(fieldName, L"ui_recycle_name") == 0) return ui_recycle_name;
			if (wcscmp(fieldName, L"ui_recycle_description") == 0) return ui_recycle_description;
			if (wcscmp(fieldName, L"ui_sp_heal_value") == 0) return ui_sp_heal_value;
			if (wcscmp(fieldName, L"ui_sp_heal_type") == 0) return ui_sp_heal_type;
			if (wcscmp(fieldName, L"casting_target") == 0) return casting_target;
			if (wcscmp(fieldName, L"attach_bone_type") == 0) return attach_bone_type;
			if (wcscmp(fieldName, L"caster_attach_bone") == 0) return caster_attach_bone;
			if (wcscmp(fieldName, L"target_attach_bone") == 0) return target_attach_bone;
			if (wcscmp(fieldName, L"attach_bone_exec_step") == 0) return attach_bone_exec_step;
			if (wcscmp(fieldName, L"detach_bone_exec_step") == 0) return detach_bone_exec_step;
			if (wcscmp(fieldName, L"mesh_hide_exec_step") == 0) return mesh_hide_exec_step;
			if (wcscmp(fieldName, L"ui_next_combo") == 0) return ui_next_combo;
			if (wcscmp(fieldName, L"combo_start_point_flag") == 0) return combo_start_point_flag;
			if (wcscmp(fieldName, L"summoned_attack") == 0) return summoned_attack;
			if (wcscmp(fieldName, L"summoned_is_recall") == 0) return summoned_is_recall;
			if (wcscmp(fieldName, L"summoned_is_target_change") == 0) return summoned_is_target_change;
			if (wcscmp(fieldName, L"summoned_is_target_swoon") == 0) return summoned_is_target_swoon;
			if (wcscmp(fieldName, L"ui_show_effect_stack") == 0) return ui_show_effect_stack;
			if (wcscmp(fieldName, L"use_skill_message") == 0) return use_skill_message;
			if (wcscmp(fieldName, L"override_level") == 0) return override_level;
			if (wcscmp(fieldName, L"override_available_level") == 0) return override_available_level;
			if (wcscmp(fieldName, L"override_group") == 0) return override_group;
			if (wcscmp(fieldName, L"override_group_1") == 0) return override_group[0];
			if (wcscmp(fieldName, L"override_group_2") == 0) return override_group[1];
			if (wcscmp(fieldName, L"override_group_3") == 0) return override_group[2];
			if (wcscmp(fieldName, L"override_group_4") == 0) return override_group[3];
			if (wcscmp(fieldName, L"override_group_5") == 0) return override_group[4];
			if (wcscmp(fieldName, L"override_group_bit_flags") == 0) return override_group_bit_flags;

			return std::any();
		}
		std::wstring GetFieldAsString(const wchar_t* fieldName) {
			auto baseResult = skill3_Record::GetFieldAsString(fieldName);
			if (!baseResult.empty()) {
				return baseResult;
			}
			if (wcscmp(fieldName, L"attribute_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(attribute[0]));
			if (wcscmp(fieldName, L"attribute_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(attribute[1]));
			if (wcscmp(fieldName, L"attribute_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(attribute[2]));
			if (wcscmp(fieldName, L"attribute_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(attribute[3]));
			if (wcscmp(fieldName, L"category") == 0) return Data::AnyFieldToStringConverter::ToString(&category);
			if (wcscmp(fieldName, L"flowtype") == 0) return Data::AnyFieldToStringConverter::ToString(&flowtype);
			if (wcscmp(fieldName, L"skill_type") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_type);
			if (wcscmp(fieldName, L"campfire") == 0) return Data::AnyFieldToStringConverter::ToString(&campfire);
			if (wcscmp(fieldName, L"dash_attribute") == 0) return Data::AnyFieldToStringConverter::ToString(&dash_attribute);
			if (wcscmp(fieldName, L"sit_down") == 0) return Data::AnyFieldToStringConverter::ToString(&sit_down);
			if (wcscmp(fieldName, L"hostile_type") == 0) return Data::AnyFieldToStringConverter::ToString(&hostile_type);
			if (wcscmp(fieldName, L"target_filter") == 0) return Data::AnyFieldToStringConverter::ToString(&target_filter);
			if (wcscmp(fieldName, L"gather_range") == 0) return Data::AnyFieldToStringConverter::ToString(&gather_range);
			if (wcscmp(fieldName, L"hate") == 0) return Data::AnyFieldToStringConverter::ToString(&hate);
			if (wcscmp(fieldName, L"toggle") == 0) return Data::AnyFieldToStringConverter::ToString(&toggle);
			if (wcscmp(fieldName, L"switch_off_id") == 0) return Data::AnyFieldToStringConverter::ToString(&switch_off_id);
			if (wcscmp(fieldName, L"passive_effect_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(passive_effect[0]));
			if (wcscmp(fieldName, L"passive_effect_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(passive_effect[1]));
			if (wcscmp(fieldName, L"passive_effect_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(passive_effect[2]));
			if (wcscmp(fieldName, L"passive_effect_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(passive_effect[3]));
			if (wcscmp(fieldName, L"passive_effect_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(passive_effect[4]));
			if (wcscmp(fieldName, L"passive_effect_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(passive_effect[5]));
			if (wcscmp(fieldName, L"passive_effect_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(passive_effect[6]));
			if (wcscmp(fieldName, L"passive_effect_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(passive_effect[7]));
			if (wcscmp(fieldName, L"result_controll") == 0) return Data::AnyFieldToStringConverter::ToString(&result_controll);
			if (wcscmp(fieldName, L"skill_result_rule") == 0) return Data::AnyFieldToStringConverter::ToString(&skill_result_rule);
			if (wcscmp(fieldName, L"auto_skill_result") == 0) return Data::AnyFieldToStringConverter::ToString(&auto_skill_result);
			if (wcscmp(fieldName, L"cancel_by_override_skill") == 0) return Data::AnyFieldToStringConverter::ToString(&cancel_by_override_skill);
			if (wcscmp(fieldName, L"combo_duration") == 0) return Data::AnyFieldToStringConverter::ToString(&combo_duration);
			if (wcscmp(fieldName, L"save_combo") == 0) return Data::AnyFieldToStringConverter::ToString(&save_combo);
			if (wcscmp(fieldName, L"children_skill_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(children_skill[0]));
			if (wcscmp(fieldName, L"children_skill_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(children_skill[1]));
			if (wcscmp(fieldName, L"children_skill_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(children_skill[2]));
			if (wcscmp(fieldName, L"children_skill_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(children_skill[3]));
			if (wcscmp(fieldName, L"children_skill_yaw_plus_angle_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(children_skill_yaw_plus_angle[0]));
			if (wcscmp(fieldName, L"children_skill_yaw_plus_angle_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(children_skill_yaw_plus_angle[1]));
			if (wcscmp(fieldName, L"children_skill_yaw_plus_angle_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(children_skill_yaw_plus_angle[2]));
			if (wcscmp(fieldName, L"children_skill_yaw_plus_angle_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(children_skill_yaw_plus_angle[3]));
			if (wcscmp(fieldName, L"cast_condition") == 0) return Data::AnyFieldToStringConverter::ToString(&cast_condition);
			if (wcscmp(fieldName, L"cast_duration") == 0) return Data::AnyFieldToStringConverter::ToString(&cast_duration);
			if (wcscmp(fieldName, L"cast_effect_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(cast_effect[0]));
			if (wcscmp(fieldName, L"cast_effect_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(cast_effect[1]));
			if (wcscmp(fieldName, L"cast_effect_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(cast_effect[2]));
			if (wcscmp(fieldName, L"cast_effect_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(cast_effect[3]));
			if (wcscmp(fieldName, L"cast_effect_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(cast_effect[4]));
			if (wcscmp(fieldName, L"cast_effect_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(cast_effect[5]));
			if (wcscmp(fieldName, L"cast_effect_to_my_summoned_summoner_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(cast_effect_to_my_summoned_summoner[0]));
			if (wcscmp(fieldName, L"cast_effect_to_my_summoned_summoner_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(cast_effect_to_my_summoned_summoner[1]));
			if (wcscmp(fieldName, L"cast_effect_to_my_summoned_summoner_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(cast_effect_to_my_summoned_summoner[2]));
			if (wcscmp(fieldName, L"cast_effect_to_my_summoned_summoner_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(cast_effect_to_my_summoned_summoner[3]));
			if (wcscmp(fieldName, L"throw_link_target") == 0) return Data::AnyFieldToStringConverter::ToString(&throw_link_target);
			if (wcscmp(fieldName, L"casting_delay") == 0) return Data::AnyFieldToStringConverter::ToString(&casting_delay);
			if (wcscmp(fieldName, L"fire_miss") == 0) return Data::AnyFieldToStringConverter::ToString(&fire_miss);
			if (wcscmp(fieldName, L"is_condition_event_skill") == 0) return Data::AnyFieldToStringConverter::ToString(&is_condition_event_skill);
			if (wcscmp(fieldName, L"global_recycle_group") == 0) return Data::AnyFieldToStringConverter::ToString(&global_recycle_group);
			if (wcscmp(fieldName, L"global_recycle_group_duration") == 0) return Data::AnyFieldToStringConverter::ToString(&global_recycle_group_duration);
			if (wcscmp(fieldName, L"recycle_group") == 0) return Data::AnyFieldToStringConverter::ToString(&recycle_group);
			if (wcscmp(fieldName, L"recycle_group_id") == 0) return Data::AnyFieldToStringConverter::ToString(&recycle_group_id);
			if (wcscmp(fieldName, L"recycle_group_duration") == 0) return Data::AnyFieldToStringConverter::ToString(&recycle_group_duration);
			if (wcscmp(fieldName, L"bound_recycle_group") == 0) return Data::AnyFieldToStringConverter::ToString(&bound_recycle_group);
			if (wcscmp(fieldName, L"bound_recycle_group_id") == 0) return Data::AnyFieldToStringConverter::ToString(&bound_recycle_group_id);
			if (wcscmp(fieldName, L"consume_hp_value") == 0) return Data::AnyFieldToStringConverter::ToString(&consume_hp_value);
			if (wcscmp(fieldName, L"consume_hp_type") == 0) return Data::AnyFieldToStringConverter::ToString(&consume_hp_type);
			if (wcscmp(fieldName, L"consume_sp_value_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(consume_sp_value[0]));
			if (wcscmp(fieldName, L"consume_sp_value_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(consume_sp_value[1]));
			if (wcscmp(fieldName, L"consume_sp_type_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(consume_sp_type[0]));
			if (wcscmp(fieldName, L"consume_sp_type_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(consume_sp_type[1]));
			if (wcscmp(fieldName, L"consume_summoned_hp_value") == 0) return Data::AnyFieldToStringConverter::ToString(&consume_summoned_hp_value);
			if (wcscmp(fieldName, L"consume_summoned_hp_type") == 0) return Data::AnyFieldToStringConverter::ToString(&consume_summoned_hp_type);
			if (wcscmp(fieldName, L"target_kill_effect_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(target_kill_effect[0]));
			if (wcscmp(fieldName, L"target_kill_effect_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(target_kill_effect[1]));
			if (wcscmp(fieldName, L"target_kill_effect_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(target_kill_effect[2]));
			if (wcscmp(fieldName, L"target_kill_effect_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(target_kill_effect[3]));
			if (wcscmp(fieldName, L"gain_style_score") == 0) return Data::AnyFieldToStringConverter::ToString(&gain_style_score);
			if (wcscmp(fieldName, L"max_style_score") == 0) return Data::AnyFieldToStringConverter::ToString(&max_style_score);
			if (wcscmp(fieldName, L"style_duration") == 0) return Data::AnyFieldToStringConverter::ToString(&style_duration);
			if (wcscmp(fieldName, L"clear_style_score") == 0) return Data::AnyFieldToStringConverter::ToString(&clear_style_score);
			if (wcscmp(fieldName, L"replace_target") == 0) return Data::AnyFieldToStringConverter::ToString(&replace_target);
			if (wcscmp(fieldName, L"flow_repeat") == 0) return Data::AnyFieldToStringConverter::ToString(&flow_repeat);
			if (wcscmp(fieldName, L"expanded_flow_repeat_count") == 0) return Data::AnyFieldToStringConverter::ToString(&expanded_flow_repeat_count);
			if (wcscmp(fieldName, L"expanded_flow_repeat_start_flow_step") == 0) return Data::AnyFieldToStringConverter::ToString(&expanded_flow_repeat_start_flow_step);
			if (wcscmp(fieldName, L"cancel_flow_repeat_next_skill") == 0) return Data::AnyFieldToStringConverter::ToString(&cancel_flow_repeat_next_skill);
			if (wcscmp(fieldName, L"occurrence_event_in_exec_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(occurrence_event_in_exec[0]));
			if (wcscmp(fieldName, L"occurrence_event_in_exec_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(occurrence_event_in_exec[1]));
			if (wcscmp(fieldName, L"occurrence_event_in_exec_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(occurrence_event_in_exec[2]));
			if (wcscmp(fieldName, L"occurrence_event_in_exec_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(occurrence_event_in_exec[3]));
			if (wcscmp(fieldName, L"occurrence_event_in_exec_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(occurrence_event_in_exec[4]));
			if (wcscmp(fieldName, L"occurrence_event_in_triggered") == 0) return Data::AnyFieldToStringConverter::ToString(&occurrence_event_in_triggered);
			if (wcscmp(fieldName, L"occurrence_ui_skill_combo_event_in_exec_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(occurrence_ui_skill_combo_event_in_exec[0]));
			if (wcscmp(fieldName, L"occurrence_ui_skill_combo_event_in_exec_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(occurrence_ui_skill_combo_event_in_exec[1]));
			if (wcscmp(fieldName, L"occurrence_ui_skill_combo_event_in_exec_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(occurrence_ui_skill_combo_event_in_exec[2]));
			if (wcscmp(fieldName, L"occurrence_ui_skill_combo_event_in_exec_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(occurrence_ui_skill_combo_event_in_exec[3]));
			if (wcscmp(fieldName, L"occurrence_ui_skill_combo_event_in_exec_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(occurrence_ui_skill_combo_event_in_exec[4]));
			if (wcscmp(fieldName, L"swing_caster_effect_1_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(swing_caster_effect_1[0]));
			if (wcscmp(fieldName, L"swing_caster_effect_1_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(swing_caster_effect_1[1]));
			if (wcscmp(fieldName, L"swing_caster_effect_1_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(swing_caster_effect_1[2]));
			if (wcscmp(fieldName, L"swing_caster_effect_1_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(swing_caster_effect_1[3]));
			if (wcscmp(fieldName, L"swing_caster_effect_2_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(swing_caster_effect_2[0]));
			if (wcscmp(fieldName, L"swing_caster_effect_2_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(swing_caster_effect_2[1]));
			if (wcscmp(fieldName, L"swing_caster_effect_2_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(swing_caster_effect_2[2]));
			if (wcscmp(fieldName, L"swing_caster_effect_2_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(swing_caster_effect_2[3]));
			if (wcscmp(fieldName, L"swing_caster_effect_3_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(swing_caster_effect_3[0]));
			if (wcscmp(fieldName, L"swing_caster_effect_3_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(swing_caster_effect_3[1]));
			if (wcscmp(fieldName, L"swing_caster_effect_3_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(swing_caster_effect_3[2]));
			if (wcscmp(fieldName, L"swing_caster_effect_3_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(swing_caster_effect_3[3]));
			if (wcscmp(fieldName, L"swing_caster_effect_4_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(swing_caster_effect_4[0]));
			if (wcscmp(fieldName, L"swing_caster_effect_4_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(swing_caster_effect_4[1]));
			if (wcscmp(fieldName, L"swing_caster_effect_4_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(swing_caster_effect_4[2]));
			if (wcscmp(fieldName, L"swing_caster_effect_4_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(swing_caster_effect_4[3]));
			if (wcscmp(fieldName, L"swing_caster_effect_5_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(swing_caster_effect_5[0]));
			if (wcscmp(fieldName, L"swing_caster_effect_5_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(swing_caster_effect_5[1]));
			if (wcscmp(fieldName, L"swing_caster_effect_5_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(swing_caster_effect_5[2]));
			if (wcscmp(fieldName, L"swing_caster_effect_5_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(swing_caster_effect_5[3]));
			if (wcscmp(fieldName, L"exec_caster_effect_1_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_1[0]));
			if (wcscmp(fieldName, L"exec_caster_effect_1_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_1[1]));
			if (wcscmp(fieldName, L"exec_caster_effect_1_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_1[2]));
			if (wcscmp(fieldName, L"exec_caster_effect_1_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_1[3]));
			if (wcscmp(fieldName, L"exec_caster_effect_2_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_2[0]));
			if (wcscmp(fieldName, L"exec_caster_effect_2_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_2[1]));
			if (wcscmp(fieldName, L"exec_caster_effect_2_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_2[2]));
			if (wcscmp(fieldName, L"exec_caster_effect_2_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_2[3]));
			if (wcscmp(fieldName, L"exec_caster_effect_3_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_3[0]));
			if (wcscmp(fieldName, L"exec_caster_effect_3_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_3[1]));
			if (wcscmp(fieldName, L"exec_caster_effect_3_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_3[2]));
			if (wcscmp(fieldName, L"exec_caster_effect_3_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_3[3]));
			if (wcscmp(fieldName, L"exec_caster_effect_4_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_4[0]));
			if (wcscmp(fieldName, L"exec_caster_effect_4_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_4[1]));
			if (wcscmp(fieldName, L"exec_caster_effect_4_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_4[2]));
			if (wcscmp(fieldName, L"exec_caster_effect_4_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_4[3]));
			if (wcscmp(fieldName, L"exec_caster_effect_5_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_5[0]));
			if (wcscmp(fieldName, L"exec_caster_effect_5_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_5[1]));
			if (wcscmp(fieldName, L"exec_caster_effect_5_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_5[2]));
			if (wcscmp(fieldName, L"exec_caster_effect_5_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_5[3]));
			if (wcscmp(fieldName, L"exec_caster_effect_trigger_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_trigger[0]));
			if (wcscmp(fieldName, L"exec_caster_effect_trigger_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_trigger[1]));
			if (wcscmp(fieldName, L"exec_caster_effect_trigger_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_trigger[2]));
			if (wcscmp(fieldName, L"exec_caster_effect_trigger_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_trigger[3]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_1_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_1[0]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_1_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_1[1]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_1_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_1[2]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_1_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_1[3]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_2_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_2[0]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_2_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_2[1]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_2_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_2[2]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_2_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_2[3]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_3_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_3[0]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_3_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_3[1]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_3_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_3[2]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_3_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_3[3]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_4_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_4[0]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_4_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_4[1]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_4_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_4[2]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_4_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_4[3]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_5_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_5[0]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_5_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_5[1]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_5_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_5[2]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_5_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_5[3]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_trigger_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_trigger[0]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_trigger_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_trigger[1]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_trigger_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_trigger[2]));
			if (wcscmp(fieldName, L"exec_caster_effect_skill_result_trigger_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_caster_effect_skill_result_trigger[3]));
			if (wcscmp(fieldName, L"stop_skill_event_on_result") == 0) return Data::AnyFieldToStringConverter::ToString(&stop_skill_event_on_result);
			if (wcscmp(fieldName, L"stop_skill_result_critical_hit") == 0) return Data::AnyFieldToStringConverter::ToString(&stop_skill_result_critical_hit);
			if (wcscmp(fieldName, L"stop_next_skill_critical_hit") == 0) return Data::AnyFieldToStringConverter::ToString(&stop_next_skill_critical_hit);
			if (wcscmp(fieldName, L"stop_skill_result_hit") == 0) return Data::AnyFieldToStringConverter::ToString(&stop_skill_result_hit);
			if (wcscmp(fieldName, L"stop_next_skill_hit") == 0) return Data::AnyFieldToStringConverter::ToString(&stop_next_skill_hit);
			if (wcscmp(fieldName, L"stop_skill_result_parry") == 0) return Data::AnyFieldToStringConverter::ToString(&stop_skill_result_parry);
			if (wcscmp(fieldName, L"stop_next_skill_parry") == 0) return Data::AnyFieldToStringConverter::ToString(&stop_next_skill_parry);
			if (wcscmp(fieldName, L"stop_skill_result_perfect_parry") == 0) return Data::AnyFieldToStringConverter::ToString(&stop_skill_result_perfect_parry);
			if (wcscmp(fieldName, L"stop_next_skill_perfect_parry") == 0) return Data::AnyFieldToStringConverter::ToString(&stop_next_skill_perfect_parry);
			if (wcscmp(fieldName, L"stop_skill_result_counter") == 0) return Data::AnyFieldToStringConverter::ToString(&stop_skill_result_counter);
			if (wcscmp(fieldName, L"stop_next_skill_counter") == 0) return Data::AnyFieldToStringConverter::ToString(&stop_next_skill_counter);
			if (wcscmp(fieldName, L"stop_skill_result_bounce") == 0) return Data::AnyFieldToStringConverter::ToString(&stop_skill_result_bounce);
			if (wcscmp(fieldName, L"stop_next_skill_bounce") == 0) return Data::AnyFieldToStringConverter::ToString(&stop_next_skill_bounce);
			if (wcscmp(fieldName, L"stop_skill_result_miss") == 0) return Data::AnyFieldToStringConverter::ToString(&stop_skill_result_miss);
			if (wcscmp(fieldName, L"stop_next_skill_miss") == 0) return Data::AnyFieldToStringConverter::ToString(&stop_next_skill_miss);
			if (wcscmp(fieldName, L"stop_skill_result_dodge") == 0) return Data::AnyFieldToStringConverter::ToString(&stop_skill_result_dodge);
			if (wcscmp(fieldName, L"stop_next_skill_dodge") == 0) return Data::AnyFieldToStringConverter::ToString(&stop_next_skill_dodge);
			if (wcscmp(fieldName, L"perfect_dodge") == 0) return Data::AnyFieldToStringConverter::ToString(&perfect_dodge);
			if (wcscmp(fieldName, L"perfect_dodge_gather_range") == 0) return Data::AnyFieldToStringConverter::ToString(&perfect_dodge_gather_range);
			if (wcscmp(fieldName, L"perfect_dodge_valid_duration_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(perfect_dodge_valid_duration[0]));
			if (wcscmp(fieldName, L"perfect_dodge_valid_duration_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(perfect_dodge_valid_duration[1]));
			if (wcscmp(fieldName, L"perfect_dodge_valid_duration_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(perfect_dodge_valid_duration[2]));
			if (wcscmp(fieldName, L"perfect_dodge_valid_duration_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(perfect_dodge_valid_duration[3]));
			if (wcscmp(fieldName, L"perfect_dodge_valid_duration_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(perfect_dodge_valid_duration[4]));
			if (wcscmp(fieldName, L"perfect_dodge_success_effect") == 0) return Data::AnyFieldToStringConverter::ToString(&perfect_dodge_success_effect);
			if (wcscmp(fieldName, L"swing_duration_1") == 0) return Data::AnyFieldToStringConverter::ToString(&swing_duration_1);
			if (wcscmp(fieldName, L"fly_speed_1") == 0) return Data::AnyFieldToStringConverter::ToString(&fly_speed_1);
			if (wcscmp(fieldName, L"exec_duration_1") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_duration_1);
			if (wcscmp(fieldName, L"exec_gather_type_1") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_gather_type_1);
			if (wcscmp(fieldName, L"exec_negation_dir_gather_1") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_negation_dir_gather_1);
			if (wcscmp(fieldName, L"exec_target_angle_1") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_target_angle_1);
			if (wcscmp(fieldName, L"exec_target_offset_angle_1") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_target_offset_angle_1);
			if (wcscmp(fieldName, L"exec_target_offset_distance_1") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_target_offset_distance_1);
			if (wcscmp(fieldName, L"exec_effect_1_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_1[0]));
			if (wcscmp(fieldName, L"exec_effect_1_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_1[1]));
			if (wcscmp(fieldName, L"exec_effect_1_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_1[2]));
			if (wcscmp(fieldName, L"exec_effect_1_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_1[3]));
			if (wcscmp(fieldName, L"exec_effect_1_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_1[4]));
			if (wcscmp(fieldName, L"exec_effect_1_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_1[5]));
			if (wcscmp(fieldName, L"exec_effect_1_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_1[6]));
			if (wcscmp(fieldName, L"exec_effect_1_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_1[7]));
			if (wcscmp(fieldName, L"return_speed_1") == 0) return Data::AnyFieldToStringConverter::ToString(&return_speed_1);
			if (wcscmp(fieldName, L"return_duration_1") == 0) return Data::AnyFieldToStringConverter::ToString(&return_duration_1);
			if (wcscmp(fieldName, L"swing_duration_2") == 0) return Data::AnyFieldToStringConverter::ToString(&swing_duration_2);
			if (wcscmp(fieldName, L"fly_speed_2") == 0) return Data::AnyFieldToStringConverter::ToString(&fly_speed_2);
			if (wcscmp(fieldName, L"exec_duration_2") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_duration_2);
			if (wcscmp(fieldName, L"exec_gather_type_2") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_gather_type_2);
			if (wcscmp(fieldName, L"exec_negation_dir_gather_2") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_negation_dir_gather_2);
			if (wcscmp(fieldName, L"exec_target_angle_2") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_target_angle_2);
			if (wcscmp(fieldName, L"exec_target_offset_angle_2") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_target_offset_angle_2);
			if (wcscmp(fieldName, L"exec_target_offset_distance_2") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_target_offset_distance_2);
			if (wcscmp(fieldName, L"exec_effect_2_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_2[0]));
			if (wcscmp(fieldName, L"exec_effect_2_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_2[1]));
			if (wcscmp(fieldName, L"exec_effect_2_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_2[2]));
			if (wcscmp(fieldName, L"exec_effect_2_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_2[3]));
			if (wcscmp(fieldName, L"exec_effect_2_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_2[4]));
			if (wcscmp(fieldName, L"exec_effect_2_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_2[5]));
			if (wcscmp(fieldName, L"exec_effect_2_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_2[6]));
			if (wcscmp(fieldName, L"exec_effect_2_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_2[7]));
			if (wcscmp(fieldName, L"return_speed_2") == 0) return Data::AnyFieldToStringConverter::ToString(&return_speed_2);
			if (wcscmp(fieldName, L"return_duration_2") == 0) return Data::AnyFieldToStringConverter::ToString(&return_duration_2);
			if (wcscmp(fieldName, L"swing_duration_3") == 0) return Data::AnyFieldToStringConverter::ToString(&swing_duration_3);
			if (wcscmp(fieldName, L"fly_speed_3") == 0) return Data::AnyFieldToStringConverter::ToString(&fly_speed_3);
			if (wcscmp(fieldName, L"exec_duration_3") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_duration_3);
			if (wcscmp(fieldName, L"exec_gather_type_3") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_gather_type_3);
			if (wcscmp(fieldName, L"exec_negation_dir_gather_3") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_negation_dir_gather_3);
			if (wcscmp(fieldName, L"exec_target_angle_3") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_target_angle_3);
			if (wcscmp(fieldName, L"exec_target_offset_angle_3") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_target_offset_angle_3);
			if (wcscmp(fieldName, L"exec_target_offset_distance_3") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_target_offset_distance_3);
			if (wcscmp(fieldName, L"exec_effect_3_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_3[0]));
			if (wcscmp(fieldName, L"exec_effect_3_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_3[1]));
			if (wcscmp(fieldName, L"exec_effect_3_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_3[2]));
			if (wcscmp(fieldName, L"exec_effect_3_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_3[3]));
			if (wcscmp(fieldName, L"exec_effect_3_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_3[4]));
			if (wcscmp(fieldName, L"exec_effect_3_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_3[5]));
			if (wcscmp(fieldName, L"exec_effect_3_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_3[6]));
			if (wcscmp(fieldName, L"exec_effect_3_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_3[7]));
			if (wcscmp(fieldName, L"return_speed_3") == 0) return Data::AnyFieldToStringConverter::ToString(&return_speed_3);
			if (wcscmp(fieldName, L"return_duration_3") == 0) return Data::AnyFieldToStringConverter::ToString(&return_duration_3);
			if (wcscmp(fieldName, L"swing_duration_4") == 0) return Data::AnyFieldToStringConverter::ToString(&swing_duration_4);
			if (wcscmp(fieldName, L"fly_speed_4") == 0) return Data::AnyFieldToStringConverter::ToString(&fly_speed_4);
			if (wcscmp(fieldName, L"exec_duration_4") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_duration_4);
			if (wcscmp(fieldName, L"exec_gather_type_4") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_gather_type_4);
			if (wcscmp(fieldName, L"exec_negation_dir_gather_4") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_negation_dir_gather_4);
			if (wcscmp(fieldName, L"exec_target_angle_4") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_target_angle_4);
			if (wcscmp(fieldName, L"exec_target_offset_angle_4") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_target_offset_angle_4);
			if (wcscmp(fieldName, L"exec_target_offset_distance_4") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_target_offset_distance_4);
			if (wcscmp(fieldName, L"exec_effect_4_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_4[0]));
			if (wcscmp(fieldName, L"exec_effect_4_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_4[1]));
			if (wcscmp(fieldName, L"exec_effect_4_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_4[2]));
			if (wcscmp(fieldName, L"exec_effect_4_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_4[3]));
			if (wcscmp(fieldName, L"exec_effect_4_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_4[4]));
			if (wcscmp(fieldName, L"exec_effect_4_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_4[5]));
			if (wcscmp(fieldName, L"exec_effect_4_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_4[6]));
			if (wcscmp(fieldName, L"exec_effect_4_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_4[7]));
			if (wcscmp(fieldName, L"return_speed_4") == 0) return Data::AnyFieldToStringConverter::ToString(&return_speed_4);
			if (wcscmp(fieldName, L"return_duration_4") == 0) return Data::AnyFieldToStringConverter::ToString(&return_duration_4);
			if (wcscmp(fieldName, L"swing_duration_5") == 0) return Data::AnyFieldToStringConverter::ToString(&swing_duration_5);
			if (wcscmp(fieldName, L"fly_speed_5") == 0) return Data::AnyFieldToStringConverter::ToString(&fly_speed_5);
			if (wcscmp(fieldName, L"exec_duration_5") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_duration_5);
			if (wcscmp(fieldName, L"exec_gather_type_5") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_gather_type_5);
			if (wcscmp(fieldName, L"exec_negation_dir_gather_5") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_negation_dir_gather_5);
			if (wcscmp(fieldName, L"exec_target_angle_5") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_target_angle_5);
			if (wcscmp(fieldName, L"exec_target_offset_angle_5") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_target_offset_angle_5);
			if (wcscmp(fieldName, L"exec_target_offset_distance_5") == 0) return Data::AnyFieldToStringConverter::ToString(&exec_target_offset_distance_5);
			if (wcscmp(fieldName, L"exec_effect_5_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_5[0]));
			if (wcscmp(fieldName, L"exec_effect_5_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_5[1]));
			if (wcscmp(fieldName, L"exec_effect_5_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_5[2]));
			if (wcscmp(fieldName, L"exec_effect_5_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_5[3]));
			if (wcscmp(fieldName, L"exec_effect_5_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_5[4]));
			if (wcscmp(fieldName, L"exec_effect_5_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_5[5]));
			if (wcscmp(fieldName, L"exec_effect_5_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_5[6]));
			if (wcscmp(fieldName, L"exec_effect_5_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(exec_effect_5[7]));
			if (wcscmp(fieldName, L"return_speed_5") == 0) return Data::AnyFieldToStringConverter::ToString(&return_speed_5);
			if (wcscmp(fieldName, L"return_duration_5") == 0) return Data::AnyFieldToStringConverter::ToString(&return_duration_5);
			if (wcscmp(fieldName, L"trigger_gather_type") == 0) return Data::AnyFieldToStringConverter::ToString(&trigger_gather_type);
			if (wcscmp(fieldName, L"trigger_negation_dir_gather") == 0) return Data::AnyFieldToStringConverter::ToString(&trigger_negation_dir_gather);
			if (wcscmp(fieldName, L"trigger_effect_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(trigger_effect[0]));
			if (wcscmp(fieldName, L"trigger_effect_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(trigger_effect[1]));
			if (wcscmp(fieldName, L"trigger_effect_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(trigger_effect[2]));
			if (wcscmp(fieldName, L"trigger_effect_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(trigger_effect[3]));
			if (wcscmp(fieldName, L"trigger_effect_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(trigger_effect[4]));
			if (wcscmp(fieldName, L"trigger_effect_6") == 0) return Data::AnyFieldToStringConverter::ToString(&(trigger_effect[5]));
			if (wcscmp(fieldName, L"trigger_effect_7") == 0) return Data::AnyFieldToStringConverter::ToString(&(trigger_effect[6]));
			if (wcscmp(fieldName, L"trigger_effect_8") == 0) return Data::AnyFieldToStringConverter::ToString(&(trigger_effect[7]));
			if (wcscmp(fieldName, L"trigger_prev_skill") == 0) return Data::AnyFieldToStringConverter::ToString(&trigger_prev_skill);
			if (wcscmp(fieldName, L"trigger_prev_skill_id") == 0) return Data::AnyFieldToStringConverter::ToString(&trigger_prev_skill_id);
			if (wcscmp(fieldName, L"succession_prev_skill") == 0) return Data::AnyFieldToStringConverter::ToString(&succession_prev_skill);
			if (wcscmp(fieldName, L"succession_prev_skill_id") == 0) return Data::AnyFieldToStringConverter::ToString(&succession_prev_skill_id);
			if (wcscmp(fieldName, L"apply_sealed_dungeon_skill_duration") == 0) return Data::AnyFieldToStringConverter::ToString(&apply_sealed_dungeon_skill_duration);
			if (wcscmp(fieldName, L"simultaneous_group") == 0) return Data::AnyFieldToStringConverter::ToString(&simultaneous_group);
			if (wcscmp(fieldName, L"unnecessary_acquired") == 0) return Data::AnyFieldToStringConverter::ToString(&unnecessary_acquired);
			if (wcscmp(fieldName, L"gather_view_index") == 0) return Data::AnyFieldToStringConverter::ToString(&gather_view_index);
			if (wcscmp(fieldName, L"recommend_priority") == 0) return Data::AnyFieldToStringConverter::ToString(&recommend_priority);
			if (wcscmp(fieldName, L"recommend_distance") == 0) return Data::AnyFieldToStringConverter::ToString(&recommend_distance);
			if (wcscmp(fieldName, L"recommend_distance_min") == 0) return Data::AnyFieldToStringConverter::ToString(&recommend_distance_min);
			if (wcscmp(fieldName, L"recommend_distance_max") == 0) return Data::AnyFieldToStringConverter::ToString(&recommend_distance_max);
			if (wcscmp(fieldName, L"boss_resistible_skill_type_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_resistible_skill_type[0]));
			if (wcscmp(fieldName, L"boss_resistible_skill_type_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_resistible_skill_type[1]));
			if (wcscmp(fieldName, L"boss_resistible_skill_type_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_resistible_skill_type[2]));
			if (wcscmp(fieldName, L"boss_resistible_skill_type_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_resistible_skill_type[3]));
			if (wcscmp(fieldName, L"boss_resistible_skill_type_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(boss_resistible_skill_type[4]));
			if (wcscmp(fieldName, L"boss_resistible_skill_message") == 0) return Data::AnyFieldToStringConverter::ToString(&boss_resistible_skill_message);
			if (wcscmp(fieldName, L"boss_resistance_skill_cast") == 0) return Data::AnyFieldToStringConverter::ToString(&boss_resistance_skill_cast);
			if (wcscmp(fieldName, L"boss_resistance_skill_exec") == 0) return Data::AnyFieldToStringConverter::ToString(&boss_resistance_skill_exec);
			if (wcscmp(fieldName, L"boss_resistance_skill_finish") == 0) return Data::AnyFieldToStringConverter::ToString(&boss_resistance_skill_finish);
			if (wcscmp(fieldName, L"boss_resistance_skill_time_offset") == 0) return Data::AnyFieldToStringConverter::ToString(&boss_resistance_skill_time_offset);
			if (wcscmp(fieldName, L"reset_boss_resistance_skill") == 0) return Data::AnyFieldToStringConverter::ToString(&reset_boss_resistance_skill);
			if (wcscmp(fieldName, L"resistance_skill_type") == 0) return Data::AnyFieldToStringConverter::ToString(&resistance_skill_type);
			if (wcscmp(fieldName, L"resistance_skill_priority") == 0) return Data::AnyFieldToStringConverter::ToString(&resistance_skill_priority);
			if (wcscmp(fieldName, L"auto_combat_approach_skill") == 0) return Data::AnyFieldToStringConverter::ToString(&auto_combat_approach_skill);
			if (wcscmp(fieldName, L"auto_combat_cannot_override") == 0) return Data::AnyFieldToStringConverter::ToString(&auto_combat_cannot_override);
			if (wcscmp(fieldName, L"auto_combat_npc_resistible_skill_type_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(auto_combat_npc_resistible_skill_type[0]));
			if (wcscmp(fieldName, L"auto_combat_npc_resistible_skill_type_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(auto_combat_npc_resistible_skill_type[1]));
			if (wcscmp(fieldName, L"auto_combat_npc_resistible_skill_type_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(auto_combat_npc_resistible_skill_type[2]));
			if (wcscmp(fieldName, L"auto_combat_npc_resistible_skill_type_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(auto_combat_npc_resistible_skill_type[3]));
			if (wcscmp(fieldName, L"auto_combat_npc_resistible_skill_type_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(auto_combat_npc_resistible_skill_type[4]));
			if (wcscmp(fieldName, L"auto_combat_npc_resistance_skill_exec") == 0) return Data::AnyFieldToStringConverter::ToString(&auto_combat_npc_resistance_skill_exec);
			if (wcscmp(fieldName, L"auto_combat_npc_resistance_skill_time_offset") == 0) return Data::AnyFieldToStringConverter::ToString(&auto_combat_npc_resistance_skill_time_offset);
			if (wcscmp(fieldName, L"auto_combat_resistance_skill_type") == 0) return Data::AnyFieldToStringConverter::ToString(&auto_combat_resistance_skill_type);
			if (wcscmp(fieldName, L"auto_combat_resistance_skill_priority") == 0) return Data::AnyFieldToStringConverter::ToString(&auto_combat_resistance_skill_priority);
			if (wcscmp(fieldName, L"deactive_on_skill_fail") == 0) return Data::AnyFieldToStringConverter::ToString(&deactive_on_skill_fail);
			if (wcscmp(fieldName, L"deactive_on_skill_fail_duration") == 0) return Data::AnyFieldToStringConverter::ToString(&deactive_on_skill_fail_duration);
			if (wcscmp(fieldName, L"skip_damage_split") == 0) return Data::AnyFieldToStringConverter::ToString(&skip_damage_split);
			if (wcscmp(fieldName, L"catch_casting_target_anim") == 0) return Data::AnyFieldToStringConverter::ToString(&catch_casting_target_anim);
			if (wcscmp(fieldName, L"catch_attach_caster_anim") == 0) return Data::AnyFieldToStringConverter::ToString(&catch_attach_caster_anim);
			if (wcscmp(fieldName, L"catch_attach_target_anim") == 0) return Data::AnyFieldToStringConverter::ToString(&catch_attach_target_anim);
			if (wcscmp(fieldName, L"catch_detach_caster_anim") == 0) return Data::AnyFieldToStringConverter::ToString(&catch_detach_caster_anim);
			if (wcscmp(fieldName, L"catch_detach_target_anim") == 0) return Data::AnyFieldToStringConverter::ToString(&catch_detach_target_anim);
			if (wcscmp(fieldName, L"catch_detach_target_landing_anim") == 0) return Data::AnyFieldToStringConverter::ToString(&catch_detach_target_landing_anim);
			if (wcscmp(fieldName, L"phantom_end_type") == 0) return Data::AnyFieldToStringConverter::ToString(&phantom_end_type);
			if (wcscmp(fieldName, L"summoned_weapon_type") == 0) return Data::AnyFieldToStringConverter::ToString(&summoned_weapon_type);
			if (wcscmp(fieldName, L"override_skill") == 0) return Data::AnyFieldToStringConverter::ToString(&override_skill);
			if (wcscmp(fieldName, L"ground_type") == 0) return Data::AnyFieldToStringConverter::ToString(&ground_type);
			if (wcscmp(fieldName, L"ui_show_force_instant_recycle") == 0) return Data::AnyFieldToStringConverter::ToString(&ui_show_force_instant_recycle);
			if (wcscmp(fieldName, L"ui_show_recycle") == 0) return Data::AnyFieldToStringConverter::ToString(&ui_show_recycle);
			if (wcscmp(fieldName, L"ui_show_recycle_simple_context_mode") == 0) return Data::AnyFieldToStringConverter::ToString(&ui_show_recycle_simple_context_mode);
			if (wcscmp(fieldName, L"ui_recycle_icon") == 0) return Data::AnyFieldToStringConverter::ToString(&ui_recycle_icon);
			if (wcscmp(fieldName, L"ui_recycle_name") == 0) return Data::AnyFieldToStringConverter::ToString(&ui_recycle_name);
			if (wcscmp(fieldName, L"ui_recycle_description") == 0) return Data::AnyFieldToStringConverter::ToString(&ui_recycle_description);
			if (wcscmp(fieldName, L"ui_sp_heal_value") == 0) return Data::AnyFieldToStringConverter::ToString(&ui_sp_heal_value);
			if (wcscmp(fieldName, L"ui_sp_heal_type") == 0) return Data::AnyFieldToStringConverter::ToString(&ui_sp_heal_type);
			if (wcscmp(fieldName, L"casting_target") == 0) return Data::AnyFieldToStringConverter::ToString(&casting_target);
			if (wcscmp(fieldName, L"attach_bone_type") == 0) return Data::AnyFieldToStringConverter::ToString(&attach_bone_type);
			if (wcscmp(fieldName, L"caster_attach_bone") == 0) return Data::AnyFieldToStringConverter::ToString(&caster_attach_bone);
			if (wcscmp(fieldName, L"target_attach_bone") == 0) return Data::AnyFieldToStringConverter::ToString(&target_attach_bone);
			if (wcscmp(fieldName, L"attach_bone_exec_step") == 0) return Data::AnyFieldToStringConverter::ToString(&attach_bone_exec_step);
			if (wcscmp(fieldName, L"detach_bone_exec_step") == 0) return Data::AnyFieldToStringConverter::ToString(&detach_bone_exec_step);
			if (wcscmp(fieldName, L"mesh_hide_exec_step") == 0) return Data::AnyFieldToStringConverter::ToString(&mesh_hide_exec_step);
			if (wcscmp(fieldName, L"ui_next_combo") == 0) return Data::AnyFieldToStringConverter::ToString(&ui_next_combo);
			if (wcscmp(fieldName, L"combo_start_point_flag") == 0) return Data::AnyFieldToStringConverter::ToString(&combo_start_point_flag);
			if (wcscmp(fieldName, L"summoned_attack") == 0) return Data::AnyFieldToStringConverter::ToString(&summoned_attack);
			if (wcscmp(fieldName, L"summoned_is_recall") == 0) return Data::AnyFieldToStringConverter::ToString(&summoned_is_recall);
			if (wcscmp(fieldName, L"summoned_is_target_change") == 0) return Data::AnyFieldToStringConverter::ToString(&summoned_is_target_change);
			if (wcscmp(fieldName, L"summoned_is_target_swoon") == 0) return Data::AnyFieldToStringConverter::ToString(&summoned_is_target_swoon);
			if (wcscmp(fieldName, L"ui_show_effect_stack") == 0) return Data::AnyFieldToStringConverter::ToString(&ui_show_effect_stack);
			if (wcscmp(fieldName, L"use_skill_message") == 0) return Data::AnyFieldToStringConverter::ToString(&use_skill_message);
			if (wcscmp(fieldName, L"override_level") == 0) return Data::AnyFieldToStringConverter::ToString(&override_level);
			if (wcscmp(fieldName, L"override_available_level") == 0) return Data::AnyFieldToStringConverter::ToString(&override_available_level);
			if (wcscmp(fieldName, L"override_group_1") == 0) return Data::AnyFieldToStringConverter::ToString(&(override_group[0]));
			if (wcscmp(fieldName, L"override_group_2") == 0) return Data::AnyFieldToStringConverter::ToString(&(override_group[1]));
			if (wcscmp(fieldName, L"override_group_3") == 0) return Data::AnyFieldToStringConverter::ToString(&(override_group[2]));
			if (wcscmp(fieldName, L"override_group_4") == 0) return Data::AnyFieldToStringConverter::ToString(&(override_group[3]));
			if (wcscmp(fieldName, L"override_group_5") == 0) return Data::AnyFieldToStringConverter::ToString(&(override_group[4]));
			if (wcscmp(fieldName, L"override_group_bit_flags") == 0) return Data::AnyFieldToStringConverter::ToString(&override_group_bit_flags);

			return L"";
		}
		void AutoCorrectLookupOffsets(const char* lookupDataPtr) {
			skill3_Record::AutoCorrectLookupOffsets(lookupDataPtr);
			if (reinterpret_cast<std::uintptr_t>(catch_casting_target_anim) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) catch_casting_target_anim = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(catch_casting_target_anim));
			else return;
			if (reinterpret_cast<std::uintptr_t>(catch_attach_caster_anim) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) catch_attach_caster_anim = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(catch_attach_caster_anim));
			if (reinterpret_cast<std::uintptr_t>(catch_attach_target_anim) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) catch_attach_target_anim = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(catch_attach_target_anim));
			if (reinterpret_cast<std::uintptr_t>(catch_detach_caster_anim) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) catch_detach_caster_anim = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(catch_detach_caster_anim));
			if (reinterpret_cast<std::uintptr_t>(catch_detach_target_anim) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) catch_detach_target_anim = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(catch_detach_target_anim));
			if (reinterpret_cast<std::uintptr_t>(catch_detach_target_landing_anim) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) catch_detach_target_landing_anim = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(catch_detach_target_landing_anim));
			if (reinterpret_cast<std::uintptr_t>(caster_attach_bone) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) caster_attach_bone = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(caster_attach_bone));
			if (reinterpret_cast<std::uintptr_t>(target_attach_bone) < reinterpret_cast<std::uintptr_t>(lookupDataPtr)) target_attach_bone = reinterpret_cast<wchar_t*>(const_cast<char*>(lookupDataPtr) + reinterpret_cast<std::uintptr_t>(target_attach_bone));
		}
		__int8 attribute[4];
std::wstring attribute_EnumValue(int index) const {return Get_attribute_EnumValue(attribute[index]);};
__int8 category;
std::wstring category_EnumValue() const {return Get_category_EnumValue(category);};
__int8 flowtype;
std::wstring flowtype_EnumValue() const {return Get_flowtype_EnumValue(flowtype);};
__int8 skill_type;
std::wstring skill_type_EnumValue() const {return Get_skill_type_EnumValue(skill_type);};
char Pad_sub_0[1];
Data::TableRef campfire;
int campfire_tableId(){return 47;};
Data::TableRef dash_attribute;
int dash_attribute_tableId(){return 334;};
bool sit_down;
__int8 hostile_type;
std::wstring hostile_type_EnumValue() const {return Get_hostile_type_EnumValue(hostile_type);};
char Pad_sub_1[2];
Data::TableRef target_filter;
int target_filter_tableId(){return 349;};
Data::TableRef gather_range;
int gather_range_tableId(){return 336;};
__int16 hate;
__int8 toggle;
std::wstring toggle_EnumValue() const {return Get_toggle_EnumValue(toggle);};
char Pad_sub_2[1];
Data::TableRef switch_off_id;
int switch_off_id_tableId(){return 324;};
Data::TableRef passive_effect[8];
int passive_effect_tableId(){return 111;};
Data::TableRef result_controll;
int result_controll_tableId(){return 342;};
__int8 skill_result_rule;
std::wstring skill_result_rule_EnumValue() const {return Get_skill_result_rule_EnumValue(skill_result_rule);};
__int8 auto_skill_result;
std::wstring auto_skill_result_EnumValue() const {return Get_auto_skill_result_EnumValue(auto_skill_result);};
__int8 cancel_by_override_skill;
std::wstring cancel_by_override_skill_EnumValue() const {return Get_cancel_by_override_skill_EnumValue(cancel_by_override_skill);};
char Pad_sub_3[1];
__int32 combo_duration;
bool save_combo;
char Pad_sub_4[3];
Data::TableRef children_skill[4];
int children_skill_tableId(){return 324;};
__int16 children_skill_yaw_plus_angle[4];
Data::TableRef cast_condition;
int cast_condition_tableId(){return 331;};
__int32 cast_duration;
Data::TableRef cast_effect[6];
int cast_effect_tableId(){return 111;};
Data::TableRef cast_effect_to_my_summoned_summoner[4];
int cast_effect_to_my_summoned_summoner_tableId(){return 111;};
bool throw_link_target;
bool casting_delay;
bool fire_miss;
bool is_condition_event_skill;
__int8 global_recycle_group;
char Pad_sub_5[3];
__int32 global_recycle_group_duration;
__int8 recycle_group;
std::wstring recycle_group_EnumValue() const {return Get_recycle_group_EnumValue(recycle_group);};
__int8 recycle_group_id;
char Pad_sub_6[2];
__int32 recycle_group_duration;
__int8 bound_recycle_group;
std::wstring bound_recycle_group_EnumValue() const {return Get_bound_recycle_group_EnumValue(bound_recycle_group);};
__int8 bound_recycle_group_id;
__int16 consume_hp_value;
__int8 consume_hp_type;
std::wstring consume_hp_type_EnumValue() const {return Get_consume_hp_type_EnumValue(consume_hp_type);};
char Pad_sub_7[1];
__int16 consume_sp_value[2];
__int8 consume_sp_type[2];
std::wstring consume_sp_type_EnumValue(int index) const {return Get_consume_sp_type_EnumValue(consume_sp_type[index]);};
__int16 consume_summoned_hp_value;
__int8 consume_summoned_hp_type;
std::wstring consume_summoned_hp_type_EnumValue() const {return Get_consume_summoned_hp_type_EnumValue(consume_summoned_hp_type);};
char Pad_sub_8[1];
Data::TableRef target_kill_effect[4];
int target_kill_effect_tableId(){return 111;};
__int16 gain_style_score;
__int16 max_style_score;
__int32 style_duration;
bool clear_style_score;
__int8 replace_target;
std::wstring replace_target_EnumValue() const {return Get_replace_target_EnumValue(replace_target);};
__int8 flow_repeat;
__int8 expanded_flow_repeat_count;
__int8 expanded_flow_repeat_start_flow_step;
char Pad_sub_9[3];
Data::TableRef cancel_flow_repeat_next_skill;
int cancel_flow_repeat_next_skill_tableId(){return 324;};
bool occurrence_event_in_exec[5];
bool occurrence_event_in_triggered;
bool occurrence_ui_skill_combo_event_in_exec[5];
char Pad_sub_10[1];
Data::TableRef swing_caster_effect_1[4];
int swing_caster_effect_1_tableId(){return 111;};
Data::TableRef swing_caster_effect_2[4];
int swing_caster_effect_2_tableId(){return 111;};
Data::TableRef swing_caster_effect_3[4];
int swing_caster_effect_3_tableId(){return 111;};
Data::TableRef swing_caster_effect_4[4];
int swing_caster_effect_4_tableId(){return 111;};
Data::TableRef swing_caster_effect_5[4];
int swing_caster_effect_5_tableId(){return 111;};
Data::TableRef exec_caster_effect_1[4];
int exec_caster_effect_1_tableId(){return 111;};
Data::TableRef exec_caster_effect_2[4];
int exec_caster_effect_2_tableId(){return 111;};
Data::TableRef exec_caster_effect_3[4];
int exec_caster_effect_3_tableId(){return 111;};
Data::TableRef exec_caster_effect_4[4];
int exec_caster_effect_4_tableId(){return 111;};
Data::TableRef exec_caster_effect_5[4];
int exec_caster_effect_5_tableId(){return 111;};
Data::TableRef exec_caster_effect_trigger[4];
int exec_caster_effect_trigger_tableId(){return 111;};
__int8 exec_caster_effect_skill_result_1[4];
std::wstring exec_caster_effect_skill_result_1_EnumValue(int index) const {return Get_exec_caster_effect_skill_result_1_EnumValue(exec_caster_effect_skill_result_1[index]);};
__int8 exec_caster_effect_skill_result_2[4];
std::wstring exec_caster_effect_skill_result_2_EnumValue(int index) const {return Get_exec_caster_effect_skill_result_2_EnumValue(exec_caster_effect_skill_result_2[index]);};
__int8 exec_caster_effect_skill_result_3[4];
std::wstring exec_caster_effect_skill_result_3_EnumValue(int index) const {return Get_exec_caster_effect_skill_result_3_EnumValue(exec_caster_effect_skill_result_3[index]);};
__int8 exec_caster_effect_skill_result_4[4];
std::wstring exec_caster_effect_skill_result_4_EnumValue(int index) const {return Get_exec_caster_effect_skill_result_4_EnumValue(exec_caster_effect_skill_result_4[index]);};
__int8 exec_caster_effect_skill_result_5[4];
std::wstring exec_caster_effect_skill_result_5_EnumValue(int index) const {return Get_exec_caster_effect_skill_result_5_EnumValue(exec_caster_effect_skill_result_5[index]);};
__int8 exec_caster_effect_skill_result_trigger[4];
std::wstring exec_caster_effect_skill_result_trigger_EnumValue(int index) const {return Get_exec_caster_effect_skill_result_trigger_EnumValue(exec_caster_effect_skill_result_trigger[index]);};
bool stop_skill_event_on_result;
bool stop_skill_result_critical_hit;
char Pad_sub_11[2];
Data::TableRef stop_next_skill_critical_hit;
int stop_next_skill_critical_hit_tableId(){return 324;};
bool stop_skill_result_hit;
char Pad_sub_12[3];
Data::TableRef stop_next_skill_hit;
int stop_next_skill_hit_tableId(){return 324;};
bool stop_skill_result_parry;
char Pad_sub_13[3];
Data::TableRef stop_next_skill_parry;
int stop_next_skill_parry_tableId(){return 324;};
bool stop_skill_result_perfect_parry;
char Pad_sub_14[3];
Data::TableRef stop_next_skill_perfect_parry;
int stop_next_skill_perfect_parry_tableId(){return 324;};
bool stop_skill_result_counter;
char Pad_sub_15[3];
Data::TableRef stop_next_skill_counter;
int stop_next_skill_counter_tableId(){return 324;};
bool stop_skill_result_bounce;
char Pad_sub_16[3];
Data::TableRef stop_next_skill_bounce;
int stop_next_skill_bounce_tableId(){return 324;};
bool stop_skill_result_miss;
char Pad_sub_17[3];
Data::TableRef stop_next_skill_miss;
int stop_next_skill_miss_tableId(){return 324;};
bool stop_skill_result_dodge;
char Pad_sub_18[3];
Data::TableRef stop_next_skill_dodge;
int stop_next_skill_dodge_tableId(){return 324;};
__int8 perfect_dodge;
std::wstring perfect_dodge_EnumValue() const {return Get_perfect_dodge_EnumValue(perfect_dodge);};
char Pad_sub_19[3];
Data::TableRef perfect_dodge_gather_range;
int perfect_dodge_gather_range_tableId(){return 336;};
__int32 perfect_dodge_valid_duration[5];
Data::TableRef perfect_dodge_success_effect;
int perfect_dodge_success_effect_tableId(){return 111;};
__int32 swing_duration_1;
__int16 fly_speed_1;
char Pad_sub_20[2];
__int32 exec_duration_1;
__int8 exec_gather_type_1;
std::wstring exec_gather_type_1_EnumValue() const {return Get_exec_gather_type_1_EnumValue(exec_gather_type_1);};
bool exec_negation_dir_gather_1;
__int16 exec_target_angle_1;
__int16 exec_target_offset_angle_1;
__int16 exec_target_offset_distance_1;
Data::TableRef exec_effect_1[8];
int exec_effect_1_tableId(){return 112;};
__int16 return_speed_1;
char Pad_sub_21[2];
__int32 return_duration_1;
__int32 swing_duration_2;
__int16 fly_speed_2;
char Pad_sub_22[2];
__int32 exec_duration_2;
__int8 exec_gather_type_2;
std::wstring exec_gather_type_2_EnumValue() const {return Get_exec_gather_type_2_EnumValue(exec_gather_type_2);};
bool exec_negation_dir_gather_2;
__int16 exec_target_angle_2;
__int16 exec_target_offset_angle_2;
__int16 exec_target_offset_distance_2;
Data::TableRef exec_effect_2[8];
int exec_effect_2_tableId(){return 112;};
__int16 return_speed_2;
char Pad_sub_23[2];
__int32 return_duration_2;
__int32 swing_duration_3;
__int16 fly_speed_3;
char Pad_sub_24[2];
__int32 exec_duration_3;
__int8 exec_gather_type_3;
std::wstring exec_gather_type_3_EnumValue() const {return Get_exec_gather_type_3_EnumValue(exec_gather_type_3);};
bool exec_negation_dir_gather_3;
__int16 exec_target_angle_3;
__int16 exec_target_offset_angle_3;
__int16 exec_target_offset_distance_3;
Data::TableRef exec_effect_3[8];
int exec_effect_3_tableId(){return 112;};
__int16 return_speed_3;
char Pad_sub_25[2];
__int32 return_duration_3;
__int32 swing_duration_4;
__int16 fly_speed_4;
char Pad_sub_26[2];
__int32 exec_duration_4;
__int8 exec_gather_type_4;
std::wstring exec_gather_type_4_EnumValue() const {return Get_exec_gather_type_4_EnumValue(exec_gather_type_4);};
bool exec_negation_dir_gather_4;
__int16 exec_target_angle_4;
__int16 exec_target_offset_angle_4;
__int16 exec_target_offset_distance_4;
Data::TableRef exec_effect_4[8];
int exec_effect_4_tableId(){return 112;};
__int16 return_speed_4;
char Pad_sub_27[2];
__int32 return_duration_4;
__int32 swing_duration_5;
__int16 fly_speed_5;
char Pad_sub_28[2];
__int32 exec_duration_5;
__int8 exec_gather_type_5;
std::wstring exec_gather_type_5_EnumValue() const {return Get_exec_gather_type_5_EnumValue(exec_gather_type_5);};
bool exec_negation_dir_gather_5;
__int16 exec_target_angle_5;
__int16 exec_target_offset_angle_5;
__int16 exec_target_offset_distance_5;
Data::TableRef exec_effect_5[8];
int exec_effect_5_tableId(){return 112;};
__int16 return_speed_5;
char Pad_sub_29[2];
__int32 return_duration_5;
__int8 trigger_gather_type;
std::wstring trigger_gather_type_EnumValue() const {return Get_trigger_gather_type_EnumValue(trigger_gather_type);};
bool trigger_negation_dir_gather;
char Pad_sub_30[2];
Data::TableRef trigger_effect[8];
int trigger_effect_tableId(){return 112;};
Data::TableRef trigger_prev_skill;
int trigger_prev_skill_tableId(){return 324;};
__int32 trigger_prev_skill_id;
Data::TableRef succession_prev_skill;
int succession_prev_skill_tableId(){return 324;};
__int32 succession_prev_skill_id;
bool apply_sealed_dungeon_skill_duration;
__int8 simultaneous_group;
std::wstring simultaneous_group_EnumValue() const {return Get_simultaneous_group_EnumValue(simultaneous_group);};
bool unnecessary_acquired;
__int8 gather_view_index;
__int16 recommend_priority;
__int16 recommend_distance;
__int16 recommend_distance_min;
__int16 recommend_distance_max;
__int8 boss_resistible_skill_type[5];
std::wstring boss_resistible_skill_type_EnumValue(int index) const {return Get_boss_resistible_skill_type_EnumValue(boss_resistible_skill_type[index]);};
char Pad_sub_31[3];
Data::TableRef boss_resistible_skill_message;
int boss_resistible_skill_message_tableId(){return 405;};
__int8 boss_resistance_skill_cast;
std::wstring boss_resistance_skill_cast_EnumValue() const {return Get_boss_resistance_skill_cast_EnumValue(boss_resistance_skill_cast);};
__int8 boss_resistance_skill_exec;
std::wstring boss_resistance_skill_exec_EnumValue() const {return Get_boss_resistance_skill_exec_EnumValue(boss_resistance_skill_exec);};
__int8 boss_resistance_skill_finish;
std::wstring boss_resistance_skill_finish_EnumValue() const {return Get_boss_resistance_skill_finish_EnumValue(boss_resistance_skill_finish);};
char Pad_sub_32[1];
__int32 boss_resistance_skill_time_offset;
bool reset_boss_resistance_skill;
__int8 resistance_skill_type;
std::wstring resistance_skill_type_EnumValue() const {return Get_resistance_skill_type_EnumValue(resistance_skill_type);};
__int16 resistance_skill_priority;
__int16 auto_combat_approach_skill;
bool auto_combat_cannot_override;
__int8 auto_combat_npc_resistible_skill_type[5];
std::wstring auto_combat_npc_resistible_skill_type_EnumValue(int index) const {return Get_auto_combat_npc_resistible_skill_type_EnumValue(auto_combat_npc_resistible_skill_type[index]);};
__int8 auto_combat_npc_resistance_skill_exec;
std::wstring auto_combat_npc_resistance_skill_exec_EnumValue() const {return Get_auto_combat_npc_resistance_skill_exec_EnumValue(auto_combat_npc_resistance_skill_exec);};
char Pad_sub_33[3];
__int32 auto_combat_npc_resistance_skill_time_offset;
__int8 auto_combat_resistance_skill_type;
std::wstring auto_combat_resistance_skill_type_EnumValue() const {return Get_auto_combat_resistance_skill_type_EnumValue(auto_combat_resistance_skill_type);};
char Pad_sub_34[1];
__int16 auto_combat_resistance_skill_priority;
bool deactive_on_skill_fail;
char Pad_sub_35[3];
__int32 deactive_on_skill_fail_duration;
bool skip_damage_split;
char Pad_sub_36[3];
wchar_t* catch_casting_target_anim;
wchar_t* catch_attach_caster_anim;
wchar_t* catch_attach_target_anim;
wchar_t* catch_detach_caster_anim;
wchar_t* catch_detach_target_anim;
wchar_t* catch_detach_target_landing_anim;
__int8 phantom_end_type;
std::wstring phantom_end_type_EnumValue() const {return Get_phantom_end_type_EnumValue(phantom_end_type);};
__int8 summoned_weapon_type;
std::wstring summoned_weapon_type_EnumValue() const {return Get_summoned_weapon_type_EnumValue(summoned_weapon_type);};
bool override_skill;
__int8 ground_type;
std::wstring ground_type_EnumValue() const {return Get_ground_type_EnumValue(ground_type);};
bool ui_show_force_instant_recycle;
bool ui_show_recycle;
bool ui_show_recycle_simple_context_mode;
char Pad_sub_37[1];
Data::IconRef ui_recycle_icon;
Data::TableRef ui_recycle_name;
int ui_recycle_name_tableId(){return 405;};
Data::TableRef ui_recycle_description;
int ui_recycle_description_tableId(){return 405;};
__int16 ui_sp_heal_value;
__int8 ui_sp_heal_type;
std::wstring ui_sp_heal_type_EnumValue() const {return Get_ui_sp_heal_type_EnumValue(ui_sp_heal_type);};
__int8 casting_target;
std::wstring casting_target_EnumValue() const {return Get_casting_target_EnumValue(casting_target);};
__int8 attach_bone_type;
std::wstring attach_bone_type_EnumValue() const {return Get_attach_bone_type_EnumValue(attach_bone_type);};
char Pad_sub_38[3];
wchar_t* caster_attach_bone;
wchar_t* target_attach_bone;
__int8 attach_bone_exec_step;
__int8 detach_bone_exec_step;
__int8 mesh_hide_exec_step;
char Pad_sub_39[1];
__int32 ui_next_combo;
__int8 combo_start_point_flag;
bool summoned_attack;
bool summoned_is_recall;
bool summoned_is_target_change;
bool summoned_is_target_swoon;
char Pad_sub_40[3];
Data::TableRef ui_show_effect_stack;
int ui_show_effect_stack_tableId(){return 111;};
bool use_skill_message;
__int8 override_level;
__int8 override_available_level;
__int8 override_group[5];
__int32 override_group_bit_flags;

		static __int32 SubType() { return 0; }
	};
#pragma pack(pop)
}